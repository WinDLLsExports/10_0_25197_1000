 ----- ----
      
      -
      - 
           
 -         - 
                              
        %s = %s;
        %s = %s[%d];
        %s = asm {
        %s = NULL;
        // No embedded %s
     NO
    #%04X checksum = %016llX, cache = #%04X
    %s
    %s (%u)
    // %s
    {
    }
    },
    3
    asm {
    Func ID to TI mapping
    lib_4_0_ps_%u_%u
    lib_4_0_ps_2_x
    lib_4_0_vs_%u_%u
    lib_4_0_vs_2_x
    N/A
    NULL,
    oMask
    oStencilRef
    pass 
    preshader
    ps_%u_%u
    ps_2_sw
    ps_2_x
    ps_3_sw
    tx_%u_%u
    u
    vs_%u_%u
    vs_2_sw
    vs_2_x
    vs_3_sw
    YES
   %08X:
   %c%c%c%c
   o%-4u %-3u 
   oDepth
   primID
  %08X->%08X
  (PCH TM Cache #%04X)
  // 
 - note that the target doesn't support texture sampling intrinsics
 - note that the target doesn't support textures
 - note that the target doesn't support UAVs
  signature=%X
  special
 - Try reducing number of constant branches, take bools out of structs/arrays or move them to the start of the struct
 - Try reducing number of constants referenced
 - Try reducing number of loops, take loop counters out of structs/arrays or move them to the start of the struct
  v%-4u %-3u 
 !"#$%
 !"#$%&'(
 !"#$%&'()*+
 !"#$%&'()*+,-
 !"#$%&'()*+,-./012
 !"#$%&'()*+,-./01234567
 !"#$%&'()*+,-./0123456789:;<=>?@
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 !"#$%&'().
 !"#$%&'()+++++++++++++++++++++++++++++++++++++++++++*
 !"#$%OO&'()OOOO*OOOO+,-OO./0OOOOOOO12345678OOO9:;<=>OOO?@ABCOOODEFGOOOOOOOOOOHIJKLMN
 !###########################"###############
 !;<=> !
 !@"@
 !+,`
 !1234zw
 "%s"
 $@#@
 %08X
 %-20s
 %c%-4u
 %u, %u, %u
 (%.9g
 (%u texture, %u arithmetic)
 (@*@
 (second)
 ** Cache #%04X
 ** Modules
 ** Version : %u (0x%08X)
 : %s
 : packoffset(c%u.%c)
 : register(%c%u)
 ;@5@
 ;~Dr
 ;~Tr
 ??? 
 @{|XEz
 [unused]
 { nonuniform }
 + %d]
 = "%s"
 = { 
 = { "%s"
 0$0(0,0004080<0
 0F0_0
 0x%x
 1:1j>q>
 A{WXEz
 bool
--- Compilation status for library function '%s' ---
 const
 constant 
 D{ZXEz
 domain_isoline
 domain_quad
 domain_tri
 E{YXEz
 expr
 F{UXEz
 float
 fp%u[%u][%u] = {
 ft%u = {
 G{YXEzRichXXEz
 inflate 1.2.11 Copyright 1995-2017 Mark Adler 
 inout
 l(%f)
 line 
' line %d)
 lineadj 
 linear 
 linear centroid 
 linear noperspective 
 linear noperspective centroid 
 linear noperspective sample 
 linear sample 
 linestrip 
 Microsoft Corporation. All rights reserved.
 min10float
 min12int
 min16float
 min16int
 min16uint
 min8uint
 oDepthGE
 oDepthLE
 Operating System
 output_line
 output_point
 output_triangle_ccw
 output_triangle_cw
 partitioning_fractional_even
 partitioning_fractional_odd
 partitioning_integer
 partitioning_pow2
 patch1 
 patch10 
 patch11 
 patch12 
 patch13 
 patch14 
 patch15 
 patch16 
 patch17 
 patch18 
 patch19 
 patch2 
 patch20 
 patch21 
 patch22 
 patch23 
 patch24 
 patch25 
 patch26 
 patch27 
 patch28 
 patch29 
 patch3 
 patch30 
 patch31 
 patch32 
 patch4 
 patch5 
 patch6 
 patch7 
 patch8 
 patch9 
 point 
 pointlist 
 Program Database
 r4hD
 Reg   Size
 row_major
 SVWh
 t4Sh
 triangle 
 triangleadj 
 trianglestrip 
 tTSh
 tX=SFI0t
 uint
 uJ;]
 unaligned
 undefined 
 void
 volatile
 vPos
 vPSize
 Windows
 x%i[%i], %d
!"#$!%&'(%&'(%)*+,)-./0-./0-1234
!&)+-/135
!0@0a0
!This program cannot be run in DOS mode.
!w@t^
"""""
"""""""
""""""""
""""""""""
"""""""""""
"""""""""""""""""""""
""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""
"%&'%[
"%s" with respect to "%s"
"010<0g0v0
#######
########
#################
#####################
#######################
########################
##Internal error##
#} #M$
#+3;CScs
#0;0_7q7
#0J0e0
#Blob
#bML"
#D$ #
#D$\P
#D$4P
#D$H#
#D$H#t$L
#D$l#L$@#D$ #
#D9@#T9D
#GUID
#hlsl_full_path
#hlsl_full_path must be the first content in a source file
-#INF
#L$(#D$0
#L$@#D$ #
#L$@#D$D
#L$X#D$<
#line 
#line %u
#line %u %.*s
#M #E$
#pragma def (%s, %s, %g, %g, %g, %g)
'#pragma def' is no longer supported on DX10+ and 10level9 targets.  Use compatibility mode to allow compilation for now.
#pragma feature(%s) must appear before any local declaration
#pragma pack_matrix()
#pragma pack_matrix(column_major)
#pragma pack_matrix(row_major)
#pragma ruledisable "%s"
#pragma warning (disable:%d)
#pragma warning (error:%d)
#pragma warning (once:%d)
#t$ ;
#t$H#T$L
#w#tA
$""""
$%"#'(*,.02
$%%&&'''())**++++,,,,-----------..////0011223344555666666789:;<=>?@ABCD
$`<`t
$`<`u
$`<`u-
$`<`u<
$0< t!
$0< t(
$0< u
$080P0h0
$0J0Z0
$0K0a0
$0P0|0
$CBufferForClipPlane_%u
$clip_outputs
$Element
$Globals
$Invalid
$IsAnyDeriv(x)/dz -> $IsAnyDeriv(dx/dz) <| SR.GenDerivatives_Unary
$IsAnyShift(x, and(31, y)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
$IsAnyShift(x, and(y, 31)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
$IsAtomicAllocConsume(a, res) -> append_arg(all_sources(o, a)) <| SMR.DataFlagAnalysis_NoPlaceHolder
$IsAtomicAllocConsume(a, res) -> append_arg(all_sources(o, a)) <| SMR.DataFlagAnalysis_PlaceHolder
$IsBasicOrImmAtomic(a, res, addr, op) -> append_arg(all_sources(o, a), a, addr, op) <| SMR.DataFlagAnalysis_PlaceHolder
$IsBasicOrImmAtomic(a, res, addr, op) -> append_arg(all_sources(o, a), addr, op) <| SMR.DataFlagAnalysis_NoPlaceHolder
$IsLoop(a) -> append_sources() (loop predicate linkage) <| SMR.DataFlagAnalysis_PlaceHolder
$IsMultiWriteOut(a, chain) -> append_sources(a) <| SMR.DataFlagAnalysis_NoPlaceHolder
$IsMultiWriteOut(a, chain) -> append_sources(a) <| SMR.DataFlagAnalysis_PlaceHolder
$IsMultiWriteOut(a, chain) -> append_sources(a) <| SMR.RangeDataAnalysis
$IsResLoad(uav, a, addr, offs, mask) -> append_arg(all_sources(o, a), addr, offs) <| SMR.DataFlagAnalysis_NoPlaceHolder
$IsResLoad(uav, a, addr, offs, mask) -> append_arg(all_sources(o, a), uav, a, addr, offs, mask) <| SMR.DataFlagAnalysis_PlaceHolder
$IsResLoad(uav, a, addr, offs, mask) -> append_arg(sources(o, a)) <| SMR.RangeDataAnalysis
$IsResStore(uav, a, addr, offs, mask, val) -> append_param(a) (chain) <| SMR.DataFlagAnalysis_NoPlaceHolder
$IsResStore(uav, a, addr, offs, mask, val) -> append_param(a) <| SMR.DataFlagAnalysis_PlaceHolder
$IsRound(fp int) = mov(fp int) <| MR.GenSimplifyInstructionsOpt1_NoExcl
$IsStandardLoad(a, chain) -> append_addressed(o, chain) (range/flag prop) <| SMR.RangeDataAnalysis
$IsStandardLoad(a, chain) -> append_addressed(o, chain), append_arg(a, chain) <| SMR.DataFlagAnalysis_PlaceHolder
$IsStandardStore(addr, val, chain) -> append_param(chain) <| SMR.DataFlagAnalysis_NoPlaceHolder
$IsStandardStore(addr, val, chain) -> append_param(chain) <| SMR.DataFlagAnalysis_PlaceHolder
$IsSync() -> append_all_visible+inputs(UAV chain args) <| SMR.DataFlagAnalysis_PlaceHolder
$IsTwoValueAtomic(chain, res, addr, op1, op2) -> append_arg(all_sources(o, chain), chain, addr, op1, op2) <| SMR.DataFlagAnalysis_PlaceHolder
$IsTwoValueAtomic(chain, res, addr, op1, op2) -> append_arg(chain, addr, op1, op2) <| SMR.DataFlagAnalysis_NoPlaceHolder
$p< u
$P<@u
$Params
$PRESHADER_PS
$PRESHADER_VS
$SKIP
$super
$SVWh
$SWhx
$t,VW
$T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
$T0 $esp = $eip $T0 ^ = $esp $T0 4 + = $ebp $ebp = $ebx $ebx = $eax $eax = $ecx $ecx = $edx $edx = $esi $esi = $edi $edi =
$T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
$T0 .raSearch 4 - = $ebp $T0 ^ = $eip $T0 4 + ^ = $esp $T0 8 + =
$T2 $esp = $T0 .raSearchStart =
$T2 $esp = $T0 .raSearchStart = $eip $T0 ^ = $esp $T0 4 + = $ebp $ebp = $ebx $ebx =
$ThisPointer
$u)VW
$VPhX
%%%%%&%%%%4
%%%&'2
%.14fl
%0,0R0Y0w0~0
%030<0H0u0
%040=0C0`0i0o0
%-17s
%-20s
%2u %9u 
%3333
%4u%c 
%4u: Illegal instruction index
%cnorm can not be used with type
%cs_%d_%d
%d constant registers (c#) read by instruction.  Max. constant registers readable per instruction (even if they are the same) is %d.  This is in addition to the read port limit of %d for constants, which restricts how many *different* constants can be read. (There is one exception: none of this applies to the SINCOS macro instruction.)
%d different constant registers (c#) read by instruction.  Max. different constant registers readable per instruction is %d.
%d different constant registers (c#) read by instruction.  Max. different constant registers readable per instruction is %d. 
%d different constant registers (c#) read by instruction.  Max. different constant registers readable per instruction is %d. (There is one exception: this rule does not apply to the SINCOS instruction.)
%d different constant registers (c#) read by instruction.  Max. different constant registers readable per instruction is %d.(There is one exception: this rule does not apply to the SINCOS macro instruction.)
%d different constant registers (c#) read over 2 co-issued instructions. Max. different register numbers from any one register type readable across co-issued instructions is %d.
%d different input (v#) or texture (t#) registers read by instruction.  Max. different input/texture registers readable per instruction is %d.
%d different input registers (v#) read by instruction.  Max. different input registers readable per instruction is %d.
%d different input registers (v#) read by instruction.  Max. different input registers readable per instruction is %d. 
%d different input registers (v#) read over 2 co-issued instructions. Max. different register numbers from any one register type readable across co-issued instructions is %d.
%d different input registers (v*#) read by instruction.  Max. different input registers readable per instruction is %d.
%d different temp registers (r#) read by instruction.  Max. different temp registers readable per instruction is %d.
%d different temp registers (r#) read over 2 co-issued instructions. Max. different register numbers from any one register type readable across co-issued instructions is %d.
%d different texture coordinate registers (t#) read by instruction.  Max. different texture registers readable per instruction is %d.
%d different texture registers (t#) read by instruction.  Max. different texture registers readable per instruction is %d.
%d different texture registers (t#) read over 2 co-issued instructions. Max. different register numbers from any one register type readable across co-issued instructions is %d.
%d%s (ordinal)
%d[%d].
%JK%[:;"%a#"\<STUb
%s %s
%s %s = 
%s %s[%d] = 
'%s' : macro redefinition
'%s' : unknown pragma ignored
'%s' already defined as a %s
%s array index must be a literal expression
%s array signature parameter %s cannot be indexed dynamically.
%s bem cannot be co-issued.
%s binding ranges overlap for range %s[%d:%d]
%s can only be used with non-NULL shaders
%s can only emit to 1 stream
%s can only emit to streams 0-%u
%s cannot be redeclared
%s cannot be used with doubles, cast to float first
%s can't operate on array references
%s condition parameter can't specify min precision. 
%s condition parameter%s can't specify min precision. 
%s def cannot be co-issued.
%s did not match any prototype in the class
%s does not allow instancing
%s does not allow textures or samplers to be members of compound types
%s does not allow writable textures, samplers or UAVs to be members of compound types with interface inheritance
%s does not have method '%s'
%s does not support 16-bit float conversions
%s does not support 16-bit uint minimum-precision data
%s does not support 8-bit or 16-bit integers
%s does not support aborts
%s does not support Append/Consume buffers
%s does not support double-precision floating-point
%s does not support doubles
%s does not support groupshared, groupshared ignored
%s does not support indexing resources
%s does not support interface bindings
%s does not support interlocked operations
%s does not support messages
%s does not support minimum-precision data
%s does not support msad4
%s does not support multi-output stream out
%s does not support pull-model attribute evaluation
%s does not support pull-model evaluation of position
%s does not support stream out
%s does not support structs without members
%s does not support structured buffers
%s does not support synchronization operations
%s does not support thread synchronization operations
%s does not support typed UAVs
%s does not support UAVs
%s dp4 cannot be co-issued.
%s emulates A / B with A * reciprocal(B). If the reciprocal of B is not representable in your min-precision type the result may not be mathematically correct.
%s input limit (%d) exceeded, shader uses %d inputs.
%s instruction cannot be predicated.
%s instruction cannot write to scalar output register.
%s instruction cannot write to scalar output registers (oFog, oPts).
%s instruction does not support _sat modifier.
%s instruction must use destination writemask: .%s
%s instruction requires parameter to be label (l#). 
%s instruction requires sampler declared in %s mode.  Opcode #%d, operand #%d (counts are 1-based). 
%s instruction requires shader model 5 or higher.
'%s' is not a valid instruction in this shader version
'%s' is not a valid register name.  Registers must start with v_, r_, c_, b_, or i_ depending on the register type. (o_ for vs_3_0 only)
%s is not supported on %s
%s is only valid in hull shaders
'%s' matches a variable in the template shader but the type layout does not match
'%s' max tesselation factor must be in the range [1,64]
'%s' must have a max vertex count
'%s' must have a max vertex count greater then 0
%s nop cannot be co-issued.
%s not supported on the given type
%s object does not have method '%s'
%s object does not have methods
%s only allows up to %u instances
%s only supports interlocked operations on scalar int or uint data
%s output limit (%d) exceeded, shader uses %d outputs.
%s phase marker cannot be co-issued.
%s register already declared.
%s registers live in the same name space as outputs, so they must be bound to at least %c%u, manual bind to slot %s failed
%s requires %s parameter to be integer constant register (i#). 
%s requires %s parameter to be label (l#). 
%s requires parameter (the branch condition) to be boolean constant register (b#), or predicate register (p0). 
%s requires parameter (the branch condition) to be boolean constant register (b#). 
%s requires replicate swizzle for source parameter(s) in order to select component. For the vPos register, this can either be .x or .y (z,w are not available). 
%s requires replicate swizzle for source parameter(s) in order to select component. i.e. .x | .y | .z | .w (or rgba equivalent)
%s requires replicate swizzle for the source parameter in order to select component. i.e. .x | .y | .z | .w (or rgba equivalent)
%s requires resource declared as texture2D/2DArray%s.  Opcode #%d, operand #%d (counts are 1-based). 
%s requires second source parameter (the condition) to be boolean constant register (b#), or predicate register (p0). 
%s requires second source parameter (the condition) to be boolean constant register (b#). 
%s requires the condition parameter%s to be boolean constant register (b#), or predicate register (p0). 
%s requires the condition parameter%s to be boolean constant register (b#). 
%s requires the first parameter to be a label (l#). 
%s semantic '%s'
%s semantic '%s' cannot be centroid
%s semantic '%s' has been deprecated; use '%s%d' instead
%s shader fragments are not supported
%s signature parameter %s (1-based Entry %d) has an unrecognized system name. 
%s signature parameter %s (1-based Entry %d) specifies invalid interpolation mode for integer component type. 
%s signature parameter %s (1-based Entry %d) specifies unrecognized or invalid component type. 
%s signature parameter %s (1-based Entry %d) type must be a scalar float. 
%s signature parameter %s (1-based Entry %d) type must be a scalar uint. 
%s signature parameter %s (1-based Entry %d) type must be float32 and mask must be xyzw. 
%s signature parameter %s (1-based Entry %d) type must be float32. 
%s signature parameter %s (1-based Entry %d) type must be uint32. 
%s snap offset must be in the range -8 to 7
%s target does not support texture lookups
%s tessfactor %ss missing
'%s' used but not defined
%s X%u: 
'%s'!'%s'
%s%d must be a four-component vector
%s%d%s
%s%s contains a system-interpreted value (%s) which must be written in every execution path of the shader.  Unconditional initialization may help. <| A%u (B%u)
%s%s contains a system-interpreted value (%s) which should be written in every execution path of the shader <| A%u (B%u)
%s%s requires replicate swizzle for this parameter in order to select component. i.e. .x | .y | .z | .w (or rgba equivalent)
%s%u,space%u
%s%u.%c
%s%u[%u:
%s%ux%u
%s(%d) : 
'%s(%s)' attribute expected, where '%s' are %s
'%s(%s)' attribute expected, where '%s' is %s
'%s': %s cannot be declared 'const'
'%s': %s cannot be declared 'extern'
'%s': %s cannot be declared 'groupshared'
'%s': %s cannot be declared 'inline'
'%s': %s cannot be declared 'shared'
'%s': %s cannot be declared 'single'
'%s': %s cannot be declared 'static'
'%s': %s cannot be declared 'uniform'
'%s': %s cannot be declared 'uniform out'
'%s': %s cannot be declared 'volatile'
'%s': %s cannot be target specific
'%s': %s cannot be void
'%s': %s cannot have %ss
'%s': %s cannot have annotations
'%s': %s cannot have semantics
'%s': %s does not support 64-bit integers
'%s': %s does not support 8-bit or 16-bit integers
'%s': %s does not support doubles as a storage type
'%s': %s does not support minimum-precision data
'%s': %s must be a literal expression
'%s': %s only allows one depth output
'%s': %s semantic has no special meaning on 10level9 targets
'%s': %ss are limited to no more than %u parameters (%u given)
'%s': ambiguous function call
'%s': array dimension must be between 1 and 65536
'%s': array dimensions of %s must be explicit
'%s': cannot %sconvert %sfrom '%s' to '%s'
'%s': class does not implement method %s
'%s': Compute shaders can't return values, outputs must be written in writable resources (UAVs).
'%s': conversion from larger type to smaller, possible loss of data
'%s': declaration type differs from definition type
'%s': default parameters can only be provided in the first prototype
'%s': doubles cannot be used as library function inputs or outputs. If you need to pass a double to a library function, you must pass it as two uints and use asuint and asdouble to convert between forms.
'%s': entrypoint not found
%s: ERROR: If either a HullShader or DomainShader is set then both must be set. Technique %s, Pass %s.
%s: ERROR: No valid %s-%s combination could be found in Technique %s, Pass %s.
'%s': extern %s cannot be declared 'groupshared'
'%s': extern %s cannot be declared 'static'
'%s': function must return a value
'%s': function return value cannot contain Effects objects
'%s': function return value differs from prototype
'%s': function return value missing semantics
'%s': functions cannot be declared 'extern'
'%s': functions cannot be declared 'uniform'
'%s': functions cannot have a target
'%s': Geometry shaders can't return values, outputs must be written to streams.
'%s': global structs and classes cannot be changed
'%s': global variables cannot use the 'half' type in %s. To treat this variable as a float, use the backwards compatibility flag.
'%s': groupshared variables cannot hold resources
'%s': identifier represents a %s, not a function
'%s': identifier represents a %s, not a variable
'%s': implicit array missing %s
'%s': implicit array type does not match %s
'%s': implicit truncation of vector type
'%s': incorrect array size
'%s': initializer does not match type
'%s': input parameter '%s' cannot have a geometry specifier
'%s': input parameter '%s' conflicts with geometry specifier of previous input parameters
'%s': input parameter '%s' missing semantics
'%s': input parameter '%s' missing semantics, expected %s
'%s': input parameter '%s' must have a geometry specifier
'%s': input parameter '%s' patch size must be in the range [1,32]
'%s': InputPatch inputs can only be used in hull and geometry (5_0+) shaders
'%s': interface input parameters not yet implemented for hull shaders, use a global interface instead
'%s': interface methods cannot be declared outside of an interface
'%s': interface methods cannot be static
'%s': interface methods cannot have bodies
'%s': interfaces can only be inputs
'%s': interfaces cannot be declared in buffers
'%s': interfaces cannot be members
'%s': interfaces cannot contain data
'%s': interfaces cannot have semantics
'%s': invalid shader target/usage
'%s': library function parameter and return cannot have duplicate semantic '%s'
'%s': library function parameters cannot have duplicate semantic '%s'
'%s': library functions are supported only for PS and VS shaders
'%s': library functions cannot have a target
'%s': line output topologies are only available with isoline domains
'%s': loop control variable conflicts with a previous declaration in the outer scope; most recent declaration will be used
'%s': may only have one InputPatch parameter
'%s': may only have one OutputPatch parameter
'%s': member not a static variable
'%s': method not found in class
'%s': missing %s
'%s': missing default value for parameter '%s'
'%s': no input primitive specified, if your shader doesn't require inputs, then define an empty struct and give it the proper primitive type.
'%s': no matching %u parameter %s
'%s': non-numeric uniform %s cannot have %ss
'%s': Not all control paths return a value
'%s': only first dimension can be implicit
'%s': out parameters cannot have default values
'%s': output only %s cannot have %ss
'%s': output parameter '%s' missing semantics
'%s': output parameter '%s' not completely initialized
'%s': output parameters cannot be declared 'const'
'%s': output parameters not yet implemented for control point shaders
'%s': OutputPatch inputs can only be used in the domain shaders and a hull shader's patch constant function
'%s': Patch constant function must use the same input control point type declared in the control point phase.
'%s': Patch constant function must use the same output control point type returned from the control point phase.
'%s': Patch constant function's output patch input should have %d elements, but has %d.
'%s': place-holder template resources can only be simple resources, structs and arrays are not supported
'%s': recursive functions not allowed in %s
'%s': return type does not match overridden method
'%s': samplers can only be used with declared textures or texture assignments
'%s': static member not found in class
'%s': static members can only be defined in global scopes
'%s': static methods cannot be called on objects
'%s': 'static' mismatch between declaration and definition
'%s': stream input parameter '%s' can only be used in geometry shaders
'%s': stream input parameter '%s' must be an inout parameter
'%s': stream input parameter '%s' must be an inout parameter 
'%s': stream output parameter '%s' can only be used in geometry shaders
'%s': stream output parameter '%s' must be an inout parameter 
'%s': too many target specifiers given
'%s': top-level interface arguments cannot be 'out'
'%s': Top-level output parameter '%s' not completely initialized
'%s': Top-level return value is not completely initialized
'%s': triangle output topologies are not available with isoline domains
'%s': types cannot contain members of their own type
'%s': undefined variable
'%s': uniform %s cannot be declared 'groupshared'
'%s': uniform %s cannot be declared 'static'
'%s': unsupported type for a library function parameter '%s'
'%s': unsupported type qualifier for a library function parameter '%s'
'%s': variable declared but not defined
'%s': variable is declared as tbuffer, which is not supported for libraries yet
'%s': variables containing textures, samplers and UAVs can only be declared 'static' if the variable only contains resources
'%s': variables of type '%s' cannot be declared 'static'
'%s': void function cannot have a semantic
'%s': void functions cannot return a value
%s: WARNING: There exist invalid %s-%s combinations in Technique %s, Pass %s, depending on which elements of the specified shader array(s) are chosen.
'%s': When defining a pass-through control-point shader, the number of output control points must be zero or must match the input patch size.
'%s': When defining a pass-through control-point shader,you must declare an InputPatch object.
%s[%s]
%s[%u +
%s[%u]
%s[%u].%c
%s[%u][%u].%c
%s[eval(
%s[r%u.%c/%u]<
%s[r%u.%c]<
%s\%s
%s_%s_n%u_%u
%s_n%u_%u
%s+%s
%s<%d
%sInvalid register number: %d.  Max allowed for this type is %d.
%sInvalid register number: %d. Max allowed for this type is %d.
%sInvalid register type.
%sInvalid source modifier for tex* instruction.
%sInvalid source modifier.
%sInvalid source register type for instruction.
%sInvalid source selector for tex* instruction.
%sInvalid source selector.
%sInvalid source selector: %s. The only available source swizzles in this shader version are: .rgba/xyzw (same as not specifying swizzle), .r/x, .g/y, .b/z, .a/w, .gbra/yzxw, .brga/zxyw and .abgr/wzyx. 
%sModifiers are not allowed on constants for ps_1_4.
%sMS%d
%sRegister number: %d on this parameter for a matrix instruction causes attempt to access out of range register number %d. Max allowed for this type is %d.
%sSource modifier not allowed for tex* instruction.
%sSource register type must be temp (r#) or texture coordinate input (t#) for tex* instruction.
%sSource register type must be texture coordinate input (t#) for texcrd instruction.
%sSource swizzles not allowed on tex* instruction.
%sTexture coordinate registers (t#) are not available to arithmetic instructions.
%sUnexpected source parameter.
%u "%s"
%UUUU+
%UUUU3
%ux%u
&'()*+,-
&f9<M
&VRQW
(%f, %f, %f, %f)
(%fl, %fl)
(%i,%i,%i)
(%s source param) Invalid register number: %d.  Max allowed for this type is %d.
(%s source param) Modifiers are not allowed on constants for ps_1_x.
(%s source param) Negate or abs modifiers not permitted on source parameters to texld*
(%s source param) Source modifier not allowed on sampler (s#).
(%s source param) Source modifier not allowed on texcoord for texldl.
(%u,%u-%u): 
(%u,%u): 
(())4,--./01/2---.3.
((a << m) & n) | i : if( known_bfi_bitmask_postshift_ignore(n,a,m,i) ) -> bfi(bfi_bitwidth_postshift_ignore(n,a,m,i), m, a, 0i) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
((a >> o1) << o2) : if( o1 == o2 ) -> bfi(o, 0, 0, a) <| MR.GenD3D10_OptimizeEarlyTranslate
((a >> ov1) << o2) : if( ov1 == o2 ) -> and(a, ~((1 << ov1)-1)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(;S(r
(0 < n) ? 1 : 0 -> umin(1, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(0,00040W1
(0x%08x)
(222222222222222222222222222)*+*,
(a != b) ? a : b -> a <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a != b) ? b : a -> b <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a & ((iv_pow2 << n) - 1)) -> bfi(iv_pow2 + n, 0, a, 0i) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & ~(((iv_pow2 << n) - 1) << o) -> bfi(iv_pow2 + n, o, 0, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & ~(((iv_pow2 << n) << ov) + (-1 << ov))) -> bfi(iv_pow2 + n, ov, 0, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & ~((iv_pow2 << n) - 1)) -> bfi(iv_pow2 + n, 0, 0, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(A & B) | (A & C) => (A & (B | C)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a & b) | (a & c) -> and(a, b | c) <| MR.GenSimplifyInstructionsOpt1_Excl
(a & n) | i << m : if( known_bfi_bitmask_ignore(a,n,i,m) ) -> bfi(bfi_bitwidth_ignore(a,n,i,m), m, n | i, 0i) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & n) | r : if( known_bfi_bitmask_noshift(n,a,r) && and_is_zero(n,r) ) -> bfi(bfi_bitwidth_noshift(n,a,r), 0i, a, r) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
(a & n) << m : if( known_bfi_bitmask(a,n,m) ) -> bfi(bfi_bitwidth(a,n,m), m, n, 0i) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & n) << m : if( known_bfi_bitmask(n,a,m) ) -> bfi(bfi_bitwidth(n,a,m), m, a, 0i) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & n) >> m : if( known_ubfe_bitmask(a,n,m) ) -> ubfe(ubfe_bitwidth(a,n,m), m, n) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & n) >> m : if( known_ubfe_bitmask(n,a,m) ) -> ubfe(bitwidth(n,a,m), m, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a | (((iv_pow2 << n) - 1) << o)) -> bfi(iv_pow2 + n, o, -1, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a | (((iv_pow2 << n) << ov) + (-1 << ov))) -> bfi(iv_pow2 + n, ov, -1, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a | ((iv_pow2 << n) - 1)) -> bfi(iv_pow2 + n, 0, -1, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a | (b << n)) : if(known_bfi_bitwidth_impmask(a, b, n)) -> bfi(get_bfi_bitwidth_impmask(a, b, n), n, b, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(A + A) * 0.5 -> no-op mov of A <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a + F) - a -> append_arg(F) <| SMR.RangeDataAnalysis
(a + F1) - (a + F2) -> append_arg(F1-F2) <| SMR.RangeDataAnalysis
(A + L2) - (A + L1) = L2 - L1 if A non-NaN/Inf <| Explicit
(a << m) & n : if( known_bfi_bitmask_postshift(n,a,m) ) -> bfi(bfi_bitwidth_postshift(n,a,m), m, a, 0i) <| MR.GenD3D10_OptimizeEarlyTranslate
(a << n) >> (m) -> ibfe(32-m, m-n, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a << n) >> (m) -> ubfe(32-m, m-n, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a == (b ? a : c)) : if (c != a) -> b != 0 <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a == (b ? c : a)) : if (c != a) -> b == 0 <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a == b) ? a : b -> b <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a == b) ? b : a -> a <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a >> m) & n : if( high_bit_clear(a & n) && known_ubfe_bitmask_nomaskshift(a,n,m) ) -> ubfe(ubfe_bitwidth_nomaskshift(a,n,m), m, n) <| MR.GenD3D10_OptimizeEarlyTranslate
(a >> m) & n : if( known_ubfe_bitmask_nomaskshift(a,n,m) ) -> ubfe(ubfe_bitwidth_nomaskshift(a,n,m), m, n) <| MR.GenD3D10_OptimizeEarlyTranslate
(B & A) | (A & C) => (A & (B | C)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(bfi(w, 0i, 0, n) | ubfe(w, 0i, v)) -> bfi(w, 0i, v, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(bfi(w, o, 0, n) | bfi(w, o, v, 0)) -> bfi(w, o, v, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(First source param) 
(Fourth source param) 
(i + I) - i -> append_arg(I) <| SMR.RangeDataAnalysis
(i + I1) - (i + I2) -> append_arg(I1-I2) <| SMR.RangeDataAnalysis
(int)(a & n) >> m : if( high_bit_clear(a & n) && known_ubfe_bitmask(a,n,m) ) -> ubfe(bitwidth(a,n,m), m, n) <| MR.GenD3D10_OptimizeEarlyTranslate
(int)(a & n) >> m : if( high_bit_clear(a & n) && known_ubfe_bitmask(n,a,m) ) -> ubfe(ubfe_bitwidth(n,a,m), m, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(n & a) | r : if( known_bfi_bitmask_noshift(n,a,r) && and_is_zero(n,r) ) -> bfi(bfi_bitwidth_noshift(n,a,r), 0i, a, r) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
(n > i) ? X : dmin(n, i) -> (i > n) ? X: i <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n > i) ? X : imin(n, i) -> (i > n) ? X: i <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n > i) ? X : min(n, i) -> (i > n) ? X: i <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n > i) ? X : umin(n, i) -> (i > n) ? X: i <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n >= V) ? V : n -> dmin(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n >= V) ? V : n -> imin(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n >= V) ? V : n -> min(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n >= V) ? V : n -> umin(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(none)
(previous instruction)
(previous instruction) Co-issued instruction cannot write all components - must write either alpha or color.
(previous instruction) Dot-product needs color/vector pipeline to execute, so instruction co-issued with it cannot write to color components.
(previous instruction) Dot-product which writes alpha cannot co-issue, because both alpha and color/vector pipelines used by the dot product.
(previous instruction) dp3 needs color pipe to execute, so instruction co-issued with it cannot write to color components.
(previous instruction) dp3 which writes alpha cannot co-issue since it uses up both the alpha and color pipes.
(previous instruction) dp4 instruction cannot be co-issued.
(previous instruction) Individual instruction in co-issue pair cannot write both alpha and color component(s).
(previous instruction) nop instruction cannot be co-issued.
(root parameter [%u], visibility %s)
(root parameter [%u], visibility %s, descriptor table slot [%u])
(root parameter[%u], visibility %s, descriptor table slot [%u])
(Second source param) 
(Source param) 
(Statement %d) 
(static sampler [%u], visibility %s)
(SVWj
(Third source param) 
(unknown scope entry kind)
(unknown scope value kind)
(unknown)
(unnamed)
(V < n) ? (V+1) : n -> dmin(V+1, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? (V+1) : n -> imin(V+1, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? (V+1) : n -> min(V+1, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? (V+1) : n -> umin(V+1, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? V : n -> dmin(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? V : n -> imin(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? V : n -> min(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? V : n -> umin(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
)\ZEo^m/
)0C0h0
)0H0$1
)1^1l1
)L$,+
* CIL *
* Linker *
* Portable PDB *
----****./2
***DIA***
***globals***
, "%s"
, %.9g
, '%s'
, %u, %u
, dynamicIndexed
, fb%u
, forcing loop to unroll
, ft%u
, immediateIndexed
, mode_comparison
, mode_default
, mode_mono
, or '%s'
, space=%d
, space=%u
, stride=%u
, texm3x2depth
,,,,,,,,,,,,
,-./01
,-./012345886788135,-./0
,1J1$3@3D3H3L3
,SVW3
,SVWh
,SVWj
. The compiler cannot always detect that an array is fully assigned to. Fully initializing the array in its declaration may help avoid this error
.$super
.?AU_Parallelism_resources_exhausted@std@@
.?AV_Generic_error_category@std@@
.?AV_System_error@std@@
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVerror_category@std@@
.?AVexception@std@@
.?AVlength_error@std@@
.?AVlogic_error@std@@
.?AVruntime_error@std@@
.?AVstl_critical_section_interface@details@Concurrency@@
.?AVstl_critical_section_win7@details@Concurrency@@
.?AVsystem_error@std@@
.?AVtype_info@@
.?AW4PDBErrors@@
._m%u%u
.<}u*
.00cfg
.Base
.CRT$XCA
.CRT$XCC
.CRT$XCL
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$brc
.data$r$brc
.data$rs$brc
.debug$P
.debug$S
.debug$T
.edata
.gfids
.giats
.idata
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.mips can only be used in a two-element indexing expression such as .mips[mip][element]
.rdata
.rdata$brc
.rdata$r$brc
.rdata$sxdata
.rdata$voltmd
.rdata$zzzdbg
.rrrr swizzle expected for operand #%d of opcode #%d (counts are 1-based). 
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.sample can only be used in a two-element indexing expression such as .sample[sample][element]
.text
.text$cthunks
.text$di
.text$mn
.text$mn$00
.text$src
.text$tii
.text$wti
.text$x
.text$yd
.xdata$x
/               
/()*OPgc^
/* Interface parameter %u bound to: %s
/* Stream %u out decl: "%s" */
/* Stream %u to rasterizer */
/* Stream out decl: "%s" */
// ---------- --------------------------------------------------
// -------------------- --------------------
// ------------------------------ ------------------
//   
// -------------- --------------- ----------------
// ---------- ------- ---------- ---------
// ---------- ------- --------- --------- ----------------------
// ------------------------------ ---- --------- ------- -------
// -------------------- -------------------- --------------- ---------------- ------------------------------ 
// --------------------------- ---- -- --------- ------- -------
// ------------------------------ ---------- ------- ----------- -------------- ------
// -------------------- ----- ------ -------- -------- ------- ------
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
//              
//             Slots
//       %s
//     %c%-4u= 
//   %s
//   Name
// %-20s %20u
// %-27s %4u 
// %-30s %10s %6s%d %11s %14s %6s %s
// %-30s %10s %6s%d %11s %7s %14s %6s %s
// %-30s %10s %7s %11s %14s %6s %s
// %-30s %10s %7s %11s %7s %14s %6s %s
// %-30s %-18s
// %-30s %4u %9u %7u %7u
// %3u  %s
// %s %s
// %s shader bytecode:
// %s signature:
// %u %s buffer(s)
// %u %s interface(s)
// %u %s object(s)
// %u groups(s)
// %u technique(s)
// | Table ID |         |
// | Type ID  |         |
// | Type ID  |%4u     |
// | Type ID  |%4u-%-4u|
// +----------+---------+---------------------------------------
// <internal error> column mismatch in debug info
// <internal error> could not find inner most frame in PDB
// <internal error> could not get array element stride from PDB
// <internal error> could not get find UDT child with correct offset in PDB
// <internal error> could not get live range length for variable from PDB
// <internal error> could not get location type from PDB
// <internal error> could not get matrix columns from PDB
// <internal error> could not get matrix element length from PDB
// <internal error> could not get matrix major stride from PDB
// <internal error> could not get matrix row-major flag from PDB
// <internal error> could not get matrix rows from PDB
// <internal error> could not get register index count from PDB
// <internal error> could not get register index values from PDB
// <internal error> could not get register type from PDB
// <internal error> could not get UDT child length in PDB
// <internal error> could not get UDT child offset in PDB
// <internal error> could not get UDT child type in PDB
// <internal error> could not get UDT children in PDB
// <internal error> could not get variable index ID from PDB
// <internal error> could not get vector element length from PDB
// <internal error> could not get vector length from PDB
// <internal error> file name too long in debug info
// <internal error> filename length mismatch in debug info
// <internal error> filename mismatch in debug info
// <internal error> incorrect file offset in debug info
// <internal error> incorrect instruction offset in debug info
// <internal error> incorrect scalar offset in debug info
// <internal error> incorrect token offset in debug info
// <internal error> incorrect variable offset in debug info
// <internal error> invalid matrix member
// <internal error> invalid vector member
// <internal error> line mismatch in debug info
// <internal error> offset overruns length for type in PDB
// <internal error> too many instruction outputs in debug info
// <internal error> unable to find instruction in PDB
// <internal error> unable to get array element type from PDB
// <internal error> unable to get column number from PDB
// <internal error> unable to get file id from PDB
// <internal error> unable to get file name from PDB
// <internal error> unable to get HLSL type kind from PDB
// <internal error> unable to get line number from PDB
// <internal error> unable to get matrix element type from PDB
// <internal error> unable to get source file info from PDB
// <internal error> unable to get statement flag from PDB
// <internal error> unable to get sub-variable type from PDB
// <internal error> unable to get type length from PDB
// <internal error> unable to get typedef type from PDB
// <internal error> unable to get vector element type from PDB
// <internal error> unable to instruction offset from PDB
// <internal error> unable to iterate instruction in PDB
// <internal error> unexpected data kind in PDB
// <internal error> unexpected location type in PDB
// <internal error> unexpected register type in PDB
// Approximately %i instruction slots used
// approximately %u instruction slot%s used
// approximately %u instruction%s used
// Available Class Instances:
// Available Class Types:
// b%-9d cb%-5d %10d %9d
// Buffer Definitions: 
// c%-10d %49s
// c%-9d cb%-5d %9d %9d  (
// Child effect (requires effect pool): %s
// clip%-6d cb%-5d %9d %9d  (
// COMMENT: %s
// Constant buffer to DX9 shader constant mappings:
// Created by:  %s
// Debug name: %s
// Default values:
// disassembly only available for VS and PS targets
// Function parameter signature (return: %s, parameters: %u):
// FX Version: %s
// Generated by 
// i%-9d cb%-5d %10d %9d
// Initial variable locations:
// Interface slots, %u total:
// Library:  flags %x, %u functions:
// Name                                 Type  Format         Dim      HLSL Bind  Count
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// Name                             ID CB Stride Texture Sampler
// Name                        Type CB CB Offset Texture Sampler
// Name                 Index   Mask Register SysValue  Format   Used
// Name                 SemanticName         In 1st,Num,Mask Out 1st,Num,Mask Type                           
// no %s
// Note: shader requires additional functionality:
// Note: SHADER WILL ONLY WORK WITH THE DEBUG SDK LAYER ENABLED.
// Offset:  N/A Size:   N/A [unused]
// Offset: %4u
// Offset: %4u Size: %5u%s
// Offset: %4u, size: %4u
// Parameters:
// Pixel Shader runs at sample frequency
// Registers:
// Resource Bindings:
// Runtime generated constant mappings:
// s%-13d s%-14d t%-16d
// Sampler/Resource to DX9 shader sampler mappings:
// Target Reg                               Constant Description
// Target Reg Buffer  Source Reg Component
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// Target Sampler Source Sampler  Source Resource
// Tessellation Domain   # of control points
// Tessellation Output Primitive  Partitioning Type 
// Trace has %u steps (some may be inactive)
/@{dXEz
/<ECSYMBOLS>/   
/<HYBRIDMAP>/   
/<XFGHASHMAP>/  
/2N2X3
/A{PXEzQ 
/Cube/CubeArray
/CXXMODWEAKSYM/ 
/LinkInfo
/names
/src/files/
/src/headerblock
/TMCache
/UDTSRCLINEUNDONE
: !":#$::%%%&''&'':():::::::::::*::::::+,:-./01:23:45::::::::::67:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::8:9[G
: :$:
: :$:(:,:0:4:
: :$:(:,:0:4:8:<:@:D:H:L:L<
: :$:(:,:0:4:8:<:@:D:H:L:P:T:p<
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:t:x:|:
: :$:(:@:D:H:L:P:T:X:\:`:
: :&;l;
: :(:0:8:@:P:X:`:h:p:
: :(:1:8:D:L:U:[:a:l:t:}:
: :(:L:X:`:x:
: :(<,</>
: :,:4:@:H:T:\:h:p:|:
: :,:8:D:P:\:h:t:
: :;:V:q:
: :@:\:`:|:
: :<:X:t:
: :>:
: :0:H:X:p:
: :4:n:
: :5:J:_:t:
: :8:P:h:
: :9:>:I:R:Z:d:h:o:
: :C:`:l:p:t:x:|:
: ;3;G;~;
: ;F;P;
: ;G;N;U;x<
: ;N;u;
: ;T;X;\;`;d;h;l;
:!:*:2:<:@:G:`:e:p:y:
:!:,:;:D:L:P:V:o:t:
:!:=:Y:u:
:!:6:K:`:u:
:!:K:r:
:!;';+;Q;W;[;
:!;q;L<Z<r<"=R=K>Y>e>v>
:!<6<|=
:";1;x;
:";g;
:";N;u;
:";r;
:#:+:7:=:a:|:
:#:a:~:
:#:b:i:s:
:#:M:a:v:
:#:P:]:z:
:#:U:o:
:$:,:4:D:L:T:d:l:t:
:$:,:8:@:t:|:
:$:::P:f:|:
:$:0:@:L:X:d:p:|:
:$:0:8:D:H:L:X:\:`:l:t:
:$:0:8:P:X:|:
:$:L:V:
:$;,;4;@;H;|;
:$;F;O;V;];d;k;r;y;
:$;f;x;T<q<
:$<(<
:%:/:9:?:I:S:]:g:q:{:
:%:3:
:%:C:a:
:%;,;3;x;
:&:/:6:Y:
:&:2:<:#;*;1;M;
:&:6:
:&:8:P:
:&:H:Y:{:
:&;:;
:&;{;
:&;8;
:&;K;
:&;M;T;_;
:(:,:3:L:Q:\:e:m:w:{:
:(:@:X:p:
:(:<:M:`:s:
:(:4:@:L:X:h:t:
:(:8:H:X:h:x:
:(:N:j:
:(:W:]:
:(;`;
:(;2;
:(;C;^;y;
:):L:]:
:);I;
:*:[:b:n:
:*:7:
:*:C:J:
:*:d:
:*:R:z:
:*:S:
:*;?;L;
:*;F;r;
:*;H;B>Z>
:*;l;|;
:,:@:T:h:|:
:,:G:b:}:
:,:U:
:,;6;H;`;
:,;F;o;
:,;j;
:.;?;N;Z;f;
:.;E;R;Y;
:/:?:
:/:h:
:/;<;f;
:/;x;
:':/:@:E:K:V:_:h:p:w:
:':/:8:?:K:S:\:c:o:w:
:::::::::::::::
:':?:W:o:
::__unnamed
:':+:2:K:P:[:d:l:v:z:
::<unnamed-tag>
:-:8:?:h:o:v:
:-:C:Y:o:
:-:L:k:
:-:O:q:
:-:Q:"<
:;;K;};
:;<=>?@ABCD
:';H;V;w;
:';m;
:?;:<
:?;z;
:@:G:P:
:@:K:
:@:T:z:
:@:u:|:
:@:X;
:@;D;H;L;P;
:@;e;
:@;l;
:@<_<
:[?b?t?{?
:\:`:
:\<c<
:]:d:
:+:M:i:
:+;@;N;`;|;
:<:[:
:<:D:\:|:
:<:e:
:<:H:P:
:<:Z:x:
:<;"<5<
:<;|;)=
:<;z;
:<;Z;m;
:=:m:
:=:m:-;Y<
:=;&<q<
:=;L;Z;
:>:M;
:>;|;
:><E<y<
:>=M=
:0:4:8:L:P:T:d:h:l:p:t:x:|:
:0:E:Z:o:
:0:H:`:x:
:0:k:
:0;4;8;<;X;\;
:0;7;O;^<e<
:0;f;
:1:;:J:V:b:l:v:~:
:1:?:P:
:1:7:;:a:g:k:
:1:F:[:p:
:1:Q:q:
:1:y:
:1;x;
:2:F:h:{:
:2:G:\:q:
:2:k:
:2<Z=
:3:H:]:r:
:3:I:_:u:
:3:L:p:t:x:|:
:3:R:i:
:3A396@6
:4:`:
:4:B:I:\:z:
:4:I:^:s:
:4;8;<;@;
:4;x;
:4<8<
:4=8=<=@=o=.>Z>
:5:->
:5:H:
:5;<;];d;4>8><>@>D> ?$?(?,?0?
:6:Y:{:
:6:Y;m;
:6;H;
:6;o;
:6<X<
:7:R:m:
:7:T:r:
:7;C;X;w;
:7;V=
:8:C:W:d:}:
:8:r:
:8;<;@;D;H;L;l;p;t;x;|;
:8;<;@;D;H;L;P;T;X;\;`;x;|;
:8;y;
:8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
:9;@;
:9;@;a;
:9;\;
:9;^;
:9;J;X;
:9;V;a;
:A:h:
:A;V;
:B:\:w:
:b;d<
:B;z;
:C;o;
:C<`>
:D$8t*
:D:q:v:}:
:D;^;
:D;H;L;P;d;h;
:D;H;L;P;T;l;p;t;x;|;
:d;h;Z<a<}<
:E:S:k:
:E:t:
:F:e:|:
:F<X<
:G;b;-<H<
:G;t;
:h:l:
:H:M:_:q:
:H:u:
:H;p;
:H;v;
:H;V;
:J;|;+<
:K;h;
:k;r;~;
:L:V:h:
:n; =*=
:NB09
:O;o;
:P:a:
:P;p<
:P;U;Z;x;
:Q:X:
:Q;X;n;
:r;y;Y<`<2=9=
:S:b:z:
:ShISGN
:ShOSG5
:ShPCSG
:T;w;
:U:\:E;O;
:U:l:~:
:U;\;
:U<s=
:V:p;,<]=
:V:q: ;%;a;
:Y;/<
:Y;~;
:Y;b;
:Z:=;
; ;$;(;,;\?|?
; ;$;(;,;0;
; ;$;(;,;0;4;
; ;$;(;,;0;4;8;
; ;$;(;,;0;4;8;<;@;D;H; <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;$;(;,;0;4;8;<;@;L;T;\;d;l;t;|;
; ;$;(;4;@;P;X;\;h;t;
; ;$;(;h;
; ;$;8;<;@;
; ;$;E;];|;
; ;$;L;P;T;l;p;t;x;
; ;&;,;2;8;>;D;J;P;V;\;b;h;n;t;z;
; ;&;,;2;8;>;E;L;S;Z;a;h;o;w;
; ;(;4;8;<;H;L;P;\;d;p;x;
; ;,;4;@;D;H;T;\;h;p;|;
; ;';F;T;Z;a;r;{;
; ;<;@;\;`;|;
; ;0;8;@;H;X;`;h;p;x;
; ;8;H;p;
; ;8;P;h;
; ;9;>;I;R;Z;d;h;o;
; <?<
;!;&;1;@;I;Q;U;[;t;y;
;!;@;
;!;f;
;!<V<t<
;";(;
;";;;@;K;Z;c;j;n;t;
;";@;^;|;
;";+;3;=;A;H;b;g;r;
;";5;O;
;";M;\;g;
;"<L<S<m<
;"<y<
;"=+=
;#;(;/;;;C;L;S;_;g;p;w;
;#;-;7;A;G;Q;[;e;o;y;
;#;\;z;
;#;+;4;;;G;O;X;_;k;s;|;
;#;k;r;
;#<6<@<
;#<a<
;#<D=R=
;#<F<[<~<
;#<Z<
;$;,;@;H;P;X;l;t;
;$;,;4;D;L;T;d;l;t;
;$;,;4;D;L;T;d;l;t;|;
;$;0;<;H;T;`;l;x;
;$;0;8;D;L;X;`;l;t;
;$;6;
;$<(<x<|<
;$<`<
;$<|<
;$<I>N>y>
;$<M<T<f<m<
;$<N=
;$<q<
;%;-;>;C;K;X;_;g;n;v;~;
;%;+;1;7;=;C;I;O;U;[;a;g;m;s;y;
;%;7;I;[;m;
;%;A;K;t;{;
;&;-;4;;;T;j;
;&;-;4;;;Y;a;w;
;&;+;6;?;G;Q;U;\;u;z;
;&;=;`;v;
;&;4;:;
;&<8<
;&<E<^<y<
;&<g<
;&<I<n<
;(;@;X;p;
;(;0;T;`;h;
;(;4;@;L;X;d;p;|;
;(;B<b<
;(<,<
;(<6<<<B<H<N<T<[<b<i<p<w<~<
;(<b<
;(<m<
;(>7>>>}>0?b?
;);;;
;);-;4;M;R;];f;n;x;|;
;)<U<~<
;*;8;<;
;*;E;`;{;
;*<;<Q=
;*<i<
;,;<;q;
;,;0;D;H;X;\;
;,;5;
;,;8;@;X;`;
;,;A;V;k;
;,;B;X;n;
;,;J;h;
;,<0>
;,<4<<<H<P<
;,<W<
;.;5;n;};
;.;C;X;m;
;.;I;d;
;.<l<
;.<u<
;/;D;Y;n;
;/;G;_;w;
;/<5<u<
;:;D;l;p;t;x;
;:;s;w<
;:;W;
;';.;N;v;
;';;;O;c;v;
;;;_;
;;;B;f;m;9<
;;;Q;h;q;x;
;-;5;R;};
;';9;c;q;x;
;-;B;W;l;
;';E;Q;
;?;j;{;
;?;L;i;
;@;D;
;@;D;H;*<
;@<D<H<\<`<d<h<l<p<t=
;@<f<
;[<b<
;\$ r
;\$$r
;\<`<d<h<l<p<t<x<|<
;\<~<
;]<p<
;^,v'
;^;r;x;~;
;^<s)
;_0sMSh
;_4s"
;{$r(
;|$,r
;|$Dr
;~0v$
;~dt%
;~duq
;+;B;h;x;
;<;@;D;H;L;P;T;X;\;`;M<
;<;[;h;~;
;<;\;|;
;<;W;_;
;<<f<{<
;<=>?@ABCDEFGHIJKL
;'<s<
;-<T<k<
;'<W<
;'<Z<
;=;L;Y;
;=<G<
;=<m<'>9>t>
;>;H;j;
;0;D;X;l;
;0;E;Z;o;
;0;H;`;x;
;0;l;v;
;0;S;{;
;0<4<8<<<@<D<
;0<6=
;1;{;
;1;F;[;p;
;1;j;z;
;1;Q;q;
;1r%u
;2;G;\;q;
;2<[<w<
;2<_<o<
;2<P<
;3;D;H;L;P;T;X;\;`;d;h;h<z<
;3;H;];r;
;3<i<
;4;`;
;4<^<i<
;4<p<
;5;i;
;5<<<
;5<m<
;5<T<Z<v<
;6;{;
;6<H<
;7;[;q;5<P<
;7;<;D;R;
;7;e;
;7;E;
;7;S;p;
;7<><Q<t<
;7>F>
;8;q;
;8;S;
;8;T;p;
;8<g<
;9;>;E;J;Q;
;9;Q;_;e;q;
;9;U;d;h;l;p;t;x;t<x<|<
;9;z;L<`=
;9<]<I=
;9<w<~<
;9<Y<
;A w_
;A$u\
;A(uT
;A,uL9s
;A;P;v;
;A@u"
;A<^<
;A<y=
;AhuK
;APu#
;C$s\
;C,r+
;C,v4;
;C;N;
;C;W;m;
;C@v[
;C<w<
;C0rU
;Clu.j
;D$ r
;D$$s6
;D$@u
;D$@v8
;D$8v
;D$Dr
;D$Ds
;D$du
;D$hr
;D$hu
;D$lu
;D$ts
;D;t;
;D<c<'>t>
;E r>w33
;E$rRwG
;E,r%w
;E;m;
;E;m;z;
;E<e<f=
;E4rswh
;F u>
;F@wP
;F<ruw
;F8rh
;FDw]r
;G$v,+O$
;G@_^
;GPrs
;GPuk
;H sA
;H(v'
;H;a;
;H;e;
;H;L;P;T;w;
;h<u<|<
;H8wv
;Hds 
;J;[=
;J<j<
;j<t<
;J=Q=
;K;R;[;
;L$ s
;L$,s
;L$,sH
;L$@s
;L$@sY
;L$Lr
;l;p;t;x;
;L;P;T;X;\;`;d;h;l;p;t;x;|;
;L<i<
;l<Q>
;M s5
;m<r<
;m<z=
;N$s@
;N(sj
;N;8<c<
;O,s=
;O=j=
;OPsB
;OTs5
;P$t"
;P;p;
;p@s<
;P<5=
;q s<
;Q t[
;Q,vA
;Q;`;
;Q;n;
;q|sq
;Q<7=R=
;QLwy
;qPs$;qp
;R<m<
;S s*
;s$v,
;S;p;
;S<b<
;t$ r
;t$(s;B;T$
;T$,r
;t$0r
;T$lr
;T$Lt
;T<k<
;U,r!w
;U;c;q;
;U;l;~;
;V<j<
;w uw
;W;#=
;W<V=
;X r/
;X4rH
;Z;j;
;z8uG;r<uB
? ?$?(?
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
? ?$?(?,?0?4?8?<?@?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
? ?$?<?
? ?$?0?4?8?D?H?L?X?\?`?l?p?t?
? ?%?0?9?A?K?O?V?o?t?
? ?(?0?@?H?P?X?`?h?p?x?
? ?(?L?X?`?x?
? ?,?0?4?@?H?T?X?\?h?l?p?|?
? ?'?@?E?P?Y?a?k?o?v?
? ?'?G?l?p?t?x?|?
? ?@?\?`?|?
? ?@?`?
? ?5?J?_?t?
? ?8?P?h?
? ?H?
? ?T?\?d?p?
?!?'?-?:?@?F?L?R?X?^?d?j?p?v?|?
?!?6?K?`?u?
?!?Z?h?
?"?)?
?"?)?5?=?B?I?V?\?b?h?o?y?
?"?,?i?
?"???^?o?v?
?"?+?2?>?F?O?V?b?j?s?z?
?"?7?L?a?v?
?"?N?
?#?+?C?K?c?k?
?#?5?@?\?`?d?t?x?|?
?#?8?M?b?w?
?$?(?,?@?D?H?
?$?,?=?B?J?W?^?f?m?u?}?
?$?,?4?D?L?T?d?p?t?
?$?[?j?u?
?$?0?8?D?L?X?`?l?t?
?$?e?
?$supu:f
?%?8?`?
?&?*?0?I?N?Y?h?q?x?|?
?&?0?4?;?T?Y?d?m?u?
?&?J?X?a?h?~?
?&?L?Z?x?
?(?.?
?(?/?>?E?W?l?p?t?x?
?(?-?W?^?i?
?(?@?X?p?
?(?[?
?(?^?
?(?>?X?o?
?(?0?<?D?P?X?d?l?x?
?(?1?8?h?o?y?
?(?1?D?L?\?
?(?4?@?L?X?d?p?|?
?(?D?`?t?x?|?
?(?F?d?
?(?T?
?)?;?^?r?
?)?4?
?)?F?j?
?)?H?
?*?4?>?I?c?
?*?5?H?b?
?*?8?A?H?]?c?h?o?
?,?@?T?h?|?
?,?<?L?\?|?
?,?1?8???F?M?T?[?b?i?p?v?
?,?G?b?}?
?,?X?
?.???P?a?l?y?
?.u&G;
?/?a?w?
?/?E?[?q?
?:?h?
???F?
?-?2?=?F?N?X?\?c?|?
?'?e?u?
?-?T?u?
?@?\?}?
?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
?@?n?
?@s-f
?+?G?e?
?<?V?p?
?<?Z?x?
?=?\?
?>?r?
?0?8?\?h?p?
?0?E?
?0?H?
?0?H?`?x?
?0?K?f?
?0P0o0
?0Z0h0n0u0
?1?F?[?p?
?1?g?
?1?H?
?1?N?g?~?
?2?G?\?q?
?2?G?Z?m?
?3?H?]?r?
?3?O?n?
?3?R?e?r?
?4?`?
?4?8?<?@?H?`?p?t?x?
?4?d?
?4?I?^?s?
?4?O?j?
?5?<?
?5?I?
?7?f?
?7?U?^?l?
?8?<?@?D?H?L?P?T?X?
?8?F?
?8?H?b?
?8?J?
?8?M?X?
?8?o?|?
?8?Q?~?
?9?_?
?9?w?
?A?G?K?q?w?{?
?A?Z?{?
?B?~?
?C?[?
?C?]?
?D?m?
?D?p?
?E?[?q?
?E?M?
?E?V?z?
?I?P?
?I?P?X?b?l?v?
?L?p?
?l?p?
?L?S?
?N?n?
?N?t?
?O?V?
?p?|?
?R?~?
?R?i?{?
?t?x?|?
?w;WV
@ !C 
@ )C 
@ ;A 
@ ;A s2
@ ;B }D
@ ;B vj
@ ;C 
@ ;C s A;
@ ;G 
@ ;G v
@ @&@%@
@ 1C 
@ 9A 
@"@"@
@#@$@%@
@$;ADs
@$+A$]
@$SVW
@%s<E&C%03.3d>
@(Ph`q
@)@8@
@,;ATs
@,;F,u
@,@&@+@
@.reloc
@.rsrc
@:@9@/@
@;D$,v
@;D$`v
@;D$<v
@;D$Dv
@;D$dv
@;D$Lv
@;G,r
@'@.@
@___ImageBase
@<;B<t
@<;F<
@<;H,
@<;x4
@0D0H0L0P0l0
@2T2h2|2
@9C v'
@9G s
@D;0u
@D_^[
@f;CX
@ILT+%d(
@ILT+%d(%s)EnC
@Module %d
@Ph0|
@potentially uninitialized data accessed at this location <| I%u (B%u)
[%8I64u] 
[%llu]
[%s%d.%c]
[%s%d[%s].%c]
[%s.%c]
[%s[%s].%c]
[%s[%u + %s].%c]
[%s[%u].%c]
[-&LMb#{'
[2|8/>g?v?
[internal error]
[RootSignature(%s)]void ___DummyMainForRS(){}
\$ u3
\$$;]
\$$@PWVQhp
\$$9S 
\$$t]j
\$$WV
\$(9<
\$(9T$$s
\$(9T$<
\$(G;|$4r
\$(WVPh
\$(WVPh8
\$`SW
\$|Pj
\$<;_
\$<F;s
\$09X
\$0WQSRh8=
\$4;\$
\$49]
\$4VS
\$d;\$4
\$d;ZPs
\$d9\$4
\$du,
\$H;\$
\$L9G
\%9~-
\;0t'A
\]^_\
\1)383C3
\3y3"414<4v4
],;]4wTr
^0(2@2
^8;^<
^oEZ_
_%d_%d.
_(_^[
_^;H8
_^[Y]
__%s_n%u_%u
___DummyMainForRS
__current_exception
__current_exception_context
__CxxFrameHandler3
__doserrno
__EH_prolog
__EH_prolog2
__EH_prolog3
__EH_prolog3_align
__EH_prolog3_catch
__EH_prolog3_catch_align
__EH_prolog3_catch_GS
__EH_prolog3_catch_GS_align
__EH_prolog3_GS
__EH_prolog3_GS_align
__enc$textbss$begin
__enc$textbss$end
__FILE__
__fx_2_0__
__imp_
__int128
__int16
__int32
__int64
__int8
__isascii
__LINE__
__SEH_prolog
__SEH_prolog4
__SEH_prolog4_GS
__test_intrin1
__test_intrin2
__test_intrin3
__test_intrin4
__unaligned 
__unDName
__unDNameEx
_0f0u1|1P2T2X2\2`2d2h2l2p2t2x2|2
_8_^[
_aoffimmi
_bias
_binormal
_blendindices
_blendweight
_bx2 cannot be used on src register for texbem or texbeml instructions.
_bx2 cannot be used on src register for texreg2ar or texreg2gb instructions.
_bx2 is a valid src mod for texM* instructions only (%s source param).
_centroid
_centroid flag only permitted on dcl v# statements.
_clearfp
_color
_controlfp
_cube
_CxxThrowException
_depth
_dw(=_da) modifier on source param for texld only allowed if source is a texture coordinate register (t#).
_dw(=_da) modifier on source param must be paired with source selector .xyw(=.rga).
_dynamicindexed
_dz(=_db) modifier cannot be used on source parameter for texcrd. It is only available to texld instruction, when source parameter is temp register (r#).
_dz(=_db) modifier may only be used at most 2 times in a shader.
_dz(=_db) modifier on source param for texld must be paired with source selector .xyz(=.rgb). Note: Using no selector is treated same as .xyz here.
_dz(=_db) modifier on source param for texld only allowed if source is a temp register (r#).
_EH_prolog
_EH_prolog2
_EH_prolog3
_EH_prolog3_align
_EH_prolog3_catch
_EH_prolog3_catch_align
_EH_prolog3_catch_GS
_EH_prolog3_catch_GS_align
_EH_prolog3_GS
_EH_prolog3_GS_align
_except_handler4_common
_finite
_HVh4h
_indexable
_initterm
_initterm_e
_isnan
_KiUserCallbackDispatcher@12
_KiUserExceptionDispatcher@8
_l9_tsJ
_normal
_NT_ALT_SYMBOL_PATH
_NT_SYMBOL_PATH
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o___stdio_common_vsnprintf_s
_o___stdio_common_vsnwprintf_s
_o___stdio_common_vsprintf
_o___stdio_common_vsprintf_s
_o___stdio_common_vsscanf
_o___stdio_common_vswprintf
_o___stdio_common_vswprintf_s
_o__aligned_free
_o__aligned_malloc
_o__atoi64
_o__callnewh
_o__cexit
_o__CIacos
_o__CIasin
_o__CIatan
_o__CIatan2
_o__CIcos
_o__CIcosh
_o__CIexp
_o__CIfmod
_o__CIlog
_o__CIpow
_o__CIsin
_o__CIsinh
_o__CIsqrt
_o__CItan
_o__CItanh
_o__close
_o__configure_narrow_argv
_o__crt_atexit
_o__errno
_o__execute_onexit_table
_o__filelengthi64
_o__fpclass
_o__fullpath
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__lseeki64
_o__mbscmp
_o__mbstrlen
_o__memicmp
_o__open_osfhandle
_o__purecall
_o__read
_o__register_onexit_function
_o__seh_filter_dll
_o__strdup
_o__stricmp
_o__strnicmp
_o__strtoui64
_o__wcsdup
_o__wcsicmp
_o__wcsnicmp
_o__wdupenv_s
_o__wfsopen
_o__wfullpath
_o__wgetenv
_o__wmakepath_s
_o__wsplitpath_s
_o__wtoi
_o_abort
_o_atof
_o_atoi
_o_bsearch
_o_calloc
_o_ceil
_o_fclose
_o_floor
_o_fread
_o_free
_o_fseek
_o_ftell
_o_getenv
_o_isalnum
_o_isalpha
_o_isdigit
_o_isspace
_o_isxdigit
_o_malloc
_o_modf
_o_qsort
_o_setlocale
_o_strcat_s
_o_strcpy_s
_o_strncpy_s
_o_strtod
_o_strtoul
_o_terminate
_o_tolower
_o_toupper
_o_towlower
_o_wcscat_s
_o_wcscpy_s
_o_wcsncat_s
_o_wcsncpy_s
_o_wcstoul
_position
_positiont
_psize
_rcpfloat 
_sample
_sat not permitted on tex* instructions.
_sat not permitted with frc instruction.
_sat not permitted with setp instruction.
_sat not permitted with SINCOS instruction.
_SEH_prolog
_SEH_prolog4
_SEH_prolog4_GS
_tangent
_tessfactor
_texcoord
_time64
_uglobal
_ugroup
_uint 
_unknown
_volume
`.data
`=CRPT
`0d0h0l042q6 7\7p778
`abc`
`OTHER
`PACKED
`Rs%a
`TEMP
`UUe?
{    
{ %d, %d, %d, %d }
{ %g, %g, %g, %g }
{ j;W
{8u(;U
|$ 9L$
|$$;|$(s
|$$S;
|$(9G
|$`;T$D
|$`tEj
|$<9|$8
|$<9|$8s
|$<9|$8v
|$<uS
|$09\$l
|$4WV
|$DPW
|$h;}
|$hF;s
|$Ttr
|$X;}
|$x9|$p|
||||}}}}~~~~
||}}~~
|QPRQ
|xy{wzvuyu
}yXZ,
~ /uK
~ <tu
~(_^[
~0$r5
~0;~(u
~l@;B
~LC;_
~t9N|tU3
+#INF
+*++++056++
+,,,,,,,,,,,,,,,,-----....///000111112223344556677889:;<
+,,-A../012.3/145&5216127689277/010/21:8/22.3/3/.11;0.10//:
+,-./
++++++
+++++++++
++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++
+++de
+0E0t0
+0J0g0
+A$+A
+B`VW
+C$QP
+D$ +S8h
+L$ j
+L$(3
+L$D@
< <$<
< <$<(<,<0<4<8<<<
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
< <$<(<,<0<4<8=H=
< <$<(<,<4<8<<<D<\<t<
< <$<(<,<t<x<|<
< <$<(<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
< <$<,<0<4<8<@<D<L<P<T<
< <(<0<8<H<P<X<`<h<p<x<
< <(<4<<<H<P<\<`<d<p<x<
< <@<`<|<
< <1<6<><K<R<Z<a<t<y<
< <4<H<\<p<
< <8<P<h<
< <e<
< <M<x<
< <N<u<
< =$=(=
< =)=C=
< =1=
< =o=v=
< =S=
< =x=
< sQ$
< t?</t;
<!-- id=%d -->
<!<*<a<h<q<
<!<,<;<D<L<P<V<o<t<
<!<:<?<J<S<[<e<i<p<
<!<+<5<?<I<O<Y<c<m<w<
<!<'<-<3<9<?<E<K<Q<W<]<c<i<|<
<!<<<W<r<
<"<?<j<x<
<"<Q<
<"<v<
<"=$?-?6?
<"=)=
<"=C=
<"=r=
<#<*<
<#<+<C<K<c<k<
<#<2<;<C<G<M<f<k<v<
<#<6<T<d<{<
<#<8<=<Y<t<
<$<(<
<$<,<4<<<D<L<T<\<d<l<t<|<
<$<,<4<D<T<d<l<t<
<$<,<8<@<L<T<`<h<t<|<
<$<-<4<;<X<n<
<$<-<I<Y<
<$<0<<<H<T<`<l<x<
<$<0<8<D<L<X<`<l<t<
<$<1<8<
<$<E<}<
<$=(=,=0=4=
<$=P=|=
<$=T=
<$>S>w>
<%<:<w<
<%=|=
<%=+=9=[=a=p=v=
<%>y>g?
<%s return value>
<&<,<H<N<j<
<&<@<g<
<&<+<6<?<G<Q<U<\<u<z<
<&<3<8<><[<z<
<&=@=D=H=L=P=T=X=\=`=d=h=l=p=
<&=-=W=
<&=8=
<&=B=P=V=b=
<&=V=0?
<(</<4<=<D<I<W<b<g<m<}<
<(<@<X<p<
<(<=<R<g<|<
<(<9<H<
<(<E<
<(<K<a<
<(=,=0=4=q=x=
<(=W=`=g=
<)<\<
<)<><S<h<}<
<)<5=
<)<9<P<
<*<?<T<i<~<
<*<5<H<b<
<*<8<
<*<A<
<*<S<
<*=B>I>c>j>
<*=e=
<*=h=
<*=P=
<*=v=
<*=Y=g=
<,<|<
<,<<<L<\<l<|<
<,<0<P<l<p<
<,<1<<<G<R<^<b<i<
<,<A<V<k<
<,=\=
<,>H>
<.<C<X<m<
<.<K<R<'?
<.<Y<`<
<.=h=
<.=y=
<.>5>
</<D<Y<n<
</<I<N<k<
</<L<
</=?=L=W=
</===I=P=^=u=
</=6=I=e=u=
</font>
</pre>
<:<S<k<
<:<X<v<
<:=P=]=h=~=
<;=h=
<;=J=U=
<;=O=h=
<;=X=
<??z?
<?<U<u<{<
<?=]=_>|>b?
<?=I=Y=i=y=
<?u!h
<@<l<
<[=*>7>z>
<[>}?
<\=,>v>
<\=`=d=X>\>`>
<^>e>
<`<z<
<`>d>h>l>p>
<| dependent on I%u (B%u), A%u (B%u)
<+<@<U<j<
<+<0<;<D<L<V<Z<a<z<
<+<2<7<><
<+<3<Q<o<
<+<7<S<i<
<+<L<p<t<x<|<
<+<r<
<+<T<
<+=,>J>O>]>~>
<'<,<3<?<G<L<S<]<e<j<q<{<
<<?@?
<<<h<
<<<q<
<<=a=
<<>5?
<<>C>M>Q>
<'<A<
<-<B<W<l<
<-<g<
<-<H<W<
<=<<<
<=<C<[<a<
<=<U<
<==>>??@ABCDEFFFGFFFFFHHIIIIIJIIIIhKKKKLLLLMNOPQRS
<-=v=
<'=Z=
<><b<
<><M<m<
<><W<
<><Y<}<
<>=`=
<'>W>
<0$1o1
<0@0H0P0h0
<0|7<9~;
<0<8<\<h<p<
<0<H<`<x<
<0<N<l<
<0=7=l=s=
<0CRPTt
<0SDTLt
<0Y0y0
<1<Q<q<
<1<X<
<1=\=r=
<1=z?
<2<V<i<
<2=7=
<2=9=
<2=p=
<3=;=W=\=j=
<3=h=
<3=L=Z=
<4<@<H<`<h<
<4<8<<<@<d<h<l<p<t<x<|<
<4<d<
<4<D<
<4<J<`<v<
<4<P<l<
<4=C=P=
<4=d=
<5<]<
<5<R<n<
<5=]=
<5=c=
<6?=?
<6<[<z<
<6<P<l<
<6<Q<^<
<7<M<
<7<O<g<
<7=_=
<7=<=C=J=Q=X=_=f=m=t={=
<7=a=
<8<`<x<
<8<S<n<
<8=l=
<9<G<P<W<t<}<
<9<U<c=
<9=H=
<9=j=
<A?Y?}?
<A<_<j<
<A<>={=I>
<A<G<K<q<w<{<
<A<S<s<x<
<A=g=
<anonymous>
<b<i<p<~<
<B<t<
<B=)>
<B=Q=^=
<b>t>
<basic>
<BCD>
<bit>
<body bgcolor="#000000">
<c<>?
<c=q=
<C=X=f=l=s=z=
<complex>
<compound>
<container>
<continued>
<count>
<currency>
<d<j<p<v<|<
<d>k>p>
<date>
<E<b<
<E<g<
<error - out of memory>
<error>*
<F<9=
<F<P<Z<
<F=2>
<F=U=c=
<float16>
<font color = "#
<font color = "#%s">
<G<t<
<G<u<
<g=n=
<H<L<P<A=H=x=|=
<H<O<Y<{<
<H<R<Y<`<
<H<t<
<I<P<
<internal error>
<internal error> unable to get variable name from PDB
<internal error> unable to get variable subfield offset from PDB
<internal error> unable to get variable type from PDB
<invalid constant table>
<invalid default value offset>
<invalid member offset>
<invalid type offset>
<J<}<
<K=\=
<k=Y?
<l=c?v?
<l=p=t=x=|=
<L=s=S>
<l=s=x=
<M<^<
<M<W<
<M=q=
<m=t=y=
<memory>
<method>
<nocast>
<none>
<NoType>
<O=c?
<O=x=7>L>
<O=Z=[>
<out of memory>
<P<T<X<\<
<p<t<x<|<
<P=z=
<parse error>
<pointer>
<pre>
<R<`<
<R=v=
<S<a<
<S>y>
<s>z>
<SVW3
<symobj>
<T<[<
<U<]<
<U<l<~<
<unknown buffer type>
<unknown class>
<unknown dimension>
<unknown HLSL built-in %u offset %u>
<unknown interpolation> 
<unknown qual> 
<unknown register type %u>
<unknown register type>
<unknown resource return type>
<unknown shader model>
<unknown type>
<unknown>
<unknown> 
<unnamed>
<unused>
<V<m<
<V=h=
<W<\<m<
<x=W>,?
<Y=`=m=t=
<Z<u<
= =$=(=,=0=`=d=h=l=p=t=
= =$=(=,=0=4=8=<=@=
= =$=(=,=0=4=8=<=@=D=H=L=P=
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
= =$=(=P=
= =%=0=?=H=P=T=Z=s=x=
= =&=E=K=g=m=
= =(=\=d=l=x=
= =(=4=<=H=P=\=d=p=x=
= =,=8=D=P=\=h=t=
= =<=@=`=
= =>=\=z=
= =0=<=H=T=`=l=x=
= =0=8=@=H=P=X=`=h=p=x=
= =1=Y=s=
= =7=
= =7=N=
= =8=@=d=p=x=
= =8=P=h=
= >$>(>,>0>
= >,>L>h>
= >d>
= >P>
=!=(=D=K=Z=a=v=}=
=!=.=\={=
=!>'>+>Q>W>[>
=!>N>
="=;=I=P=c=
="=3=C=
="=F=M=Y=]=u>|>
="=m=
=">@>q>
=">1>
=">I>Q>`>h>n>
=">I>S>
=">X>u>
=#?g?
=#=)=0=H=T=[=h=x=
=#=,=3=@=K=R=Y=c=k=t={=
=#=,=4=>=B=I=b=g=r={=
=#=F=i=
=#=Q=\=
=#=x=
=#>?>
=$=(=,=0=4=8=<=@=D=\=2?G?
=$=,=3=s=}=
=$=,=4=<=D=L=T=\=d=l=t=|=
=$=,=4=D=P=d=t=
=$=,=8=@=L=T=`=h=t=|=
=$=0=<=H=T=`=l=x=
=$=8=L=`=t=
=$=9=N=c=x=
=$=G=k=
=$>(>
=$>,>3>E>Q>X>d>k>
=$>f>x>
=$>o>
=$>O>
=$>P>|>
=$>T>
=%=/=3=:=S=X=c=l=t=~=
=%=:=O=d=y=
=%=8=\=a={=
=%=N=q=
=%=O=d=#>
=%>,>3>8>B>
=%>,>M>X>\>`>
=%><>S>j>
=%>4>?>B?Q?\?
=%>B>U>
=&=.=R=m=u=
=&=;=P=e=z=
=&=5=E=
=&=A=W=m=
=&>Q>m>
=(=,=0=4=8=<=@=*?
=(=@=P=h=x=
=(=@=X=p=
=(=<=t=
=(===R=g=|=
=(=0=<=D=P=X=d=l=x=
=(=1=9=C=G=N=g=l=w=
=(=F=M=
=(>,>0>|>
=(>,>0>4>8>
=(>/>9>[>q>
=(>h>
=(>p>
=)=>=S=h=}=
=)=2=N=[=h=~=
=)=3===G=Q=W=a=k=u=
=)>L>y>
=)>U>
=)>y>
=*=?=T=i=~=
=*=1=M=W=`=i=z=
=*=H=f=
=,?3?
=,=<=L=\=l=|=
=,=0=P=p=
=,>;>B>
=,>`>
=,>0>H>L>`>d>
=,>D>{>
=.={=
=.=A=S=[={=
=.=n=
=.>5>
=.>A>
=/= >
=/=J=e=
=/>D>R>Y>
=:=@=y=
=:=e=
=:>O>
=;>a>
=?=k=
=?>F>Y>u>
=@=_=
=@=g=}=
=@>M>j>
=@>u>
=[=b=
=\=s=
=\>z>
=]=b=
=`=|=
=`=k=
=+=@=U=j=
=+=F=a=|=
=<='>m>,?
=<=f=
=<=H=P=h=p=
='=,=7=F=O=W=[=a=z=
='=/=7=?=G=\=a=i=v=}=
='=?=W=o=
='=]=
='=<=Q=f={=
='=-=E=L=k=
==>A?
==>D>
='=0=7=T=]=f=
=-=F=_=~=
=-=n=
=->;>g>t>
=>?@=ABCDABCDAEFGHEIJKLIJKLIMNOP
=>?@A
=>?@ABC
=>?@ABCD
=>?@ABCDEFGHIJK
=>?f?
=>=[=~=
=>>x>
='>5>
=->m>
=0=:=o>
=0=H=`=x=
=0=L=h=
=0>k>
=1=7=;=a=g=k=
=1=C=f=
=1=H=Q=X=
=1=I=m=
=1=N=
=2=s=
=2>9>
=3=;=S=[=s={=
=3===V=\=a=
=3=q=
=3>x>
=4=[=j='>
=4=`=
=4=8=<=@=D=
=4=L=d=
=5=X=j=
=5>m>
=6=H=
=6=J=x=
=6>R>m>
=7=O=o=
=7=Z=l=
=7>-?
=7>@>n>
=7>>>p>
=7>d>
=8><>@>D>H>L>P>T>
=8>G>R>
=8>x>
=9=P=q=
=9>@>
=9>G>
=B=}=
=B=a=t=
=B=g=t=|=
=B=i=
=B>I>
=C=q=
=CRPTt3=SHEXu
=D=K=P=}=
=D>]>|>f?
=d>h>t>
=D>K>
=FALSE
=h=l=p=t=x=
=H=t=
=H>L>P>T>X>\>`>
=h>l>p>t>x>|>
=I=j==>
=J=c=
=j=v=
=J>~>
=K>a>
=k>p>v>|>
=k>r>
=L>P>
=m?|?
=MINIu
=N=m=
=n>u>
=NB10t
=NB10u4
=NOTMu
=O>o>
=OSGN
=P=i=
=P=T=
=P>]>
=P>W>n>
=PCSG
=PERFtn
=PRIVt
=Q00000000_dopqrefmn>
=R=i={=
=RD11t
=RDEFt"=PERFt0
=RDEFtJ
=RPLYu
=RSDSu&
=S?Z?
=s=C?
=SDBG
=SDTLt
=SMID
=STAT
=STATuG
=T>X>l>p>
=u>e?
=V=o=
=V>~>
=X>\>
=X>\>`>d>h>D?H?L?P?T?
> ?'?
> ?=?g?
> ?>?E?J?Q?X?_?f?m?t?{?
> ?7?Z?
> >#?2?
> >$>
> >$>(>
> >$>(>,>0>4>
> >$>(>,>0>4>8>
> >$>(>,>0>4>8><>@>
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>y>
> >(>0>8>@>H>P>`>h>p>
> >,>0>4>@>D>H>T>X>\>h>l>p>|>
> >,>8>D>P>\>h>t>
> >@>`>|>
> ><>@>\>`>|>
> >'>@>E>P>Y>a>k>o>v>
> >5>J>_>t>
> >8>P>h>
> >D>P>X>p>x>
> >y>
>!?:?
>!?n?
>!>+>/>6>O>T>_>h>p>z>~>
>!>6>K>`>u>
>"?0?
>">*>4>8>?>X>]>h>q>y>
>">/>7><>B>H>S>[>`>f>l>w>
>">=>X>s>
>">7>L>a>v>
>">8>N>d>z>
>#?~?
>#?0?G?v?
>#?q?
>#?S?{?
>#>,>3>?>H>P>U>[>i>q>v>|>
>#>+>
>#>+>C>K>c>k>
>#>=>Y>
>#>2>T>x?
>#>8>M>b>w>
>#>E>S>b>
>#>R>m>
>$?\?
>$?O?n?
>$>,>8>@>L>T>`>h>t>|>
>$>,>D>L>T>d>l>t>
>$>/><>
>$>4>8>H>L>P>`>d>t>x>8?J?
>$>9>N>c>x>
>%?;?m?
>%?k?
>%>,>H>O>k>r>
>%>/>3>:>S>X>c>l>t>~>
>%>:>O>d>y>
>&?-?B?X?`?l?t?
>&?+?2?9?@?G?N?U?
>&?A?
>&>;>P>e>z>
>&>->=>Q>]>e>}>(?L?
>&>A>\>w>
>&>e>
>&>F>K>]>
>(?5?N?
>(?9?_?f?
>(>@>X>p>
>(>_>
>(><>P>d>x>
>(>0><>D>P>X>d>l>x>
>(>0>T>`>h>
>(>1>9>C>G>N>g>l>w>
>(>2>
>(>4>W>^>j>
>(>C>
>(>G>T>v>W?}?
>(>H>P>\>|>
>)?7?T?
>)?r?
>)?U?
>*?0?
>*?4?;?B?I?
>*>0><>
>,?6?H?`?
>,?P?
>,><>L>\>l>|>
>,>H>d>
>,>S>j>
>,>X>
>.?R?q?
>.>3>x>
>.>d>
>.>L>j>
>/?m?
>/>\?
>/>8>?>{>
>/>Q>X>m>z>
>:>_>
>:>~>
>:>L>c>
>;?t?
>;>b>
>;>e>
>??Z?h?n?u?
>?@ABC
>?@ABCD
>?@ABCDEF
>-?V?
>@>a>
>@s5f
>\?`?d?h?
>_^[]
>_>{>
>`>d>h>l>
>+>0>:>D>N>d>~>
>+>B>Y>
><?C?
><>h>
>=>[>d>r>
>=>f>
>=>R>]>m>w>
>'>.>6>>>O>T>\>i>p>x>
>'>_>{>
>'><>Q>f>{>
>->=?j?
>'>1>;>E>O>Y>_>i>s>}>
>->C>c>i>~>
>->K>y>
>'>R>
>->T>{>
>0;1e1
>0?~?
>0?>?J?i?
>0?t?
>0?t?{?
>0?Z?
>0>H>`>x>
>0>S>e>
>0M0d1h1l1p1t1P2T2X2\2`2)3/4b4
>1?M?V?h?
>1>K>
>1>M>T>
>2>?>H>R>[>e>n>x>
>2>o>
>3?L?
>3?Q?W?
>3>F>y>
>4?B?M?m?
>4?o?
>4?t?
>4?z?
>4>=>F>i>w>
>4>D>T>X>p>t>x>
>4>N>W>
>4>R>k>
>5?<?P?X?w?
>6?[?
>6?}?
>7?o?
>7>|>
>7><>G>P>X>b>f>m>
>7>f>
>7>G>N>U>\>c>q>}>
>8>]>s>
>8>V>t>
>9>^>
>9><?
>9>h>q>
>9>T>o>
>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA?????????@@@@@@@@@@++=
>B?]?
>B?I?U?
>B?L?
>b?n?
>d?h?l?
>D?W?s?
>D>K>
>D>S>^>
>D>t>
>DXBC
>E?t?
>E>x>
>E>Y>m>
>F?i?
>F?z?
>G>o>
>G>V>a>
>H?\?g?
>h?l?
>H?L?P?T?l?
>H?O?
>h?z?
>I?[?k?
>I?e?
>I?i?
>J?Q?
>K>a>
>K>Z>e>\?`?p?t?
>L?P?
>L>j>}>
>l>p>t>x>|>
>L>V>h>
>n>l?
>O?~?
>O?o?
>O>s>z>
>Q?t?x?|?
>r>??
>R>i>{>
>S>]>d>n>u>~>
>S>m>
>T?X?
>t>:?c?
>T>4?
>TEXTue
>U?t?
>U>^>
>W?o?
>X?_?l?p?
>x?|?
>X>_>
0 0$0(0,000
0 0$0(0,0004080
0 0$0(0,0004080<0@0D0H0L0P0
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0 0$0(0,000D0H0L0P0
0 0$0(040<0H0P0\0`0d0p0t0x0
0 0$0(04080<0H0L0P0\0`0d0p0t0x0
0 0$00080D0H0L0X0\0`0l0t0
0 0,040@0H0T0\0h0p0|0
0 0;0w001Z1
0 0@0`0
0 0<0@0\0`0
0 04080<0@0D0
0 080@0d0p0x0
0 080P0h0
0 1=1d1q1
0 1I1l1
0!0(0A0F0Q0Z0b0l0p0w0
0!0*0:0G0P0`0m0v0
0!0F0^0
0!1'1+1Q1W1[1
0!1D1t1
0"0)0<0_0p0w0
0"0>0[0w0
0"0'0.0:0B0G0N0Z0b0g0n0z0
0"1X1
0#0?0O0h0x0
0#0>0Y0t0
0#121=1[1j1u1
0#3T3m3
0$0(0,0004080<0@0q0x0]1
0$0,040D0L0T0d0l0t0
0$0,060:0A0Z0_0j0v0
0$0+02090@0G0]0y0
0$000<0H0T0`0l0x0
0$04080H0X0\0`0t0x0|0
0$0G0^0
0$1(1,10141
0$171S1u1
0$1F1{1
0$1k1
0$1T1
0%03090B0]0w0
0%040h0l0p0t0x0|0
0%0Y0
0%0Y0q0
0%1*1
0%1H1L1P1
0&0.080<0C0\0a0l0u0}0
0&0-0@0K0R0
0&050@0|0
0&0A1
0&1=1
0&1-1\1
0&1-1\1`1d1h1l1g4m4
0&1Q1
0&1U1
0(0,0004080<0@0D0H0L0P0T0
0(0@0|0
0(0@0X0p0
0(000T0`0h0
0(020
0(060E0
0(080
0(0B0b0k0v0
0(0M0
0(0N0^0{0
0(1,10141
0(1'2
0(171P1^1i1|1
0(1N1
0(1u1
0(1x1
0(1y1
0)0>0
0)00070O0u0z0
0*030;0E0I0P0i0n0y0
0*050H0b0
0*080
0*0N0Y0k0
0*0Y0f0r0
0,080G0
0,080X0x0
0,0g0n0u0|0
0,0H1
0,0J0h0
0,0X0l0
0,1j1
0.0:0A0G0N0}0
0.0]0
0.0=0
0.0C0X0m0
0.0F0
0.0F021|1
0.0Q0
0.273
0/0D0Y0n0
0/161z182[2
0/1A1
0/1L1~1
0:0f0
0:0U0p0
0:0W2j6
0;0Q0h0q0x0
0;1A1G1M1S1Y1_1e1
0;2g2
0?0`0
0?0H0
0?0U0u0{0
0?1a1
0@0]0
0@0P0g0n0
0@1G1L1[1j1y1
0@2G2
0@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
0\1i3
0_0]1
0_1f1
0+020
0+141@1l1u1
0+151X1
0<0@0D0H0L0
0<0\0|0
0<0D0\0|0
0<0h0
0<183
0<1C1x1
0<3S3
0=1B1S1j1
0=2D2c2j2J3
0>1|1
0>1m1
0'0?0W0]0d0p0
0'0@0T0o0
0'0{0
-0000t^-
0'0-030>0F0O0V0b0j0s0y0
00050=0J0Q0Y0`0h0p0
000D0X0l0
000E0Z0o0
000H0`0x0
000T0b0i0t0{0
0014181<1@1D1H1
00141p1t1
0-020=0F0N0X0\0c0|0
0-080q0
0'0B0]0x0
0-0B0W0l0
00D0X0l0
00ffff
0'0G0n0}0
0'0J0]0
00J0e0n0
0-0N0_0f0
0'0P0
01070;0a0g0k0
010F0[0p0
010G0V0
010Q0
011D1~1
0123456789ABCDEF
0123456789abcdef
0-1a1
0'1l1
0'1v1
020;0F0b0k0w0
02070?0K0Q0q0
020G0\0q0
020G0Q0
021c1
030;0S0[0s0{0
030H0]0r0
030l0
030T0j0x0
030V0
040\0
040`0
040904B0
040I0
040I0^0s0
040q0
040s0
040x0
041t1
050`0
050J0O0a0n0
050U0~0
051O1
051v1
060D0P0
060I0e0
060T0r0
060T0Y0j0
060W0z0
061g1
061z1
062F2X2c2s2
070D0i0
071`1}1
071O1x1
080`0
080h0
081<1@1
081v2
091`3
091G1[1
091J1
0A0Y1
0A1P1[1
0B1n1
0C0X0e3l3S4Z4
0c1}1
0C1J1X1a1r1
0D0\0
0D1K1G2V2a2
0D1p1
0F0M0p0
0F0q0{0
0F0w0
0f1x1
0F2u31405
0G0R0
0H0\2^3N4
0H1]1
0H1L1P1
0J0b0
0J1c1|1
0K1W1
0l0p0P3
0L0V0
0L2<3
0o0#1m1
0O0|0
0P0W0
0P1}1
0p2t2x2|2
0q3o4
0Q7g7
0R0i0{0
0R1n1
0Rh m
0RQPV
0S0]0d0n0u0~0
0T0X0\0`0d0h0l0p0t0x0|0
0U0}0
0V1h1M2
0V1i1H8O8i8
0w1~1U2\2
0W1r1
0WEIGHTS
0x%016I64xUI64
0x%02x
0x%08x
0x%08x 
0x%08X: 
0X0K1`1
0X0r0
0X3c3f5
0Z1}1
1 / sqrt(x) -> rsq(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
1 / x -> rcp(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
1 1$1(1,1
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 1$1(1,1l1p1t1x1|1
1 1$1|1
1 1&121W1e1l1y1
1 1(12161=1V1[1f1o1w1
1 1(141<1H1P1\1d1p1x1
1 1(1H1l1x1
1 1,181D1P1\1h1t1
1 1;1O1p1
1 1@1`1
1 1<1@1`1
1 141H1\1p1
1 181P1h1
1 2'2h2q2x2
1 2j2u4
1 2L2x2
1!1(1.131:1L1t1
1!111<1O1Z1j1t1|3
1!121C1T1e1v1
1!2?2\2|2
1"1/1Z1
1"1-161>1H1L1S1l1q1|1
1"1M1\1
1#1(101=1D1L1S1[1c1t1y1
1#1?1[1w1
1#1@1e1p1
1#1+1C1K1c1k1
1#111>1h1
1#1l1v1
1#1m1x1
1#2>2
1$1(1,181@1L1T1`1h1t1x1|1
1$1(1x1|1
1$1,141D1T1d1l1t1
1$1,181@1L1T1`1h1t1|1
1$1/1:1^1h1o1{1
1$1/191@1G1p1w1
1$10181D1L1X1\1`1l1t1
1%1)101I1N1Y1b1j1p1t1{1
1%1*111>1F1K1R1_1g1l1s1
1%1+1@1T1h1l1p1t1x1|1
1%111^1u1
1%2]2
1%2<2{2
1%2K2
1%2K2{2
1%2U2
1&1=1a1}1
1&111
1&1D1b1
1&1g1~1
1&1V1
1&1Z1a1y1
1&2[2
1&2V2
1(1,1<1@1
1(1?1
1(1@1X1p1
1(131C1R1]1y2
1(181d1}1
1(1K1\1m1
1(1L1p1
1(1M2l2p2t2
1(2[3X4L6S6
1(232Y2
1(2m2
1)1_4
1)1>1S1h1}1
1)191o1x1
1)1d1
1)1E1^1w1
1)1J1[1o1
1*1?1T1i1~1
1*1>1E1
1*131;1E1I1P1i1n1y1
1*171=1F1L1\1s1
1*2n2
1,1<1L1\1l1|1
1,1<1L1P1T1l1t1x1|1
1,191Q2
1,1A1V1k1
1,1D1
1,1J1
1,1X1
1,2{2
1,2024282<2@2D2f2
1,2Y2x2
1.#IND
1.#INF
1.#QNAN
1.#SNAN
1.1<1S1X1o1
1.131>1G1O1Y1]1d1}1
1.191I1O1m1
1.1C1X1m1
1.1P1
1.2.11
1.252
1.2R2t2x2|2
1/1D1Y1n1
1/1E1S1Y1b1}1
1/1K1g1
1/1Q1y1
1/2;2
1:1^1
1:1X1v1
1:2n2
1;1`1
1;1n1
1;2G3
1;2T2
1;A,uS
1?2]2g2k2o2s2
1?3F3
1@1f1p1w1
1@1m1}1
1[_^]
1\2t2
1]1q1
1_^[]
1+1@1U1j1
1+121
1+13181?1K1S1X1_1k1s1x1
1+1B1j1
1+2O2q2
1<1\1|1
1<1C1V1t1
1<1h1
1<2d2x2
1<2z2
1<3U3
1=2Z2
1>1C1z1
1>2M2
1>2T2]2
10.0.25197.1000
10.0.25197.1000 (WinBuild.160101.0800)
10181\1h1p1
101E1Z1o1
101H1`1x1
10343
1'101I1W1n1
11161A1P1Y1a1e1k1
111L1g1
111v1
112@2
1-13181?1S1t1
1-1a1
1-1B1W1l1
1'1C1j1
1-1H1c1~1
1-1P1y1
1'1u1
121I1
121m1
121W1
12292P2T2
1-2A2l2
1'2P2
1'2Y2
1'2Z2
132[2
132R2
132Y2
14.30.30795.8
14181T1X1`1h1
14191@1G1N1U1\1c1
142i2
142t2
1-4C4J4|5
1'4m465R6a6r6Z8
151P1k1
152:2
152:2?2D2P2\2g2o2
16 bit code
161N1
162j2
171@1M1T1Z1
181R1}1
181s1x1
18253G3N3
191E1l1
1a1q1
1A26b
1A2H2
1a2z2
1b2n2
1C1v1
1C2J2
1D1p1
1d1w1
1darray
1E1a1
1E1c1
1E2a2j2
1E2f2
1E2l2
1f;2u
1F2Z2
1F3M3
1f8m8
1G1b1
1G2g3
1h1!2
1H1O1Y1{1
1H2o2
1H5^5
1I1P1
1i2/4
1j2J3*4
1L2V2u2
1M1Z1x1
1N1]1
1N1{1
1O1~1
1O2]2
1O2a2
1O2X2^3f3r3z3
1p1)2
1P1T1X1\1`1
1P2T2X2\2`2d2
1p3]4@5O5
1Ph$+
1Q1[1l1
1Q1W1p1
1Q2X2
1R1i1{1
1R1r1
1R3Y3k3
1U1l1~1
1U4[4
1V1[1
1W1b1i1
1W1n1,3F4X4
1WEIGHTS
1wsHp
1Y2{2
2 2$2(2,2\2x4
2 2$2(2,2024282<2
2 2$2(2,2024282<2@2
2 2$2(2,2024282<2@2D2H2
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2$2(2,24282@2D2L2P2X2\2`2d2h2p2t2
2 2$2(2,2X2\2`2d2h2
2 2$2(2`2
2 2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2(22262=2V2[2f2o2w2
2 2(242<2H2P2\2d2p2x2
2 2;2V2q2
2 2@2`2|2
2 2+242<2F2J2Q2j2o2z2
2 2<2@2\2`2|2
2 2'2=2n2
2 262=2h2
2 282@2d2p2x2
2 282P2h2
2 2D2L2
2 2F2T2[2d2k2r2}2
2 3$3(3d3h3l3p3t3x3|3
2 3H4U4u4A5Y5`5
2 3R3
2 3W3x3
2!2*2f2
2!232
2!232L2c2
2!3^3
2!3R3m3u3
2"2&2-2F2K2V2_2g2q2u2|2
2"2*272>2F2M2U2]2n2s2{2
2"2,202
2"2.2:2F2R2^2
2"232a2
2"242<2I2`2g2v2
2"383\3x3
2"3b3i3|3
2"3d3s3
2"3E3
2#2(2<2F2L2c2
2#2*22292@2
2#2?2[2w2
2#2+25292@2Y2^2i2r2z2
2#2+2C2K2c2k2
2#2f2x2
2#303j3
2#333K4x4
2#3n3
2$2(2,282<2@2L2T2`2h2t2|2
2$2*20262<2B2H2
2$2,242D2L2T2d2l2t2
2$2+2
2$202}2
2$282L2`2t2
2$2B2j2t2
2$2U2i2
2$3+3A3"5\6
2$3f3
2$3P3
2$3T3w3
2%2,232P2p2
2%2,2Y2`2u2
2%2:2O2d2y2x4o8
2%202S2i2
2%282R2W2h2
2%2F2c2
2%3:3z3
2%344[4
2&2.232:2F2N2S2Z2f2n2s2z2
2&2;2P2e2z2
2&3{3/6F6u:
2&313W3
2&383
2&3Y3
2(2:2
2(2?2[2`2q2
2(2@2X2p2
2(2=2R2g2|2
2(202<2D2P2X2d2l2x2
2(202H2P2t2
2(21282M2S2X2_2s2
2(232
2(242@2L2X2d2p2|2
2(262Q2d2
2(2C2^2y2
2(2h2m2u2
2(2t3
2(3T3
2)2?2Q2}2
2)2@2W2i2|2
2)2]2
2)2>2S2h2}2
2)272@2d2l2
2)3e3
2)8m<
2*<P<
2*2/2h2p2w2~2
2*2/2o2
2*2?2T2i2~2
2*2H2f2
2*333L3V3g3z3
2*3l3
2*8:8U889C9S:F;Q;c<
2,2:2H2V2d2r2
2,2024282<2
2,2A2V2k2
2,2C2J2i2w2}2
2,3`3
2,363H3`3
2,3p3
2,6^6
2.2=2H2h2l2p2t2x2|2
2.2l2
2.353r3
2.3b3n3u3
2.3y3
2/2K2c2
2/2K2d2
2/2M2]2
2/2p2|2
2/3`3
2:3H3R3X3_3f3
2:4A4
2;6R6a6l6
2?3[3{3
2@2n2
2@3@1@0@
2[2(3J3
2\3`3d3h3
2\3|3
2]3j3
2]5y6
2_3v3
2`3d3h3
2|275j5
2+2@2U2j2
2+2[2
2+23282?2K2S2X2_2l2u2|2
2+2N2x2
2+323
2+3b3
2+3G3U3[3g3
2+4@4
2<2\2|2
2<2A2S2
2<2H2P2h2p2
2<2L2\2l2|2
2<2V2`2z2
2<2W2`2y2
2<3@3y4
2=2T2w2
2>2_2w2
2>2T2
2>3[3b3q3
20;0O0
202=2U2
202H2`2x2
202L2o2
203a3
21262N2e2
21282G2N2U2\2|2
212a2
212u2
213Y3
2-2;2F2
2'2<2Q2f2{2
22222
2222222
2222222"!
22222222
22222222222
222222222222222222"!2222222222222222222222222222222222222222222222222222222222222222222222222
222222222222222222222
22222222222222222222222"!
22222222222222222222222222
2222222222222222222222222222222"!
22222222222222222222222222222222
22272B2K2S2]2a2h2
222u2
223y3
2-242`2
2-242>2M2Y2l2~2
2-2K2i2
2'2P2
2'2Q2g2u2~2
2'3?3\3
2'3}7
232`2
2'32393
23282C2R2[2b2f2l2
232m2t2@3G3
2-343
2-3f3
2'3l3
2'3U4
242d2
242p2
242R2p2
243$4x4
243t3
253`3
253H3
262v2
272O2l2
272X2\2`2d2h2l2p2t2x2|2
273@3Y3
273F3X3j3
273w3
282d2
282k2
283^3
283G3R3^3m3x315@5K5W5f5q5
293V3
295P5T5X5\5`5x5
2A2~2
2A2G2K2q2w2{2
2A2j2
2B2M2
2b4z7
2c3j3x3|314k4
2d/%mwe)
2D2I2N2U2Z2a2h2m2t2y2
2d2L3
2D2t2
2D2x2
2D3c3<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8;9
2D3o3
2darray
2E2R2]2h2s2
2E3k6
2F2b2{2
2F2X2
2F3e3
2F405D5X5k5
2F8$ 
2G2{3
2H2b2
2H2L2P2
2I2x2
2i3~3
2J3l3
2K2h2
2l2p2D3H3p3t3x3|3
2L2u2<3
2L2V2h2
2L3W3g3q3
2M2o2
2O2{2
2p3t3
2Q3f3|3
2q3x3
2R2i2{2
2r3)4
2R3{3
2S2q2
2U2l2~2
2u3:8
2u3|3
2V3]3
2V3o3
2V3w3
2w394
2W3z3
2WEIGHTS
2X2.3
2x2|2
2x3|3
2Y3)4
2Z4c4j4v4
3 3$3
3 3$3(3
3 3$3(3,3
3 3$3(3,30343`3d3h3l3p3
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3$3(3,3034383<3@3V3h3
3 3$3(3,3034383q3
3 3$3(3w3
3 3&3,32383>3
3 3(3@3H3l3x3
3 3,30343@3D3H3T3\3h3p3|3
3 3,343@3H3T3\3h3p3|3
3 3\3`3
3 3]8d8
3 3<3@3\3`3
3 3<3@3\3`3|3
3 3>3E3
3 3'31383j3C4Q4W4
3 343H3\3p3
3 383P3h3
3 3D3P3X3p3x3
3 474m4
3 4h4r4
3 4L4x4
3 6^6
3!383O3f3
3!3J3X3a3h3
3!3P3p3t3
3!3U3^3
3!4?4a4
3!4'4+4Q4W4[4
3!4U4
3"3&3-3F3K3V3_3g3q3u3|3
3"3(3<3A3I3V3]3e3l3t3|3
3"373L3a3v3
3"4(4t4y4
3"4)4?4F4_4f4^5e5
3"4G4
3"4i4
3#3*3C3H3S3\3d3n3r3y3
3#3.333C3Q3\3
3#3/383O3W3b3v3
3#3+3C3K3c3k3
3#383M3b3w3
3#3V3|3
3#4n4q5
3$3(3,3034383
3$3(3,383<3@3L3P3T3`3d3h3t3x3|3
3$3)3u3
3$3,343D3L3T3d3l3t3
3$3+3
3$3+393P3g3y3
3$303<3H3T3`3l3x3
3$30383P3X3|3
3$343q3
3$393N3c3x3
3$3B3`3~3
3$4(4,4044484<4@4D4H4L4P4T4X4
3$4{4
3$4T4
3%3:3O3d3y3
3%3n=
3%434T4z4
3%4D4c4
3%4M4u4
3%4U4
3&3.333:3F3N3S3Z3f3n3s3z3
3&3;3P3e3z3
3&3}3
3&3<3R3
3&313E4T4_4
3&3J3
3&4W4
3(3@3X3p3
3(3}3
3(3<3P3d3x3
3(3=3`3u3
3(3=3R3g3|3
3(303<3D3P3X3d3l3x3
3(3-383A3I3S3W3^3w3|3
3(343F3z3
3(4,4044484<4@4
3(454h4o4
3(4X4
3(5L5
3)3?3Q3}3
3)303
3)4*5P5
3)485k5
3)4b4
3*3G3s3
3*3p3
3*3Y3
3*3Z3`3
3*4t4
3,3<3L3\3l3|3
3,313<3F3Q3]3a3h3
3,333J3X3k3|3
3,3A3V3
3,3J3
3,464
3,4i4
3.363;3B3N3V3[3b3n3v3{3
3.393>3W3d3m3v3|3
3.393d3s3~3
3.3D3
3.3E3L3g3l3
3.3I3d3
3.4b4
3.4r4
3/3\4
3/3R3a3
3/4=5
3:3\3`3d3h3l3p3t3
3:3f3
3:3L3r3
3;3a3
3;3g3
3;3K3h3
3;3Y3w3
3;4D5
3?3o3
3?3P3s3
3?4P4`4
3@365;5a5h5
3@3l3
3@3T3
3\$<#\$
3\4`4d4h4l4p4
3\4c4l4
3]6d6k6w6|6
3^4e4
3^6d6u6}6
3+404
3+4S4n4
3+4t4x4|4
3+6V677c7
3<3\3|3
3=3k3
3=4L4Y4
3=4Q4r4
3=4U4l5~5
3>3Y3
303D3X3l3
303H3`3x3
304f4
304U4
30h0(1
30Y0h0
313%4@4
313@3K3^3x3
31373;3a3g3k3
313Q3q3
313Y3
323c3
323D3v3
323k3q3
324S4z4
32-bit floating-point operations flush denorm float literals to zero, %g is losing precision (this warning will only be shown once per compile)
3'3<3Q3f3{3
3-3>3C3V3r3w3
33333
33383C3L3T3^3b3i3
333b3
333C3`3p3
3'383I3Z3k3|3
3-3l3
3-424
343?3Q3d3}3
343d3
34484<4@4
345$6(6,6064686
3456789:;
34585<5p5t5x5|5
3'464A4~4
3'4E6
3-4R4c4h4~4
3-4V4
354B4
363Q3l3
363z3
364b4
373j3
373O3g3
373Y3l3x3
374>4t4{4
374M4q4z5*7H7
383<3@3D3H3L3P3d3h3l3p3t3
383J3
383m3
383Q3
383Q3j3
383V3t3
384<4@4
384<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
386G6
393@3U3l3u3|3
394l4
395h5l5p5t5
3A3h3
3A3H3T3X3
3A3n3
3A3y3
3a495^5
3A4a4
3A4T4*5
3B3b3
3B3h3
3B4N4u4
3BTRP
3C3(4,40444
3C3W3h3y3
3C4a4
3C4b4
3D$ 3
3D$$3L$
3D$,3
3D$H3
3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3D4H4L4P4T4X4
3D4N4c4j4q4x4
3E3s3
3E4p4t4
3f3s3
3G3b3
3G4W4
3GTWP
3h4l4p4t4
3HTPQ
3I3u3
3I4O4T4Z4_4e4j4p4
3I4P486<6@6D6H6
3J3[3y3
3J3~3
3K3i3w3}3
3k4z4
3KTPSQ
3l3p3l4
3L3r3
3L4 5$5(5,5054585<5@5D5H5
3l495F5M5
3L4r4O6^6p6
3l6}6
3M3m3 4I4g4
3N4U4
3P4(6
3p4t4
3R3i3{3
3R4X4
3r5y5
3t3{3
3T3X3\3`3d3h3
3T3X3\3`3d3h3l3p3t3T4[4z5
3t4{4
3T5X5
3U3{3
3U3l3~3
3U3l3s3
3u4|4
3w/:{
3W3r3
3W4}4
3WEIGHTS
3x3}3
3x5|5
3Y3r3
3Y5s5
4 4$4(4,4044484<4/565
4 4$4(4,4044484<4@4D4H4
4 4$4(4,4044484<4@4D4H4L4J7
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4 4$4(4,4044484<4@4D4P4\4h4
4 4$4(4,4x4|4
4 4%40494A4K4O4V4o4t4
4 4(4L4X4`4x4
4 4,444@4H4T4\4h4p4|4
4 4,484D4P4\4h4t4
4 4<4@4\4`4
4 4<4@4\4`4|4
4 454J4_4t4
4 454L4U4\4
4 484P4h4
4 484P4h4l4t4
4 4C4T4w4
4 5)6a6
4 5,5
4 5:5A5H5
4 5|5
4 525j5
4 5'5h5
4 5-5J5
4 5j5
4 5n5
4 7'7
4 component with no swizzle expected for operand #%d of opcode #%d (counts are 1-based). 
4!4(4;4W4c4p4w4}4
4!4<4W4r4
4!414A4Q4a4q4
4!464K4`4u4
4!4t4x4|4
4!5P5
4!5V5
4!6J6
4"4-4J4S4_4j4
4"474L4a4v4
4"595K5S5g5s5
4"6)6
4#4+4C4K4c4k4
4#4>4
4#434M4g4
4#4-454:4A4K4S4X4_4k4s4x4
4#484M4b4w4
4#5@8D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
4#5`5
4#5D5K5{5
4#5N5
4#5y5
4$4)4.4E4Q4\4d4{4
4$4@4]4y4
4$4044484D4H4L4X4\4`4l4p4t4
4$40444D4L4T4d4l4t4
4$40484D4L4X4`4l4t4
4$434M4
4$484L4`4t4
4$494N4c4x4
4$4I4
4$4R4
4$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
4$5X5
4$6Z6
4%4*454>4F4P4T4[4t4y4
4%4.464@4D4K4d4i4t4}4
4%585A5j5
4%5k5
4%5Q5
4%5R5
4&4,4L4S4f4
4&5@5f5
4&526e7
4(4,4@4D477<8
4(4@4
4(4@4X4p4
4(4^4
4(4>4W4^4o4A5X5
4(404<4D4
4(404<4D4P4X4d4l4x4
4(404H4P4t4
4(4F4d4
4)4?4Q4}4
4)41464=4J4T4[4`4k4s4x4
4)414w4~4
4)4B4[4
4)4D4
4)4D4_4z4
4)5G5N5U5
4)5J5f5
4*434L4g4
4*4H4e4y4
4*5p5
4*5U5x5
4*5X5t5
4,4@4T4h4|4
4,4<4L4\4l4|4
4,484@4X4`4
4,4X4
4,5054585<5@5D5H5L5P5T5X5\5
4,5w5]6
4,5Y5
4.4Q4z4
4.535
4/4_4
4/444<4I4P4X4_4g4o4
4/4U4
4:4H4N4b4n4
4:5@6
4:5_5w5
4:5I5T5
4;4Q4_4e4q4
4;4S4t4x4|4
4;5@5Y5
4;5W5e5k5x5
4?4i4
4?4z4
4?5_5x5
4?5i5
4?6F6
4@4U4x4
4@5L5
4@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
4\4`4d4h4l5v5
4\4f4x4
4\4j4x4
4\5{5
4`5d5l;
4|4~5
4~5$6
4+4I4g4
4+4M4d4
4+4M4R4e4u4
4+4x4
4+595B5I5e5
4<4\4|4
4<4_4l4t4}4
4<4I4l4y4
4<5@5|5
4<5c5
4<5e5
4>4I4T4z4
4>4k4
404;4L4
40454@4I4Q4[4_4f4
40484
404H4`4x4
4080<0@0D0 1$1(1,101
414Q4q4
414Z4
415J5~5
424P4n4
434_4
43484C4L4T4^4b4i4
434G4Z4m4
434H4]4r4
434m4t4
435>5\5`5d5h5l5
437i8*9
4'4?4W4o4
4'4>4U4y4
4-434:4K4T4p4}4
44444444
4444444444
44444444444444444444 4!4"4###$#####
444b4
444I4^4s4
444U4\4a4
445}5c7
445o5
447y7
4-4O4f4
454Q4m4
455C5L5X5
455w5
4560*+;<E
456789:;
4'5e5
4-6?6
465a5x5|5
465H5
465L5
474?4M4V4^4|4
474?4Y4a4
474d4
475F5T6
485^5
485<5D5H5P5T5\5`5h5l5t5x5|5
494D4
494G4S4u4
495b5
4A4[4`4}4
4A4F4N4\4a4i4
4A5E5
4B5K5S5
4BDQRSC6
4C4N4T4_4
4c5}5
4C5J5)6
4c7r7
4D4|4
4D5f5
4D5g586
4D5H5
4D5L5
4D8/>6>
4e5h6u6
4e6-7_7q7
4F4X4
4f5~5p6w6
4FVcK
4H4p4
4h4w4
4H5l5
4H5L5y5
4I4z4
4I5)686
4j4q4
4K4Q4
4K5\5z5
4L4m4
4L4n4#5_5
4l5x569
4m4x4
4M5X5
4n4+5
4N5r5
4o5}7
4p4}4
4PRhO
4R4i4{4
4R7Y7
4S5C6e6
4s7z7$:+:@<G<
4SV_VertexID
4SVW3
4U4l4~4
4U4Z4
4U576
4V516<6
4W5~5
4W5i5
4W5p5
4X:h:
4X4~4
4X5\5`5d5h5l5V6]6h6m6
4Y5l5
4Z697
5 5$5(5,5054585
5 5$5(5,5054585<5@5D5
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5$5(5,5054585J6U6e6o6
5 5$5(54585<5H5L5P5\5`5d5p5t5x5
5 5(50585@5H5P5X5`5h5p5x5
5 5(50585@5U5]5b5m5r5
5 5(545<5H5P5\5d5p5x5
5 5,50545@5D5H5T5X5\5h5l5p5|5
5 5,585D5P5\5h5
5 5_5p5
5 5+515C5Q5_5p5
5 5<5@5\5`5
5 555J5_5t5
5 585P5h5
5 6$6(6,6064686<6
5 647i7
5 6H6`6p6
5!5*525<5@5G5`5e5p5
5!6(6O6V6
5!6H6~6
5!6I7t7
5!6J6m6x6
5!6x6
5"5&5-5F5K5V5_5g5q5u5|5
5"5(5.545:5@5F5L5R5X5^5d5l5p5t5x5|5
5"5>5Z5v5
5"5'5/5<5C5K5R5Z5b5s5x5
5"5'5>5a5~5
5"5-565>5H5L5S5l5q5|5
5"6`6
5"6O6i6
5#5,545>5B5I5c5h5s5
5#5+5C5K5c5k5
5#545X5x5
5#5L5|5
5#5V5
5#6?6F6Z6w6_8
5#6J6u6
5#6l6
5#6L6
5$5(5,5054585
5$5(5,5054585<5@5D5H5+6
5$5,5D5L5T5d5l5t5
5$5<5\5d5|5
5$50585D5L5X5`5l5t5
5$50585P5X5|5
5$54595>5D5N5V5[5b5n5v5
5$595G5M5Y5_5u5
5$5G5X5{5
5$6(6
5$6p8
5%5,5%6
5%5;5Q5g5}5
5%5@5T5
5%525
5%5K5
5%5Z5
5%6l6
5%6Y6
5&5.585<5C5\5a5l5u5}5
5&5;5_5y5
5&52565=5V5[5f5o5w5
5&565~5
5&8-8
5(5@5X5p5
5(5<5P5d5x5
5(505T5`5h5
5(545@5L5X5d5p5|5
5(6,6064686<6@6D6H6L6H7
5(6l6
5(6M6o6
5(6x6|6
5)535:5D5K5T5[5u5
5)5e7
5)646B6
5)6l6$8F8v8
5)6r6y6
5*5F5b5~5
5*5g5
5*6/6g6l6
5*6?6D6h6<7|7
5*6D6n6Y8r8
5*6Q6
5,5054585<5h5l5p5t5x5
5,555<5x5
5,5g5
5,5H5
5,5i5
5,5o5
5,6\6
5,6_6
5.565F5N5~6
5.5s5
5.6<7W7
5.6a6W7t8
5.6i6
5.6U6
5/5:5[5
5/5_5
5/5D5Y5n5
5/5G5_5w5
5/5J5e5
5/6z6
5:5G5j5
5:6E6U6_6
5;527]7G8s8
5@5a5v5
5@6d6
5`6f6
5+5[5q5
5+525m5t5
5+53585?5I5Q5V5]5g5o5t5{5
5+5a5
5+5D5R5c5t5{5
5+5F5a5|5
5+6G6U6[6h6v6
5<:K:
5<5*797D7
5<5\5l5p5|5
5<5A5L5\5b5{5
5<5F5X5p5
5<5Q5q5
5<5S5
5<5x5
5<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
5<7i<
5=5e5
5=5L5s5z5
5=6\6i6
5>5|5
5>6i6n6u6z6
505>5D5I5P5e5q5x5
505D5X5l5
505E5Z5o5
505H5`5x5
505I5b5{5
505l5v5
505X5p5
509m>
515>5
51585
515F5[5p5
515Q5q5
515x5
516`6u6z6
516Q6
525G5\5q5
525Q5p5
526g6
535H5]5r5
536d6
536X6
545@5H5`5h5
545`5
545I5^5s5
545J5Q5_5
545q5
546w6
549;9
555^5
555Y5`5
5-585a5
5-5A5
5'5Q5Z5f5
5'6]6
5'6|6
565C5I5U5w5
565Q5}5
565T5r5
566b6
56789
56789:
56789:;
56789:;<
5'686
5-686
575D5w5
575O5d5
575O5U5r5
575R5m5
576h6
576J6s6
577F7q8
5'8<8h8
585d5
585o5
585P5}5
585s5
586{6
586<6
586M6
586N6
595>5X5]5
595W5u5
595Z5e5
5A5G5K5q5w5{5
5A5j5
5a6~6K7
5a7h7t8
5a8N:
5B5^5
5B6V6j6}6
5B7\7Y9`9#=2===">1><>
5C5H5P5`5
5D5|5
5D5t5
5D5Z5
5D6K6
5D6K6p6t6
5F5`5y5
5f6)7
5G5z5)6D6N6
5g6q6
5H5~5
5h5l5p5t5
5H6]6
5H6L6P6T6X6\6`6x6|6
5H6O6]6
5I5z5
5ineI
5K5R5
5k6p6
5K6U6a6
5K6Y6b6i6
5L5s7
5L6%939H9
5L6y6
5M5W5q5
5M5z5
5ntel
5P5w6
5p6t6
5P6T6X6\6
5p6t6x6|6
5P6W6`6
5P8e8l8\9`9d9
5Q5h5
5Q6:7
5Q6y6
5S6X7~7
5T5X5\5`5d5h5l5p5
5T6[6
5U5l5~5
5V=e=p=
5W5^5|6
5w6#7
5X677y7L8
5Y5+6c6
5Y6c6
5Z6e7
5Z6p6
6 6$6
6 6$6(6,6064686<6@6D6
6 6$6(6,6064686<6@6D6H6
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6$6+6D6I6T6]6e6o6s6z6
6 6(60686@6H6P6X6`6h6p6x6
6 6(646<6H6P6\6d6p6x6
6 6@6`6|6
6 686P6
6 686P6h6
6 6L6b6
6 727R7e7l7y7
6 7a7
6!6)666=6E6L6T6\6m6r6z6
6!6.6D6l6
6!6/656A6j6
6!6/656A6x6
6!6C6J6i6
6!7z7
6"6)60676>6E6L6S6Z6a6h6o6v6
6"6,616C6
6"6,6l7g8
6"6;6W6
6"6=6X6s6
6"60666;6B6W6s6z6
6"676Q6]6(7
6"6B6a6l6
6"6C6J6
6"7)7
6"7R7Y7s7
6#6;6A6^6v6|6
6#6+6
6#6+65696@6Y6^6i6r6z6
6#606=6J6Q6^6e6
6#6-61686Q6V6a6j6r6|6
6#6F6[6~6
6#7j7J8
6#7V7
6#7X7
6$6,6<6L6\6l6|6
6$6,646D6L6T6d6
6$6,686@6L6T6`6h6t6|6
6$6+646;6U6y6
6$6=6V6o6
6$606<6H6T6`6l6x6
6$60686D6L6X6`6l6t6
6$62686=6D6Y6
6$646
6$7(7,7074787
6$7|7
6$7+7
6$7T7
6$7Y7
6%6)606I6N6Y6b6j6t6x6
6%6*616;6C6H6O6Y6a6f6m6y6
6%666T6
6%686R6
6%696M6a6u6
6%7^7
6%747?7|7
6%7b7z7
6%7v7
6&6,6=6^6e6l6y6
6&6-686@6E6L6Y6a6f6m6z6
6&6-6E6Z6d6
6&6D6b6
6&6K6o6v6
6&787
6&7b7
6&7O7v7
6(6,6064686<6@6D6H6L6P6T6X6\6`6h6l6p6t6x6|6
6(6@6X6p6
6(6-7i7
6(686H6X6h6x6
6(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
6(7J7w7
6(7l7
6(7M7p7
6):y:
6)6]6
6)6G6e6
6)7;7
6)7M7g7
6*:T:
6*606G6p6
6*626F6N6b6j6~6
6*656@6V6i6t6
6*6E6`6{6
6*6M6^6
6*717@7D7k8s8y8
6*777X7]7v7{7
6*7K7Y7f7o7{7
6,6@6T6h6|6
6,606
6,606<6L6P6\6|6
6,686@6X6`6
6,6A6V6k6
6,6C6Z6q6
6,6I6
6,7074787
6,767
6,767H7`7
6,7j7
6.6=6M6]6n6{6
6.686R6i6w6
6.6C6X6m6
6.6V6]6
6.7l7
6.8.9
6/6D6Y6n6
6/7,9f9$:
6/7d7
6/7k7
6;6[6w6
6;7]7
6@6l6
6@7D7H7L7P7T7
6[6`6
6[6J7
6[7j7u7Q8 9
6\7`7d7h7l7
6];d;
6`7d7h7
6+6:6E6X6r6
6+6@6U6j6
6+6<6\6q6
6+6<6M6^6o6
6+6=6S6h6
6+626J6X6\6`6d6h6l6p6t6x6|6
6+787O7\7~7
6+7f7}7
6+7i7
6+7J7Y7c7B91:<:m:|:
6+7O7
6+7X7y7
6<6C6
6<6h6
6<6H6P6h6p6
6<7]7
6<7y7
6=6B6`6s6
6=6T6_6{6
6=7y8
6=8c8w8
6=8j8
6>7x7
606=6U6b6
6064686<6@6D6H6L6P6T6
60676I6N6h6x6
60686\6h6p6
606E6Z6o6
606H6`6x6
607[7
6074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
607M7
61=1X1
616?6E6Q6j6
616?6F6O6V6]6g6
61686V6]6
616F6[6p6
616G6U6^6
616Q6q6
617D8K8
617H7e7
62696U6
626f6v6
627[7u8
62777^7e7}7
627O7V7o7
63686C6L6T6^6b6i6
636I6|6
636O6
64 UAV slots
646>6R6Y6z6
64686<6@6D6H6L6P6T6X6\6`6d6h6'7L7
646d6
646N6S6k6
648;8
657<7y7
6'626>6B6I6b6g6r6{6
666R6z6
667\7
667'8
667Z7
6'6B6N6
6-6B6W6l6
6-6C6Y6o6
6-6U6q6w6{6
6-6Y6m6
6'7.7
676N6\6
676O6g6
676T6k6
677g7s7
677x7
6789:;<=
6'7I7
686?6F6x6
686\6v6
686k6{6
686S6
686z6
687|7
687<7u7
696@6Y6v6}6
696T6o6
697B7W<
697V7
6a?|?
6A6d6
6A7:8a8
6A7\7w7
6a7h7
6B7I7a7h7
6B7p7
6C7}8
6C7n7
6D6a6
6d6h6l6p6t6x6|6
6D7K7^7v:
6D7s7
6d7x7
6E6b6
6E7l7 8^8
6f6u7
6F7j7
6F8k9
6G6s6
6g7}7
6h6 8x8
6H6V6
6H6w6
6h8w8
6i6:7K7\7
6i6p6
6J7h7
6K6`6|6
6K6a6
6K7R7
6K7w8
6L6V6h6
6M7X7
6O:Z;a;
6o7t7
6P7T7
6Q7s7
6q8x8
6S6[6s6{6
6u6|6
6U6l6~6
6V6b6
6V7x7
6V8o9
6W7?:
6W7n7
6X6e6b8k9z;
6X7m7|7
6X7W8
6Y:_<u<
6Y7x7V8
6Z6|6
6Z6t6
7 7$7
7 7$7(7,70747
7 7$7(7,7074787|7
7 7$7(7,7074787<7@7D7H7L7P7T7 8$8
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
7 7$7(7,70747i7
7 7$7;7x7
7 7$7x7
7 7%70797A7K7O7V7o7t7
7 7(70787@7H7P7X7`7
7 7(74787<7H7L7P7\7`7d7p7t7x7
7 7(7-747@7H7M7T7a7f7o7v7
7 7,787D7P7\7h7t7
7 7@7\7`7|7
7 7[7
7 74787L7P7h7
7 767G7]7c7z7
7 7'7
7 778
7 787@7d7p7x7
7 787<7 8$8
7 787P7h7
7 7D7P7X7p7x7
7 7t7{7
7 7Z:o:
7 8$8(8,8084888X8\8`8d8h8l8p8
7 8;8_8f8q8
7 8L8x8
7 8M8s8
7 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
7!7(7@7U7\7r7
7!7)7.747:7E7M7R7X7^7i7q7v7}7
7!7*737h7l7p7t7x7
7!737E7W7i7{7
7!828
7!8'8+8Q8W8[8
7"7&7-7F7K7V7_7g7q7u7|7
7"7.7:7F7R7^7j7v7
7"7]7f7
7"7>7p7
7"71787[7b7n7x7
7"8J8r8
7"8Y8<9i9
7#7<7y7
7#8J8
7$7,747<7D7L7T7\7l7t7|7
7$7,787@7L7T7`7h7t7|7
7$7}9
7$707<7H7T7`7l7x7
7$70747D7L7T7d7l7t7
7$7t7x7|7
7$8(8,8084888<8@8T8X8\8`8d8h8
7$8+878;8
7$828_8k8
7$8A8
7$8M8
7%7>7C7N7W7_7i7m7t7
7%767Y7o7
7%8z8
7%9x9
7&7;7^7s7
7&70747;7T7Y7d7m7u7
7&7V7s7
7&7w8
7&8-8?8F8
7&8s8
7(7;7Y7
7(7@7X7p7
7(7=7R7g7|7
7(707<7D7P7X7d7h7l7x7
7(707<7D7P7X7d7l7x7
7(70787@7H7P7X7`7h7p7x7
7(787H7X7h7x7
7(787Q7
7(7d7
7(7S7b7m7
7(8y8
7)7=7Q7e7y7
7)7>7S7h7}7
7)70787?7G7O7`7e7m7z7
7)7A7
7)8f9
7)8R8`8r8
7*7?7T7i7~7
7*7]7r7
7*7H7f7
7*8d8
7*8M9
7*8T8:9
7,7<7L7\7l7|7
7,7<7L7\7l7p7|7
7,7074787<7l7
7,7A7V7k7
7,7g7~7
7,7G7b7}7
7,8084888<8@8D8H8L8P8T8`8d8h8l8p8
7,8a9|9
7,8h8n8
7,8I8`8
7.7U7
7.7W7
7.8u8
7/7[7D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
7/7>7
7/7U7\7v7
7/7V7r7
7/8{8
7/8F8
7:7\7f7
7:7`7t7x7|7
7:7Y7q7
7:8_8
7:8T8
7:8v8
7;7`7
7;7B7
7;8?8C8G8K8O8S8W8[8_8c8g8k8o8s8w8{8
7;8_8z8
7?7[7{7
7?7r7
7?8_8x8
7?8F8e8
7?8y8
7@7b7o7
7@7b7x7
7@7M7U7b7|8
7[_^]
7\8`8d8h8l8p8
7_8}8
7_8j8
7`8w8
7+7@7U7j7
7+797@7S7q7
7+7O7
7<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
7<7.878
7<7h7
7<7R8
7<8Z8_8
7=7k7
7=7w7
7>=M=X=k=z=
7>778G8~8
7>7u7
7>8E8J8h8o8v8}8
7074787
707D7X7l7
707H7`7x7
707N7l7
707P7p7
7084888
70878O8
708l8s8
717?7E7Q7y7
71777;7a7g7k7
717C7W7r7
717Q7q7
718K8
718U8
727?7X7
72797K7R7d7h7l7p7t7x7
727P7}7
727X7l7
737;7m7t7
737<7e7s7
73999f9c:
739Z9w<
747?7
747@7D7H7
747@7H7`7h7
747>7H7R7y7
747R7p7
748U8
757K7a7w7
757P7T7X7\7`7d7h7l7p7t7x7|7
767;7F7O7W7a7e7l7
767_7
767=7b7i7
767L7g7
768^8
768H8
768I8]8p8
768p8Y9c9p9
7'7?7W7o7
7'7\7z7
7-7]7p7O8\8m9
7'7<7Q7f7{7
7-747?7
77758
7'7-7J7g7
777P7l7
777U7s7
7-7B7W7l7
7-7F7
7'8]8
7'8>9q=
7-828
787?7F7x7
787P7`7x7
787Q7j7
787S7n7
788|8
788<8@8D8H8L8P8T8X8\8`8d8h8l8
7'8N8
7'8Q8u8
797c8
798r8
7a7}7
7A7c7
7B8o8
7C7f7x7
7c8j8
7c8w8
7D7b7o7x7
7D7p7
7D7t7
7d8k8 9$9(9,9094989p9w9
7d9h9l9p9t9x9|9
7F7U7s7z7
7F8X9&:
7G7]8
7g8m8
7H7|7
7H8O8h8
7I8i8
7I8P8
7I8t9
7j7y7
7j8Q9
7J8r8T9.:
7k7y7
7L7c7
7l8s8
7M7d7
7m7w7
7M8z8
7N7Y7
7O8}8
7O8t8P:
7P8|8
7P9p9
7Q8V8{8
7R7z7
7R8[8
7R8i8x8
7S80:g;
7S8X8i8
7U7l7~7
7v7;8
7V8h8M9
7W7a7m7
7X8\8`8d8h8l8p8t8
7X8a8h8
7x9|9
7xicuU
7Y7h7s7
7Z8a8t8x8|8
8 8$8(8,8
8 8$8(8,808
8 8$8(8,80848
8 8$8(8,8084888<8,9094989<9@9D9H9L9P9@:D:H:L:P:T:X:X;j;
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8$8(8,8084888<8@8p8V9N:U:
8 8$8(8,8D8H8L8P8T8X8
8 8$888<8@8T8X8\8p8t8x8
8 8(8@8H8l8x8
8 8(8-848@8H8M8T8`8h8q8x8
8 8,888D8P8\8h8t8
8 8.8
8 8/8>8J8V8`8j8
8 8@8`8
8 8>8\8z8
8 848H8\8p8
8 868L8b8x8
8 8'838;8D8K8W8_8h8o8{8
8 888P8h8
8 8D8L8T8\8d8l8t8|8
8 9>9o9
8 9-959
8 9B9k9
8 9L9x9
8 9p9m:';
8!<ar
8!<aru
8!8(8A8F8Q8Z8b8l8p8w8
8!8{8
8!8}8
8!8A8a8
8!9K9
8"8'828;8C8M8Q8X8q8v8
8"8r9
8#8(838<8D8N8R8Y8r8w8
8#8/8;8G8S8_8
8#8;8Z8h8
8#8+828:8B8S8X8`8m8t8|8
8#8>8V8
8#888M8b8w8
8#8f9|9
8#9[9x9
8$:>:W>
8$8,8<8L8\8l8|8
8$8,848D8L8T8d8l8t8
8$8,888@8L8T8`8h8t8|8
8$888L8`8t8
8$898N8c8x8
8$8B8`8~8
8$8C8q8
8$9M9v;8<f<
8%8:8O8d8y8
8%858d8
8%9/969x9
8%9i9~9
8&8;8P8e8z8
8&8+8=8
8&989B9
8&989S:
8&9b9
8&9Q9i9Y<
8&9U9
8(8,808<8@8D8P8T8X8d8h8l8x8|8
8(8,8084888X8j8
8(8@8P8h8x8
8(8@8X8p8
8(8=8R8g8|8
8(8>8X8|8
8(80888@8H8P8X8`8h8p8x8
8(848@8L8X8d8p8|8
8(888H8X8h8x8
8(8D8`8|8
8(8L8X8`8
8(8M8
8(9c9
8(9T9
8)8/898C8M8W8a8k8q8{8
8)8>8S8h8}8
8)8O8
8)909
8*8`8|8
8*868B8N8Z8f8r8~8
8*8O8
8*9c:
8,8<8L8\8|8
8,80848P8T8X8
8,858<8@8F8_8d8o8x8
8,8H8d8
8,9;9N9
8,9=9H9O9|9
8,9m9
8.:@:z:
8.9[9}9
8.9~9s;
8.9a9
8.9B9`9
8.9K9}9
8.ur@
8/:_:
8/:6:
8/8A8S8e8w8
8/8G8_8w8
8/8K8k8
8/8M8a8{8
8/8Q8s8
8/8Q8y8
8/9d9+:c:Q;
8/9H9x9
8:8p8
8:8U8p8
8:9\9
8:9_9
8:9g9
8:t V
8;~Ps
8;8`8
8;8D8^8
8;8P8
8;9o9
8?9|9
8@9D9H9L9P9,:0:4:8:<:
8[9p9
8[SVW
8\$*t
8\$*u
8_#t,
8_u[3
8+8\8
8+8\8z8
8+888
8+8C8
8+8F8a8|8
8+9p9
8<8H8P8h8p8
8<8M8X8_8
8=9D9\9
8>8E8
8>8S8v8
8>8v8
8>9b9
80:5:F:
80?0K0O0[2b2
80<0@0D0H0L0P0T0X0
808\8
8084888<8@8D8H8L8P8g:n:
808H8`8x8
808I8
808L8h8
809I9y9~9
81<1T1X1p1t1
81888B8M8T8^8
818E8h8y8
818N8
818Q8q8
819E9
82?293@3
828C8Q8_8k8v8
828g8
829[9
838_8
838<8
83888C8L8T8^8b8i8
838g8
839E9
839T9
83B3f3
848<8D8L8T8\8d8l8t8|8
84898D8M8U8_8c8j8
848d8
85;<;T;[;
858e8
868=8L8V8v8}8
868J8U8`8
869U9b9x9
879f9
879L9W9
8'8(9
8'8,878B8M8X8c8n8y8
8'8^8
8'8<8Q8f8{8
8'8=8S8i8
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
888F8R8
888O8l8
888Y8z8
889?9$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
8'8E8c8
898Y8
89CDEF
8a:|;
8A9K9U9_9n9x9
8A9V9
8b9i9
8B9J9V:c;j;
8b9y9
8C8J8r8y8
8C8k8
8C8n8
8C9g9
8D$)uG
8D8H8L8\8`8d8
8D8k8
8D8p8
8D8t8
8d9<?C?
8D9r9
8DBUGu
8E9 :
8F8S8
8F8u8W;
8F9h9
8F9X9
8f9x9
8FXLCt$A;
8g>m>
8G8u8
8G8W8
8H8M8
8H8r8
8h9l9
8i:x:
8I8T8_8
8ISGNt
8J8_8r8
8J8y8
8k9p9
8K9R9
8L$#t
8l;u>
8L9P9T9X9\9`9d9h9
8l9z9
8M8m8
8N8_8
8o8|8
8OSG5t0A;J
8OSGNt@A;J
8p:w:
8P9s9
8Q8s8]9d9
8Q8w8`9
8q9x9
8R9g<n<
8RQPV
8RTS0t
8s?;}
8S<u!hpc
8s>;}
8S9w:~:
8s9w;
8U8l8~8
8w<x=l?
8W9^9
8W9y9~9
8X8\8
8X8\8`8d8h8D9H9L9P9T9
8X9\9`9d9h9D:H:L:P:T:
8X9\9`9d9h9l9p9t9x9|9
8XIuH
8Y8q8
8Z<u!hpc
8z8_9
8z92:
9 :':D:I:v:}:
9 :K:Q:Y:a:i:
9 :Y:
9 9$9(9,90949
9 9$9(9,9094989
9 9$9(9,9094989<9@9D9
9 9$9(9,9094989<9@9D9H9L9P9 :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
9 9$9(9,9094989<9@9D9P9T9X9\9`9d9h9l9p9t9x9|9
9 9$9(9,9094989<9@9D9Y9
9 9$9(9,9094989P9T9X9\9`9d9h9
9 9$9(9,909i9
9 9(90989@9H9P9X9`9h9p9x9
9 9)919;9?9F9_9d9o9x9
9 9,90949@9D9H9T9X9\9h9l9p9|9
9 9<9@9\9`9|9
9 94989<9P9T9X9l9p9t9
9 959J9_9t9
9 989P9h9
9 9-929~9
9 9b9h9
9 9D9P9X9p9x9
9 9E9[9j9
9 9G9]9s9
9!:>:M:
9!:y:
9!9&90989=9D9P9X9a9h9t9|9
9!9(9I9m9
9!969K9`9u9
9!9D9P9
9":):
9":;:i:
9":n:
9":t:
9"939J9j9{9
9"939L9
9"979L9a9v9
9"9'929;9C9M9Q9X9r9w9
9"999@9{9
9"9P9W9
9"9W9u9
9"9X9r9
9#:[:
9#:P:
9#9)929A9t9
9#9/979@9G9S9[9`9g9s9{9
9#989M9b9w9
9#9l9
9$:@:Z:&;v;
9$:h:
9$9)949=9E9O9S9Z9s9x9
9$9,989D9L9d9l9t9
9$9@9\9x9
9$909<9H9T9`9l9x9
9$90989l9t9|9
9$94989<9@9D9d9h9l9p9t9x9|9
9$989L9`9
9$999N9c9x9
9%:=:
9%:L:g:t:
9%:u:
9%9,9
9%9,949<9M9R9Z9g9n9v9}9
9%9/959;9
9%9:9O9d9y9
9%939e9
9%989R9
9&:,:
9&:^:
9&:=:
9&:8:
9&:f:
9&:G:_:&;l;p;t;x;
9&:w:
9&<><m<&=
9&909G9Q9[9
9&929
9(:,:0:4:8:<:@:
9(:,:0:4:8:<:@:D:N;}<
9(:/:E:O:V:
9(:m:
9(:T:
9(9,9094989<9@9D9H9L9P9T9X9\9
9(9,939L9Q9\9e9m9w9{9
9(9@9X9p9
9(9<9P9d9x9
9(909:9>9E9^9c9n9w9
9(909<9D9P9X9d9l9x9
9(909H9P9t9
9(909T9`9h9
9(949@9L9X9d9p9|9
9(989H9X9h9x9
9(9-9D9j9
9)919D9Q9X9i9q9
9)92999U9
9)929D9
9)949?9J9U9`9k9v9
9)9D9t9x9|9
9*=:>b>
9*9v9
9,:L;<<
9,:s:
9,9:9A9G9N9U9g9|9
9,9C9l9p9t9x9|9E:L:
9,9e9
9,9I9]9y9
9.:n:x:
9.9L9j9
9.9Y9
9/949?9H9P9Z9^9e9~9
9/9G9w9
9/9N9y9
9::I:
9:9[9x9
9:9A9N9]9j9}9
9:9b9
9-:H:
9':L:
9':S:k:p:
9;:5;|;
9;:7;k<M?
9;:I:R:Y:u:
9;9[9w9
9?9a9
9?9M9\9z9
9@:E:J:O:T:Y:^:c:h:m:
9@9O9Z9
9\$ vp
9\$$v3
9\$Dr
9\$dv7
9\:";
9\:x:
9^ w2
9^(v_
9^,v\
9_^[]
9_LvC
9`9d9
9{8vS
9{dve
9|$$uz
9|$,v'
9|$@t
9|$x|
9|$Xvh
9|$Xvk
9|$Xvv
9~ v=S
9~ v2
9~(v&
9~,v&
9~0v]
9~4v 
9~Dv$3
9~LvB
9~Tv$3
9+)XXEzXXEzXXEz
9+:R:
9+:X:c:j:
9+9\9
9+9g9
9<9\9|9
9<9C9
9<9F9X9p9
9<9G9
9<9S9m9
9=9e9
9=9s9
9>:g:
9>tf9~
9>u;h
90:4:8:<:@:D:H:
90:e:x:
90<@<b<r<
90<6<<<D<L<
909@9X9h9
909f:m:
909H9`9x9
909l9v9
90c0m0
90t)A;
91:<:s:
91:a:
91~23
919I9i9
919q9
919Q9q9
92:b:r:
92:C:h:
929B9Y9`9
929J9}9
929P9n9
939}9
939R9
939V9k9
93u=h
94:u:
94:X:\:`:d:h:
94989<9@9D9H9L9P9T9X9\9`9d9h9
949a9
949I9^9s9
949q9
95:h:
95:P:
959d9
959J9w9
959S9q9
969|9
969<9D9J9O9Z9`9j9t9~9
97:S:
97:U:c:k:q:x:
979=9\9b9
979=9^9
979E9K9R9j9
979O9g9
97a7.838@8
98:F:g:
989I9l9}9
989J9r9
989K9}9
989o9
98t!A
98t%A
98tLA
99:`:
99|*j
9'91979A9K9U9_9i9s9y9
9-949{9
999Q9_9e9n9
999T9o9
9'9a9u9
9-9C9Y9o9
9-9H9c9~9
9-9L9i9}9
9'9O9
99tS@
9A:]:|:
9A@uE
9A@uH
9A9G9K9q9w9{9
9a9K;
9B r0
9B u*
9B$u"
9B:I:
9BSCD
9BSJB
9C(_^
9C:-;X;\;`;d;h;l;p;t;x;|;
9Cpt4
9D$ w
9D$$t!;
9D$,vR
9D$<w
9D$0s
9D$4r
9D$Dr
9D$Pv
9D$xt
9D:b:y:
9D:H:t:x:
9E u&
9E uN
9E9m9
9F:5;Y<)=
9f:l;e<
9F:X:
9F0uc
9F0uF
9F9h9
9F9X9
9h:z:
9H;L;P;T;p;
9H\t"
9h9l9p9t9x9|9
9hLFS0
9Hlu!
9Hlu1
9I:j:q:x:
9I;8<G<T<_<n<{<
9I9s:
9j:*;
9J:Q:
9J@uN
9k:r:
9K0t+
9K9z9
9L$$s
9L$@|/
9L$8u$9T$@u
9L$hu 
9L$Lr+
9L$LvM
9L$LvU
9L$pu
9L$X|
9L:l:
9l:p:t:
9L;n=}=
9M v"
9M9z9
9N$t&
9O;_=
9O4~d
9O9[9
9O9g9
9P u[
9P:T:X:\:`:d:h:l:p:t:x:
9P0v*
9P9g9
9Q vC
9Q@uF
9s v3
9S(v#3
9s,vK3
9S:b:
9s9z9
9sdvE3
9sdvT
9T$@r
9T$`r
9t$|v
9T$0|
9t$4v~
9t$8r
9T$8t
9t$Ht*
9T$lv$
9t$pvZ
9t$tva
9t$xvb
9T;c;n;
9u t"hx
9U9l9~9
9V|ve
9w v!
9w v6
9W,v#
9W,vS
9w8v)
9wTv$
9X,v,
9X:\:
9X:\:`:d:h:l:p:
9X:f:
9X4t]
9y(v^
9Y:`:
9y:f;
9YLv;
9z(t5
9z,vu
9Z@uF
9z4v@
A * (1/A) = 1 <| Explicit
A * B for boolean A & B -> AND A, B <| MR.GenSimplifyInstructionsOpt1_NoExcl
A * B/A with negative variations on A <| MR.GenSimplifyInstructionsOpt1_NoExcl
A ;B 
A ;G s
a | r : if( known_bfi_bitmask_noshift_impmask(a,r) && and_is_zero(a,r) ) -> bfi(bfi_bitwidth_noshift_impmask(a,r), 0i, a, r) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
a + (F - a) -> append_arg(F) <| SMR.RangeDataAnalysis
a + -a -> append_arg(0) <| SMR.RangeDataAnalysis
A + B for boolean A & B -> OR A, B <| MR.GenSimplifyInstructionsOpt1_NoExcl
a << L | b (bfi(w=32-L, o=L, a, b) if( mask_is_zero(w, o, b) && allbutwidth_is_zero(w, a) -> imad (a, 1 << L, B) <| MR.GenMad
A = B ? B : C -> A = B ? TRUE : C} <| Explicit
A = B || !B -> A = B || TRUE <| Explicit
a = bfi(w, o, and(m, v), r) : if( masked_is_one(w,o,m) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
a = bfi(w, o, and(v, m), r) : if( masked_is_one(w,o,m) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
a = bfi(w, o, v, 0i) | r : if( mask_is_zero(w,o,r) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_Excl
a = bfi(w, o, v, 0i) | r : if( mask_is_zero(w,o,r) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
a = bfi(w, o, v, and(m, r)) : if( unmasked_is_one_or_val_is_zero(w,o,v,m) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
a = bfi(w, o, v, and(r, m)) : if( unmasked_is_one_or_val_is_zero(w,o,v,m) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
a library must have at least one exported function
A 'ret' instruction must be followed by either (1) the end of the shader or (2) a 'label' instruction. Aborting shader validation.
A Shader is declaring a resource object as a texture using a register mapped to a root descriptor SRV (ShaderRegister=%u, RegisterSpace=%u).  SRV or UAV root descriptors can only be Raw or Structured buffers.
A Shader is declaring a structured UAV with counter using a register mapped to a root descriptor UAV (ShaderRegister=%u, RegisterSpace=%u).  SRV or UAV root descriptors can only be Raw or Structured buffers.
A Shader is declaring a typed UAV using a register mapped to a root descriptor UAV (ShaderRegister=%u, RegisterSpace=%u).  SRV or UAV root descriptors can only be Raw or Structured buffers.
a uint specifying the number of iterations to unroll
A$f9p
A(VW3
a*(1/(b*a)) -> 1 / b <| MR.GenSimplifyInstructionsOpt1_Excl
A*(L2<0) REL L (double) <| MR.GenSimplifyInstructionsOpt1_NoExcl
A*(L2<0) REL L <| MR.GenSimplifyInstructionsOpt1_NoExcl
A*(L2>0) REL L (double) <| MR.GenSimplifyInstructionsOpt1_NoExcl
A*(L2>0) REL L <| MR.GenSimplifyInstructionsOpt1_NoExcl
A*L2 REL L where L2 < 0 divides L as an INT <| MR.GenSimplifyInstructionsOpt1_NoExcl
A*L2 REL L where L2 > 0 divides L as an INT <| MR.GenSimplifyInstructionsOpt1_NoExcl
A*L2 REL L where L2 divides L as a UINT <| MR.GenSimplifyInstructionsOpt1_NoExcl
A,;B,
A,SV3
A;H(r
A;K8r
A;Kdr
A;L$8
A;NPr
A;O\r
A;O0r
A@;B@u7
A|G;x
A+A REL L (double) <| MR.GenSimplifyInstructionsOpt1_NoExcl
A+A REL L <| MR.GenSimplifyInstructionsOpt1_NoExcl
A<;B<
A<;C<s
A<;F<
A<+A8
A<+A83
A0;A8u
A0;B0u
A0;B0u'
A0\1a2
A0+A S
a0a0a0
A1P1Y2x2
A4;A<u
A4;B4u
A4@9G4
A4_^]
A8;G8u3
AB_BlendFactor
AB_SampleMask
ABCDEFGHIIIJKKJKKLMNOPPPQPPPPPPRSTUVWXYZ[\]^_`abcdefghijklmnopqrs
abort
abs float_literal <| SFPS
abs fp_flags <| SFPS
abs fp_range <| SFPS
abs fp_specials <| SFPS
abs instruction to abs modifier match <| Explicit
Abs modifier not allowed for operand #%d of opcode #%d (counts are 1-based). 
abs on unsigned values is not meaningful, ignoring
abs(a), a negative -> neg(a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
abs(a), a positive -> a <| MR.GenSimplifyInstructionsOpt1_NoExcl
Absolute and relative addressing of constant registers cannot be combined in one instruction.
Absolute and relative addressing of input registers cannot be combined in one instruction.
abstract interfaces not supported on %s
abstract interfaces not supported on %s, interface references must resolve to specific instances
Access
accum
acos float_literal <| SFPS
acos fp_flags <| SFPS
acos fp_range <| SFPS
acos fp_specials <| SFPS
AcquireSRWLockExclusive
AcquireSRWLockShared
Ad9Al
ADAPTIVETESS_W
ADAPTIVETESS_X
ADAPTIVETESS_Y
ADAPTIVETESS_Z
add float_literal <| SFPS
add fp_flags <| SFPS
add fp_range <| SFPS
add of negative of itself identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
add of zero identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
add(0f,a) -> append_arg(a) <| SMR.RangeDataAnalysis
Addition of same argument is same as multiply by 2 <| Explicit
address family not supported
address in use
Address mode must be absolute (%s source param).
address not available
addressing operations are not allowed on input registers '%s'
addressing operations are not allowed on output registers '%s'
addressing operations not allowed on temporary registers '%s'
addressOffset
AddressOffset
addressSection
AddressSection
AddressTaken
AddressU
addressU
ADDRESSU
addressV
ADDRESSV
AddressV
ADDRESSW
addressW
AddressW
ADDSIGNED
ADDSIGNED2X
ADDSMOOTH
AddUint64
AddUint64 can only be applied to uint2 and uint4 operands
AddUint64 requires shader model 5 or higher
ADt;hX\
ADt=hX\
ADt7hX\
After texdepth instruction, r5 is no longer available in shader.
aL can only be referenced in the following scenarios: (1) inside a loop/endloop block, or (2) in a subroutine for which in all cases some call below in the stack is in a loop/endloop block. 
Al;A`r
Al;A`s^
All DS input control point vcp[][] registers must have control point count (first dimension) declared with size equal to the number of input control points declared in the hs decls phase (%d control points in this case). Input %d has %d control points declared. 
all global variables are implicitly constant when compiling a library.
All GS input v[][] registers must have vertex count (first dimension) declared with size equal to the number of vertices in the declared input primitive (%d vertices in this case). Input %d has %d vertices declared. 
All HS control point phase input v[][] registers must have control point count (first dimension) declared with size less than or equal to the number of input control points declared in the hs decls phase (%d control points in this case). Input %d has %d control points declared. 
All HS fork phase input vcp[][] registers must have control point count (first dimension) declared with size less than or equal to the number of input control points declared in the hs decls phase (%d control points in this case). Input %d has %d control points declared. 
All HS fork phase input vocp[][] registers must have control point count (first dimension) declared with size less than or equal to the number of output control points declared in the hs decls phase (%d control points in this case). Input %d has %d control points declared. 
All HS join phase input vcp[][] registers must have control point count (first dimension) declared with size equal to the number of input control points declared in the hs decls phase (%d control points in this case). Input %d has %d control points declared. 
All HS join phase input vocp[][] registers must have control point count (first dimension) declared with size equal to the number of output control points declared in the hs decls phase (%d control points in this case). Input %d has %d control points declared. 
all template type components must have the same type
AllMemoryBarrier
AllMemoryBarrierWithGroupSync
allocatesBasePointer
ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT
ALLOW_STREAM_OUTPUT
allow_uav_condition
allResourcesBound
ALPHA
ALPHAARG0
ALPHAARG1
ALPHAARG2
ALPHABLENDENABLE
ALPHAFUNC
ALPHAOP
ALPHAREF
ALPHAREPLICATE
ALPHATESTENABLE
AlphaToCoverageEnable
already connected
alternate cases for 'asm' are deprecated in strict mode
alternate cases for 'decl' are deprecated in strict mode
alternate cases for 'pass' are deprecated in strict mode
alternate cases for 'technique' are deprecated in strict mode
alternate cases for 'Texture1D' are deprecated in strict mode
alternate cases for 'Texture2D' are deprecated in strict mode
alternate cases for 'Texture3D' are deprecated in strict mode
alternate cases for 'TextureCube' are deprecated in strict mode
Alternately, fxc's /LD option allows use of the old compiler DLL
ALWAYS
AMBIENT
AMBIENTMATERIALSOURCE
AMPLIFICATION
and bits_known <| SFPS
and fp_flags <| SFPS
and int_flags <| SFPS
and int_literal <| SFPS
and(a, iv2) : if( can_reduce_and(a, iv2) ) -> and(a, get_reduced_and(a, iv2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
and(and(a, b), c) : if( and_is_identity(c, b) ) -> and(a, c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
and(and(b, a), c) : if( and_is_identity(c, b) ) -> and(a, c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
and(btrue,a) -> append_arg(a) <| SMR.RangeDataAnalysis
and(false,a) -> append_arg(0,a) <| SMR.RangeDataAnalysis
and(or(a, iv1), iv2) -> or(and(a, iv2), and(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_Excl
and, binary_compute on values -> binary_compute, and <| MR.GenShuffleCompute_NoExcl
and, quat arg1 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
and, quat arg2 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
and, quat arg3 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
and, quat arg4 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
and, ternary arg1 on values -> ternary, movc <| MR.GenShuffleCompute_NoExcl
and, ternary arg2 on values -> ternary, movc <| MR.GenShuffleCompute_NoExcl
and, ternary arg3 on values -> ternary, movc <| MR.GenShuffleCompute_NoExcl
and, unary_compute on values -> unary_compute, and <| MR.GenShuffleCompute_NoExcl
ANISOTROPIC
annotation members
ANTIALIASEDLINEENABLE
AntialiasedLineEnable
Aon9t
AP;BPu?
Ap+A`
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-file-l1-2-0.dll
api-ms-win-core-file-l2-1-1.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-io-l1-1-0.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-memory-l1-1-0.dll
api-ms-win-core-processenvironment-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-string-obsolete-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-sysinfo-l1-2-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-crt-math-l1-1-0.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
api-ms-win-crt-time-l1-1-0.dll
Append
append
Append/Consume not compatible with buffer type
AppendStructuredBuffer
argument list too long
argument out of domain
array dimension for %s must be %i
array dimension must be between 1 and 65536
array dimensions must be literal scalar expressions
array dimensions of type must be explicit
array index out of bounds
array index out of bounds <| A%u (B%u), I%u (B%u)
array reference cannot be used as an l-value; not natively addressable
array, matrix, vector, or indexable object type expected in index expression
array_index 
array_merge(chain_merge() || chain) -> append_arg(chain) <| SMR.DataFlagAnalysis_NoPlaceHolder
ArrayIndexType
ArrayIndexTypeId
asdouble
asdouble can only be used on uint values on %s
asfloat
asfloat can only be used on floating point values on %s
asfloat cannot be used on min precision values
asin float_literal <| SFPS
asin fp_flags <| SFPS
asin fp_range <| SFPS
asin fp_specials <| SFPS
asint
asint cannot be used on %s
asint cannot be used on min precision values
asm {
asm blocks have not yet been implemented
asm_fragment
Assignment %s: Attempting to assign an incompatible inline shader
Assignment %s: Dimensionality mismatch (LHS expects %d, RHS has %d)
Assignment %s: Expressions cannot be evaluated to produce objects, though they may be used to index into arrays of objects
Assignment %s: Inline shader missing interface parameter bindings
Assignment %s: Left-hand side type does not match right-hand side type
Assignment %s: Non-array right-hand type expected
Assignment %s: Objects left-hand sides cannot be assigned to expressions
Assignment %s: Only 0 and NULL are valid constants for an object assignment
Assignment %s: Only literal right-hand side values are allowed in state blocks in Effects performance mode
Assignment %s: Reference to shader variable '%s' not valid for %s techniques because it is missing interface parameter bindings
Assignment %s: Reference to shader variable '%s' not valid for %s techniques because it uses an uninitialized shader
Assignment %s: Reference to shader variable '%s' not valid for %s techniques because it uses an unsupported shader model
asuint
asuint can only be used on double values on %s
asuint cannot be used on %s
asuint cannot be used on min precision values
At@t"
At[;L$
AT3CT
AT3FT
atan float_literal <| SFPS
atan fp_flags <| SFPS
atan fp_range <| SFPS
atan fp_specials <| SFPS
atan of known 0 or 1 identity <| Explicit
atan2
atan2 float_literal <| SFPS
atan2 fp_flags <| SFPS
atan2 fp_range <| SFPS
atan2 fp_specials <| SFPS
atomic_and
atomic_and fp_flags <| SFPS
atomic_cmp_store
atomic_cmp_store fp_flags <| SFPS
atomic_iadd
atomic_iadd fp_flags <| SFPS
atomic_imax
atomic_imax fp_flags <| SFPS
atomic_imin
atomic_imin fp_flags <| SFPS
atomic_or
atomic_or fp_flags <| SFPS
atomic_umax
atomic_umax fp_flags <| SFPS
atomic_umin
atomic_umin fp_flags <| SFPS
atomic_xor
atomic_xor fp_flags <| SFPS
attempt to group scalar values read by similar instructions <| Explicit
Attempt to read undeclared component%s of input register v%d (*): %s. Components of v# registers to be read must be declared by a dcl statement.
Attempt to write undeclared component%s of output register o%d (*): %s. Components of o# registers to be written must be declared by a dcl statement.
attribute %s expects the %s parameter to be a %s
attribute evaluation can only be done on values taken directly from inputs
Attributes
AttrParams
B :G u
B ;A 
B ;A s
B ;C }
B ;G u
B ^Y]
b | (a & c) | (a & d) -> or(b, and(a, or(c,d)) <| MR.GenSimplifyInstructionsOpt1_Excl
b = ubfe(w, o, a); movc(b & (1 << (w - 1 + o)), b | ~((1 << w + o)-1), b) -> ibfe(w, o, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
b = ubfe/ushr(a,o), movc((a >> o) & iv_pow2, b | -iv_pow2) -> ibfe(get_first_bit(iv_pow2), 0, a) <| MR.GenD3D10_OptimizeEarlyTranslate
b = ubfe/ushr(a,o), movc((b >> o) & iv_pow2, bfi(w, 0, b, -iv_pow2)) -> ibfe(get_first_bit(iv_pow2), 0, a) <| MR.GenD3D10_OptimizeEarlyTranslate
B!:G!u
B":G"u
B#:G#
B$;G$u
b%d already def'd in the shader. 
b%d must only be defined as true (0x00000001) or false (0x00000000). 
B*!(A * -B + B) -> A * B <| MR.GenSimplifyInstructionsOpt1_NoExcl
B,;G,
B,9G,
B;P0r
B;V(r
B;V`r
B;V4r
B;VTr
B;W$r
B;W,r
B;W0r
B<;C<s
B<;H0
B<;x,
B<+B8
B<A;H
B0;Ads
B0+B,
B4_^]
B4u 9M
BackEndBuild
BackEndMajor
BackEndMinor
BackEndQFE
BackFaceStencilDepthFail
BackFaceStencilFail
BackFaceStencilFunc
BackFaceStencilPass
back-propagate negate through iadd <| MR.GenSimplifyInstructionsOpt1_Excl
back-propagate negate through imul <| MR.GenSimplifyInstructionsOpt1_Excl
bad address
bad allocation
bad array new length
Bad end token.  DWORD count > 1 given. Expected DWORD count to be 1 for end token.
bad file descriptor
bad message
Bad version token.  DWORD count > 1 given. Expected DWORD count to be 1 for version token.
Bad version token.  It indicates neither a pixel shader nor a vertex shader.
base data offset start
base data slot
base of locals
Base of the stack frame
base symbol for base pointer
base type is not a struct, class or interface
BaseType
Basic correctness checking <| Explicit
BBf;F
bcdef
bcrypt.dll
BCryptCloseAlgorithmProvider
BCryptCreateHash
BCryptDestroyHash
BCryptFinishHash
BCryptGetProperty
BCryptHashData
BCryptOpenAlgorithmProvider
bdeq fp_flags <| SFPS
bdeq int_literal <| SFPS
bdeq int_range <| SFPS
bdge fp_flags <| SFPS
bdge int_literal <| SFPS
bdge int_range <| SFPS
bdlt fp_flags <| SFPS
bdlt int_literal <| SFPS
bdlt int_range <| SFPS
bdne fp_flags <| SFPS
bdne int_literal <| SFPS
bdne int_range <| SFPS
BDt;hX\
BDtChX\
bem can only be used before a phase marker (required) later in the shader.
bem may only be used once in a shader.
beq fp_flags <| SFPS
beq int_literal <| SFPS
beq int_range <| SFPS
bfi bits_known <| SFPS
bfi fp_flags <| SFPS
bfi int_literal <| SFPS
bfi(and(31,w), o, v, r) : if( lower_5_bits_are_set(31) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(and(w,31), o, v, r) : if( lower_5_bits_are_set(31) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(i) -> insertion sequence <| MR.Gen_RequiredTranslate
bfi(w, 0, v, n << w) : if( w != 0 ) -> bfi(32-w, w, n, v) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(w, 0i, a, 0i) -> ubfe(w, 0i, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(w, 0i, n, n) -> mov(n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(w, 0i, v, r) : if( width_is_zero(w,r) && allbutwidth_is_zero(w, v) -> iadd(v, r) <| MR.GenD3D10PostMod_Both
bfi(w, and(31,o), v, r) : if( lower_5_bits_are_set(31) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(w, and(o,31), v, r) : if( lower_5_bits_are_set(31) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(w, o, v, bfi(w, o, 0, n)) -> bfi(w, o, v, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(w, o, v, n) << s -> bfi(w, o+s, v, n) <| MR.GenSimplifyInstructionsOpt1_Excl
bfi(w, o, v, n) << s -> bfi(w, o+s, v, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfrev
bge fp_flags <| SFPS
bge int_literal <| SFPS
bge int_range <| SFPS
bge(mul(x,x),neg(mul(x,x))) -> true <| MR.GenSimplifyInstructionsOpt1_NoExcl
bias amount for sample_b must be in the range [%f,%f], but %f was specified as an immediate. Opcode #%d, operand #%d (counts are 1-based). 
bieq bits_known <| SFPS
bieq fp_flags <| SFPS
bieq int_literal <| SFPS
bieq int_range <| SFPS
bige bits_known <| SFPS
bige fp_flags <| SFPS
bige int_literal <| SFPS
bige int_range <| SFPS
bilt bits_known <| SFPS
bilt fp_flags <| SFPS
bilt int_literal <| SFPS
bilt int_range <| SFPS
binary expression with negative symmetry reduction <| MR.GenSimplifyInstructionsOpt1_NoExcl
bind semantics cannot be specified for this object
bind_load(chain, value) -> o->append_sources(chain) <| SMR.DataFlagAnalysis
BindInterfaces
BindInterfaces used with a shader that does not have interface parameters
bine bits_known <| SFPS
bine for isfinite on finite -> true <| MR.GenSimplifyInstructionsOpt1_NoExcl
bine fp_flags <| SFPS
bine int_literal <| SFPS
bine int_range <| SFPS
bine(b,0) -> b <| MR.GenSimplifyInstructionsOpt2_NoExcl
bine(i/ushr(a, n),0) : if(lower_n_bits_are_zero(a, n)) -> bine (a, 0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bine(ishl(a, n),0) : if(upper_n_bits_are_zero(a, n)) -> bine (a, 0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
binormal
BINORMAL
Binormal
Bit 31 not set in dcl info token!  Aborting validation.
BitPosition
Bitwise operations not supported on target %s.
BlA;N
Blend
BLEND_FACTOR
BLENDCURRENTALPHA
BLENDDIFFUSEALPHA
BlendEnable
BLENDFACTOR
BLENDFACTORALPHA
BlendIndices
blendindices
BLENDINDICES
BlendOp
BLENDOP
BlendOpAlpha
BLENDOPALPHA
BlendState
BLENDTEXTUREALPHA
BLENDTEXTUREALPHAPM
BlendWeight
blendweight
BLENDWEIGHT
blt fp_flags <| SFPS
blt int_literal <| SFPS
blt int_range <| SFPS
bne fp_flags <| SFPS
bne int_literal <| SFPS
bne int_range <| SFPS
bool ? a - 1 : a -> a + bool <| MR.GenSimplifyInstructionsOpt1_NoExcl
bool ? a + 1 : a -> a - bool <| MR.GenSimplifyInstructionsOpt1_NoExcl
bool multiply chain reduction <| Explicit
bool1
bool1x1
bool1x2
bool1x3
bool1x4
bool2
bool2x1
bool2x2
bool2x3
bool2x4
bool3
bool3x1
bool3x2
bool3x3
bool3x4
bool4
bool4x1
bool4x2
bool4x3
bool4x4
boolean
boolean constant register '%s' must be defined as a variable of type bool only
BORDER
borderColor
BorderColor
BORDERCOLOR
both sides of the && operator are always evaluated, side effect on '%s' will not be conditional
both sides of the ?: operator are always evaluated, side effect on '%s' will not be conditional
both sides of the || operator are always evaluated, side effect on '%s' will not be conditional
BOTHINVSRCALPHA
BOTHSRCALPHA
Bp+B`
branch
break
break fp_flags <| SFPS
'break' instruction not within a local loop/rep construct. Aborting shader validation. 
'break' instruction not within a local rep/endrep construct. Aborting shader validation. 
break must be inside loop
break never match (to NOP) <| MR.GenSimplifyInstructionsAlways_Both
break(a,bieq(x,0)) -> breakn(a,x) <| MR.Gen_PreModTarget_Both
break(a,bine(x)) -> break(a,x) <| MR.Gen_PreModTarget_Both
break(a,not(x)) -> breakn(a,x) <| MR.Gen_PreModTarget_Both
break(ge(neg(fbool), fbool)) -> break_eq(fbool, 0) <| MR.Gen_PreModTarget_Both
break/breakc statement not inside loop or switch.  Opcode #%d (count 1-based).
break/continue can only be followed by case/default/endswitch/endloop/else/endif. Opcode #%d (count 1-based). Aborting validation.
break_c
break_cmp
break_consume fp_flags <| SFPS
BREAK_EQ i2,i1 <| MR.Gen_PreModTarget_Both
BREAK_EQ i2,i1 matches when CMP is used <| MR.Gen_PreModTarget_Both
BREAK_EQ i2,-iv1 where iv1 is literal and has to be negated <| MR.Gen_PreModTarget_Both
BREAK_EQ i2,-iv1 where iv1 is literal and has to be negated, CMP form <| MR.Gen_PreModTarget_Both
BREAK_GE i2,i1 for targets that use CMP <| MR.Gen_PreModTarget_Both
BREAK_GE i2,i1 short form <| MR.Gen_PreModTarget_Both
BREAK_GE i2,-iv1 where iv1 is literal and needs to be negated before using <| MR.Gen_PreModTarget_Both
BREAK_LT i2,i1 for targets that use CMP <| MR.Gen_PreModTarget_Both
BREAK_LT i2,i1 short form <| MR.Gen_PreModTarget_Both
BREAK_LT i2,-iv1 where iv1 is literal and needs to be negated before using <| MR.Gen_PreModTarget_Both
BREAK_NE i2,i1 <| MR.Gen_PreModTarget_Both
BREAK_NE i2,i1 with CMP <| MR.Gen_PreModTarget_Both
BREAK_NE i2,-iv1 where iv1 is literal and has to be negated <| MR.Gen_PreModTarget_Both
BREAK_NE i2,-iv1 where iv1 is literal and has to be negated, CMP form <| MR.Gen_PreModTarget_Both
breaka match <| MR.GenD3D10PostMod_Both
breakc
breakp
breakp requires parameter to be predicate register (p0). 
broken pipe
BT9D$
btof -> movc <| MR.GenSimplifyInstructionsOpt1_NoExcl
btof fp_flags <| SFPS
btoi -> movc <| MR.GenSimplifyInstructionsOpt1_NoExcl
btoi bits_known <| SFPS
btoi fp_flags <| SFPS
btoi int_literal <| SFPS
btoi int_range <| SFPS
Buffer
buffer
buffer error
buffer requires a 't' register
BufferChecksWithoutOrdering
Buffers can only be bound to one slot in this version of Effects
Buffers may only be bound to one constant offset.
Buffers may only be bound to one slot.
bufinfo
bufinfo fp_flags <| SFPS
bufinfo requires resource declared as Buffer, Raw Buffer or Structured Buffer.  Opcode #%d, operand #%d (counts are 1-based). 
buge bits_known <| SFPS
buge fp_flags <| SFPS
buge int_literal <| SFPS
buge int_range <| SFPS
built in type kind
bult bits_known <| SFPS
bult fp_flags <| SFPS
bult int_literal <| SFPS
bult int_range <| SFPS
BUMPENVLOFFSET
BUMPENVLSCALE
BUMPENVMAP
BUMPENVMAPLUMINANCE
BUMPENVMAT00
BUMPENVMAT01
BUMPENVMAT10
BUMPENVMAT11
bw2t_
By default, unbounded size descriptor tables are disabled to support frame captures in graphics tools. Use of unbounded (or large) size descriptor tables can produce unusually large and potentially unusable frame captures in graphics tools.  Please specify a reasonably small upper bound on table size.  If that isn?t an option, unbounded size descriptor tables can be enabled using the compiler using switch: /enable_unbounded_descriptor_tables
By the end of a vertex shader, any oTn register written must not have gaps in components, starting from x, in order xyzw. To satisfy this, oT%d requires writing of the additional component%s(*): %s 
ByteAddressBuffer
Bytecode appears corrupt - integrity check failed.
byteOffset
C ;A 
C ;A v
C ;G u
C ;G w
C +F 
C +G 
C$;G$u0
C$@uB
c%d already def'd in the shader. 
C(;B(r
C,;A,u]
C,_^[
C;\$<
C;\$dr
C;^(r
C;^(v
C;^,r
C;^dr
C;_,r
C;YLr
C`Pj@
C|F;p
C|G;x
C<;B<
C<_^[
C<u';q
C0;G0u@
C0;xDs
C0;xds
C0_^[
C09O4|
C0t33
c1, c2, c3, c4, c5, c6
C4;C8v
C6N7y7
C8+C0_^[
C89O<
C8Rh0
C8RhX
cabinet.dll
CACHE*
calclod1d fp_flags <| SFPS
calclod1d_a fp_flags <| SFPS
calclod1d_u fp_flags <| SFPS
calclod1d_u_a fp_flags <| SFPS
calclod2d fp_flags <| SFPS
calclod2d_a fp_flags <| SFPS
calclod2d_u fp_flags <| SFPS
calclod2d_u_a fp_flags <| SFPS
calclod3d fp_flags <| SFPS
calclod3d_u fp_flags <| SFPS
calclodcube fp_flags <| SFPS
calclodcube_a fp_flags <| SFPS
calclodcube_u fp_flags <| SFPS
calclodcube_u_a fp_flags <| SFPS
CalculateLevelOfDetail
CalculateLevelOfDetailUnclamped
call, callnz, label, and ret instructions are not allowed in assembly fragments
call/callc statement not referencing a label.  Opcode #%d (count 1-based).
callc
CallingConvention
callnz
CAMERASPACENORMAL
CAMERASPACEPOSITION
CAMERASPACEREFLECTIONVECTOR
can be declared (the amount is a function of how many threads there are).  This shader exceeds the limit at %d bytes per thread. 
cannot %sconvert %sfrom '%s' to '%s'
Cannot access 32-bit type pool with 16-bit APIs
Cannot append range with implicit lower bound after an unbounded range (descriptor table slot [%u], root parameter [%u]).
Cannot apply a negation source modifier on data that was last written with the saturate destination modifier. Affected components(*) of %s source param: %s
cannot bind interfaces to classes in tbuffers
cannot bind the same variable to multiple constants in the same constant bank
Cannot call subroutine label defined earlier in shader (label #%d in this case).  Subroutine call must reference label defined later in shader. Aborting shader validation. 
cannot cast the LHS of an assignment to an indexable object, consider using asuint, asfloat, or asdouble on the RHS
cannot clip from a swizzled vector
cannot convert from 'object type' to 'numeric type'
Cannot declare streams as an input for geometry shader primitives, it must be its own parameter.
Cannot fit shader into length limits for target shader model (ps_1_4). 
cannot have divergent gradient operations inside flow control
cannot have gradient operations inside loops with divergent flow control
cannot map expression to %s instruction set
cannot map expression to pixel shader instruction set
cannot map expression to vertex shader instruction set
cannot map loop to shader target, target does not support breaks
cannot match attribute %s, non-uint parameters found
cannot match attribute %s, parameter %i is expected to be of type %s%c
cannot match lerp because lerp factor is not _sat'd
cannot mix packoffset elements with nonpackoffset elements in a cbuffer
Cannot negate second source parameter to vector*matrix instructions.
cannot sample from non-floating point texture formats.
Cannot set co-issue ('+') on a tex* instruction.  Co-issue only applies to arithmetic instructions.
Cannot set co-issue ('+') on a texture instruction.  Co-issue only applies to arithmetic instructions.
Cannot set co-issue ('+') on consecutive instructions.
Cannot swizzle second source parameter to vector*matrix instructions.
cannot unroll loop with an out-of-bounds array reference in the condition
Cannot use %s attribute without specifying a 4-component SV_Position output
Cannot use abs on source parameter(s) on to vFace register.
cannot use casts on l-values
Cannot use negate on second source parameter to vector*matrix instructions.
Cannot use negate on source parameter(s) to %s instruction.
Cannot use negate or abs on second source parameter to vector*matrix instructions.
Cannot use negate or abs on source parameter(s) to %s instruction.
Cannot use tex* instruction after non-tex* instruction.
Cannot use texture arrays on DX9 targets with multiple samplers.
can't be base class, or method can't be overridden
Can't continue validation - aborting.
Can't create/set an invalid shader. Make sure your shader is valid, and make sure you're not using asm shaders in SM4.0
can't emit if statement with both gradients and program flow control
Can't fall through case/default unless case/default has no code. Opcode #%d (count 1-based). Aborting validation.
can't flatten if statements that contain out of bounds array accesses
can't flatten if statements that contain side effects
can't flatten with flow control when variable is bound to b register
can't force branch with gradients on non-inputs
can't match attribute %s, %d or 0 parameters expected, found %d
can't match attribute %s, %d parameter(s) expected, found %d
can't unroll loops marked with loop attribute
can't use branch and flatten attributes together
can't use branch, flatten, call  or case attributes together
can't use call or forcecase attributes on switches in %s programs
can't use fastopt and unroll attributes together
can't use flow control on this profile
can't use gradient instructions in loops with break
can't use loop and unroll attributes together
case %d (or if bits to be interpreted as float: %f) already seen. Opcode #%d (count 1-based).
case fp_flags <| SFPS
case ordinal too large for floating point representation
case statement doesn't match to the scope of a switch statement. Opcode #%d (count 1-based). Aborting validation.
CaseStmts
catch
CB%d[%d:
CB[%d] already declared, repeated declaration on opcode #%d (count is 1-based). 
cbBlock
cbLocals
cbParams
cbProlog
cbSavedRegs
cbStkMax
cbuffer
cbuffer bank %u used more than once
cbuffer register (b%u) used more than once
cbuffer register b#
cbuffer requires a 'b' register
cbuffers cannot have the same name ('%s') in a library
CCW_STENCILFAIL
CCW_STENCILFUNC
CCW_STENCILPASS
CCW_STENCILZFAIL
Cd;Gd
ceil float_literal <| SFPS
ceil fp_flags <| SFPS
ceil fp_range <| SFPS
ceil fp_specials <| SFPS
center
centroid
centroid 
cf = $IsReturn(a, ci) -> append_arg(a, ci) <| SMR.DataFlagAnalysis
CH+CD
chain_end fp_flags <| SFPS
chain_merge($IsSync() || chain) -> append_arg(chain) <| SMR.DataFlagAnalysis_NoPlaceHolder
chain_merge($IsSync() || chain) -> append_arg(sync) <| SMR.DataFlagAnalysis_ConstInterp
chain_merge(chain_merge() || chain) -> append_arg(chain) <| SMR.DataFlagAnalysis_NoPlaceHolder
Change swizzle of parameters to dot <| Explicit
char16_t
char32_t
char8_t
character continues past end of file
check_access_fully_mapped
check_access_fully_mapped fp_flags <| SFPS
CheckAccessFullyMapped
CheckAccessFullyMapped requires shader model 5 or higher
checksumType
cinstanceid
cl = $IsBreak(a, ci) -> append_arg(a, ci) <| SMR.DataFlagAnalysis
cl = $IsConsume(a, b, ci) -> append_arg(ci) <| SMR.DataFlagAnalysis
cl = $IsContinue(a, ci) -> append_arg(a, ci) <| SMR.DataFlagAnalysis
cl = casecond(ci, c) -> append_arg(ci) <| SMR.DataFlagAnalysis_NoPlaceHolder
cl = emit(ci, stream) -> append_arg(ci) <| SMR.DataFlagAnalysis_NoPlaceHolder
cl = emitarg(a, b, ci) -> append_arg(ci) <| SMR.DataFlagAnalysis_NoPlaceHolder
cl = endcase(ci, ch) -> append_arg(ci) <| SMR.DataFlagAnalysis_NoPlaceHolder
cl = endcase(ci, ch) -> append_arg(ci, ci_p, ch) <| SMR.DataFlagAnalysis_PlaceHolder
cl = fcbody(ci, c) -> append_arg(ci, c) <| SMR.DataFlagAnalysis_NoPlaceHolder
cl = fcbody_end(ci, ch) -> append_arg(ci, ci_p, ch) <| SMR.DataFlagAnalysis_NoPlaceHolder
cl = fcbody_end(ci, ch) -> append_arg(ci, ci_p, ch) <| SMR.DataFlagAnalysis_PlaceHolder
CL+CH
CLAMP
clamp
class
class is intrinsic type
classes and interfaces are not supported in libraries
ClassParent
ClassParentId
clip can only be used with 1 to 4 components in %s
clip cannot be performed from a constant or literal
clip must be performed from a float3 vector for ps_1_x models
clip must be performed from a float4 vector for ps_2_0 models
clip not supported in texture shaders
Clip plane attribute parameters must be non-literal constants
Clip planes cannot be addressed in %s
Clip planes must be non-literal constants with identity swizzles in %s
clip(+d * a,b) -> clip(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
clip(a+a,b) -> clip(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
clip_distance
CLIPDST
CLIPPING
CLIPPLANE0
CLIPPLANE1
CLIPPLANE2
CLIPPLANE3
CLIPPLANE4
CLIPPLANE5
CLIPPLANEENABLE
clipplanes
'clipplanes' attribute is ignored in library functions
Clockwise Triangles
CloseHandle
CloseThreadpoolWork
cmp (a, a, -a) -> abs <| MR.Gen_OptimizeEarlyTranslate_SAT_NoExcl
cmp diff to basic logic identity <| Explicit
cmp float_literal <| SFPS
cmp fp_flags <| SFPS
cmp fp_range <| SFPS
cmp fp_specials <| SFPS
cmp of known negative identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp of known positive identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp of negated bool identity <| Explicit
cmp sequence 1 -> sat <| MR.Gen_OptimizeEarlyTranslate_SAT_NoExcl
cmp sequence 2 -> sat <| MR.Gen_OptimizeEarlyTranslate_SAT_NoExcl
cmp(+d * a,b,c) -> cmp(a,b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(a,b,c) -> append_arg(b, c) <| SMR.RangeDataAnalysis
cmp(a+a,b,c) -> cmp(a,b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(-b,0,b) -> cmp(b,b,0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
CMP(c,d=1+CMP(c,a,b),f) -> CMP(c,1+a,f) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(c,d=cmp(c,a,b),f) -> cmp(c,a,f) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(c,f,d=cmp(c,a,b)) -> cmp(c,f,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(-cmp(a, <=0, >0), b, c) -> cmp(a,b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(cmp(a, <0, >=0), b, c) -> cmp(a,c,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(cmp(a, >=0, <0), b, c) -> cmp(a,b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(-cmp(a, >0, <=0), b, c) -> cmp(a,c,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(-d * a,b,c) -> cmp(-a,b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp, binary_compute on same value -> binary_compute, cmp <| MR.GenShuffleCompute_NoExcl
cmp, binary_compute on values -> binary_compute, cmp <| MR.GenShuffleCompute_NoExcl
cmp, binary_compute on values lhs -> binary_compute, cmp <| MR.GenShuffleCompute_Excl
cmp, binary_compute on values rhs -> binary_compute, cmp <| MR.GenShuffleCompute_Excl
cmp, unary_compute on values -> unary_compute, cmp <| MR.GenShuffleCompute_NoExcl
cmp, unary_compute on values lhs -> unary_compute, cmp <| MR.GenShuffleCompute_Excl
cmp, unary_compute on values rhs -> unary_compute, cmp <| MR.GenShuffleCompute_Excl
Co-issue ('+') is not supported in this shader version.
Co-issued instruction cannot write all components - must write either alpha or color.
Co-issued instructions cannot both be dot-product, since each require use of the color/vector pipeline to execute.
Co-issued instructions cannot both be dp3, since each require use of the color pipe to execute.
Co-issued instructions cannot both write to alpha component.
Co-issued instructions cannot both write to color components.
Co-issued instructions cannot both write to the same component(s).  One instruction must write to alpha and the other may write to any combination of red/green/blue.  Destination registers may differ.
Co-issued instructions cannot both write to the same components of a register.  Affected components: %s
color
Color
COLOR
COLOR outputs must be contiguous from COLOR0 to COLORn
COLOR%d must be a four-component vector
COLOR0
COLOR1
COLOR2
COLORARG0
COLORARG1
COLORARG2
COLOROP
COLORVERTEX
COLORWRITEENABLE
COLORWRITEENABLE1
COLORWRITEENABLE2
COLORWRITEENABLE3
column_major
column_major 
columnNumber
columnNumberEnd
COM+_Entry_Point
combine AND of two equal unknown left shifts <| MR.GenSimplifyInstructionsOpt1_Excl
combine AND of two equal unknown right shifts <| MR.GenSimplifyInstructionsOpt1_Excl
combine AND of two equal unknown unsigned right shifts <| MR.GenSimplifyInstructionsOpt1_Excl
combine of commutative literals <| Explicit
combine OR of two equal shifts <| MR.GenSimplifyInstructionsOpt1_NoExcl
combine simple instructions to reduce instruction count <| Explicit
combine XOR of two equal shifts <| MR.GenSimplifyInstructionsOpt1_NoExcl
CombineInstructions can create dots <| Explicit
comdat
comma expression used where a vector constructor may have been intended
comma expression used where an initializer list may have been intended
comment
comment continues past end of file
Compact Registers - Compress <| Explicit
Compact Registers - Paint  <| Explicit
Compact Registers - Press Loop Ins <| Explicit
Compact Registers - Press Moves <| Explicit
CompanyName
compare
comparison
Comparison filtering for feature level 9
COMPARISON_ALWAYS
COMPARISON_ANISOTROPIC
COMPARISON_EQUAL
COMPARISON_GREATER
COMPARISON_GREATER_EQUAL
COMPARISON_LESS
COMPARISON_LESS_EQUAL
COMPARISON_MIN_LINEAR_MAG_MIP_POINT
COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR
COMPARISON_MIN_MAG_LINEAR_MIP_POINT
COMPARISON_MIN_MAG_MIP_LINEAR
COMPARISON_MIN_MAG_MIP_POINT
COMPARISON_MIN_MAG_POINT_MIP_LINEAR
COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT
COMPARISON_MIN_POINT_MAG_MIP_LINEAR
COMPARISON_NEVER
COMPARISON_NOT_EQUAL
ComparisonFunc
comparisonFunc
compiland
compilandID
compilands
compile
compile expression does not refer to a compilable function.  API calls such as ConstructGSWithSO and BindInterfaces can not be used in arguments to CompileShader
compile expression must specify a valid shader model
compile_fragment
Compiled code results in dynamic flow control nesting depth that exceeds limit of %d for target (%s). 
Compiled code results in dynamic 'if'/'endif' nesting depth that exceeds limit of %d for target (%s) (due to conditional break that counts towards the same limit). 
Compiled code results in dynamic 'if'/'endif' nesting depth that exceeds limit of %d for target (%s). 
Compiled code results in loop nesting depth that exceeds limit of %d for target (%s). 
Compiled code results in static 'if'/'endif' nesting depth that exceeds limit of %d for target (%s). 
Compiled code results in subroutine call nesting depth that exceeds limit of %d for target (%s). 
Compiled code results in subroutine nesting depth that exceeds limit of %d for target (%s). 
Compiled shader code has has many operations that use the texture unit (%d). Max. allowed by the target (%s) is %d.
Compiled shader code uses too many arithmetic instruction slots (%d). Max. allowed by the target (%s) is %d. Consider increasing optimization level to reduce instruction count.
Compiled shader code uses too many instruction slots (%d). Max. allowed by the target (%s) is %d.
Compiled shader code uses too many instruction slots (%d). Max. allowed by the target (%s), including cap for instruction limit, is %d.
Compiled shader code uses too many instructions (%d). Max. allowed by the target (%s), including cap for instruction limit, is %d.
Compiled With LTCG
compiler name
COMPILER_GENERATE_OLD_DEBUG_INFO
CompilerGenerated
CompileShader
COMPLEMENT
complement cannot be used with other modifiers
complement is not supported in this shader version
Component%s of register %s%d being read, but not declared. v# and t# registers must be declared using a dcl statement (down to the component level) in %s. Undeclared component%s(*) being read: %s
Component%s of register %s%d being read, but not declared. v# registers must be declared using dcl statement(s) (down to the component level). Affected components (*): %s
Component(s) of register vPos being read, but not declared. vPos must be declared using a dcl statement. Affected components (*): %s
Components of input declaration for register %d overlap with previous declaration for same register.  Opcode #%d (count is 1-based). 
Components of input declaration for register v%d overlap with previous declaration for same register.  Opcode #%d (count is 1-based). 
Components of output declaration for register %d overlap with previous declaration for same register.  Opcode #%d (count is 1-based). 
Components of output declaration for register o%d overlap with previous declaration for same register.  Opcode #%d (count is 1-based). 
Compute Shader input Thread Group ID already declared.  Opcode #%d (count is 1-based). 
Compute Shader input Thread Group ID declaration must have a non-empty mask and allows only components x, y, and z in mask.  Opcode #%d (count is 1-based). 
Compute Shader input Thread ID already declared.  Opcode #%d (count is 1-based). 
Compute Shader input Thread ID declaration must have a non-empty mask and allows only components x, y, and z in mask.  Opcode #%d (count is 1-based). 
Compute Shader input Thread ID In Group already declared.  Opcode #%d (count is 1-based). 
Compute Shader input Thread ID In Group declaration must have a non-empty mask and allows only components x, y, and z in mask.  Opcode #%d (count is 1-based). 
Compute Shader input Thread ID In Group Flattened already declared.  Opcode #%d (count is 1-based). 
Compute Shader input Thread ID In Group Flattened declaration must have an empty writemask.  Opcode #%d (count is 1-based). 
Compute Shader must declare a thread group size (X,Y,Z).
ComputeShader
conditional must be numeric
conflicting geometry types
conflicting quad/tri/isoline tessfactor semantic
Conflicting register semantics: '%s' and '%s'
connection aborted
connection already in progress
connection refused
connection reset
Conservative correctness checking <| Explicit
Consider using the [flatten] attribute on the if statement or using the assignment syntax to calculate it yourself (e.g.: x`(y) = z)
Consider using the [flatten] attribute on the switch statement or using the assignment syntax to calculate it yourself (e.g.: x`(y) = z)
Consider using the [unroll] attribute on the loop statement or using the assignment syntax to calculate it yourself (e.g.: x`(y) = z)
Consider using the assignment syntax to calculate it yourself (e.g.: x`(y) = z)
const
const 
Const bool (b#) parameter to %s instruction must specify default swizzle (.xyzw, or none specified.) 
Const declaration (def) must appear before other instructions.
const_cast
CONSTANT
constant
Constant buffer register b# must be defined for each RootConstants
Constant buffer size (%d 16-byte entries) exceeds allowed limit of %d entries. Aborting.
Constant buffers, functions, and techniques cannot be nested inside of constant buffers
constant register '%s' must be defined as a variable '%s'
constant register address out of bounds on constant '%s', size %d, offset %d
constant table info exceeds maximum comment size
Constant variable '%s' bound to register greater than 8191 (%d requested)
ConstantBuffer
constinterp usage cannot be used with linear, noperspective, or centroid usage
ConstructGSWithSO
constructors only defined for numeric base types
ConstType
Consume
consume
ConsumeStructuredBuffer
container
continue
continue cannot be used in a switch
continue fp_flags <| SFPS
continue must be inside loop
continue never match (to NOP) <| MR.GenSimplifyInstructionsAlways_Both
continue(a,bieq(x,0)) -> continuen(a,x) <| MR.Gen_PreModTarget_Both
continue(a,bine(x)) -> continue(a,x) <| MR.Gen_PreModTarget_Both
continue(a,not(x)) -> continuen(a,x) <| MR.Gen_PreModTarget_Both
continue/continuec statement not inside loop.  Opcode #%d (count 1-based).
continue_consume fp_flags <| SFPS
continuea match <| MR.GenD3D10PostMod_Both
continuec
CONTINUOUS
conversion from larger type to smaller, possible loss of data
convert mod by power-of-2 to bitwise AND <| MR.GenSimplifyInstructionsOpt1_NoExcl
COORD0
COORD1
COORD2
COORD3
CopyFileExW
cos float_literal <| SFPS
cos fp_flags <| SFPS
cos fp_range <| SFPS
cos fp_specials <| SFPS
could not cast condition to boolean
could not cast condition to uint
couldn't cast expression to boolean for logical not operator
couldn't cast expression to boolean for logical operator
couldn't cast expression to integer
Count
count
COUNT1
COUNT2
COUNT3
COUNT4
countbits
countbits bits_known <| SFPS
countbits fp_flags <| SFPS
countbits int_literal <| SFPS
countbits(i) -> and/shift/add sequence <| MR.Gen_RequiredTranslate
Counter-Clockwise Triangles
COVERAGE
Cp+C`
cplusplusExceptionHandling
CRC of source bytes.
CreateFile2
CreateFileA
CreateFileMappingA
CreateFileMappingW
CreateFileW
CreateThreadpoolWork
cross
cross device link
CryptAcquireContextW
CryptCreateHash
CryptDestroyHash
CryptGetHashParam
CryptHashData
CryptReleaseContext
CRYPTSP.dll
cs_%d_%d
cs_4_0
cs_4_1
cs_5_0
cs_5_1
ct$_^2
Ct+Cp
cubearray
CUBIC
cull_distance
CULLDST
CULLMODE
CullMode
CURRENT
cut_stream
Cx;{p
CXPQW
Cycle Counter already declared.  Opcode #%d (count is 1-based). 
Cycle Counter declaration must have mask of .x or .xy.  Opcode #%d (count is 1-based). 
D$ ;C
D$ ;D$<
D$ @P
D$ +D$$
D$ 9H
D$ A;
D$ F;
D$ hL
D$ Ph<
D$ Phh
D$ Pj
D$ PQ
D$ PQR
D$ PWS
D$ QW
D$ RWh
D$ t'
D$ tk
D$ u#
D$ u,
D$$;D$
D$$;E
D$$;F
D$$;G
D$$;Y
D$$@P
D$$@Ph
D$$@Ph(#
D$$@Ph0'
D$$@Ph0+
D$$@Ph8(
D$$@Php$
D$$@Php*
D$$@PhX)
D$$+D$(
D$$8L$(r
D$$9D$
D$$9E
D$$9G
D$$h4
D$$Pj
D$$PQ
D$$PR
D$$PS
D$$PW
D$$PWj
D$$QQ
D$$tu
D$$u2
D$$ul
D$$VW
D$$WP
D$%u3
D$(;X
D$(@PV
D$(_^[
D$(8L$$r
D$(9CL
D$(h(
D$(Ph
D$(PQ
D$(PQR
D$(PV
D$(PW
D$(Sh
D$(SVW
D$(WP
D$,;|$ r
D$,;QPs
D$,F;
D$,j P
D$,Ph
D$,PQ
D$,PSRVW
D$,RS
D$,tR
D$,tW
D$,u]3
D$,WP
D$@;\$`r
D$@;D$
D$@9D$
D$@A;
D$@DBUG
D$@hD
D$@hp
D$@ht
D$@Ph
D$@Pj
D$@SQ
D$@SVW
D$@uK
D$\!D$
D$\+D$$
D$\9D$ s
D$\Ph
D$\Pj
D$\PQ
D$\PS
D$`;D$
D$`Pj
D$`QR
D$|Ph
D$|PP
D$|PS
D$|QP
D$|WP
D$<Ph
D$<PR
D$<PS
D$<PV
D$<PW
D$<u&
D$0;xD
D$0Ph
D$0PVu 
D$4;D$<
D$49D$0s
D$49D$0v
D$4HPQ
D$4Ph
D$4Pj
D$4PQ
D$4PQR
D$4PR
D$4PVu
D$4PW
D$4SP
D$6:D$'sE;T$Dr u=
D$79S
D$8;0
D$8;C
D$83H
D$88W
D$89C
D$89D$<u
D$89D$X
D$8F#
D$8Ph
D$8Pj
D$8PP
D$8PQ
D$8PV
D$8PW
D$8PWj
D$8tk
D$8uE3
D$8VP
D$d9A
D$dA;
D$Dhd(
D$DJ@
D$DPh
D$dPj
D$DPPh
D$dPQ
D$DPQQ
D$dPSWV
D$h;\$@
D$h;L$8
D$h3D$$#D$P
D$H9D$$v
D$hPh
D$HPh
D$hPh
D$HPh
D$HPQ
D$HPQQ
D$HPS
D$hPS
D$HPS
D$hPSj
D$HPSW
D$hPWV
D$L#D$
D$L#L$(#D$,
D$l;D$`
D$l3D$$#D$@
D$L3L$(3D$,
D$L9D$Hu
D$LA;
D$lPh
D$LPh
D$lPQ
D$LPR
D$lPS
D$lPW
D$lPWj
D$LQPh
D$p;0
D$P;D$
D$PPj
D$pPj
D$pPR
D$PPSW
D$PPV
D$PPVj
D$PPW
D$PPWh
D$PrB
D$pSV
D$pSVW
D$t;<
D$tPh
D$TPh
D$TPQ
D$TPQRV
D$TPSRQ
D$TPWj
D$TVP
D$TWP
D$X!D$
D$X;D$8s.
D$X;D$P
D$X9D$`
D$X9D$L
D$xF;r
D$XPh
D$xPj
D$XPj
D$XPRj
D$XPRQ
D$xPW
D$xt@+
D$xuf
D$XVWSP
D$XyMh
d((double)x * x)/dz -> 2*dx/dz * x <| SR.GenDerivatives_Binary
d((double)x * y)/dz -> dx/dz * y + x * dy/dz <| SR.GenDerivatives_Binary
d((double)x + (double)y)/dz -> dx/dz + dy/dz <| SR.GenDerivatives_Binary
d((double)x)/dz -> (double)dx/dz <| SR.GenDerivatives_Unary
d((double)-x)/dz -> -(double)dx/dz <| SR.GenDerivatives_Unary
d(2^x)/dz -> ln(2) * 2^x * dx/dz <| SR.GenDerivatives_Unary
d(a ? b : c)/dz -> a ? db/dz : dc/dz <| SR.GenDerivatives_Ternary
d(acos(x))/dz -> -1/sqrt(1-x^2) * dx/dz <| SR.GenDerivatives_Unary
d(asin(x))/dz -> 1/sqrt(1-x^2) * dx/dz <| SR.GenDerivatives_Unary
d(atan(x))/dz -> 1/(1+x^2) * dx/dz <| SR.GenDerivatives_Unary
d(atan2(x,y))/dz -> 1 / (1 + (y/x)^2) * d(y/x)/dz <| SR.GenDerivatives_Binary
d(cos(x))/dz -> -sin(x) * dx/dz <| SR.GenDerivatives_Unary
d(dmax(x,y))/dz -> (x > y) ? dx/dz : ((y > x) ? dy/dz : dmax(dx/dz, dy/dz) <| SR.GenDerivatives_Binary
d(dmin(x,y))/dz -> (x < y) ? dx/dz : ((y < x) ? dy/dz : dmin(dx/dz, dy/dz) <| SR.GenDerivatives_Binary
d(frac(x))/dz -> dx/dz <| SR.GenDerivatives_Unary
d(IsIntToDouble(x))/dz -> 0lf <| SR.GenDerivatives_Unary
d(IsIntToFloat(x))/dz -> 0f <| SR.GenDerivatives_Unary
d(IsRound(x))/dz -> 0 <| SR.GenDerivatives_Unary
d(log_2(x))/dz -> 1/(x * ln(2)) * dx/dz <| SR.GenDerivatives_Unary
d(max(x,y))/dz -> (x > y) ? dx/dz : ((y > x) ? dy/dz : max(dx/dz, dy/dz) <| SR.GenDerivatives_Binary
d(min(x,y))/dz -> (x < y) ? dx/dz : ((y < x) ? dy/dz : min(dx/dz, dy/dz) <| SR.GenDerivatives_Binary
d(sin(x))/dz -> cos(x) * dx/dz <| SR.GenDerivatives_Unary
d(x * x)/dz -> 2*dx/dz * x <| SR.GenDerivatives_Binary
d(x * y)/dz -> dx/dz * y + x * dy/dz <| SR.GenDerivatives_Binary
d(x / y)/dz -> dx/dz / y + x * -dy/dz / y^2 <| SR.GenDerivatives_Binary
d(x + y)/dz -> dx/dz + dy/dz <| SR.GenDerivatives_Binary
d(x)/dz -> dx/dz <| SR.GenDerivatives_Unary
d(-x)/dz -> -dx/dz <| SR.GenDerivatives_Unary
d(x^-0.5)/dz -> -0.5*x^-1.5 * dx/dz <| SR.GenDerivatives_Unary
d(x+eps)/dz -> dx/dz <| SR.GenDerivatives_Unary
d:wBt
d:wWt!
D=>3[FG
D0^0y0
D0S0`0
D0x%I64x
D3D10_COMPILER
D3D10_SHADER_AVOID_FLOW_CONTROL
D3D10_SHADER_DEBUG
D3D10_SHADER_ENABLE_BACKWARDS_COMPATIBILITY
D3D10_SHADER_IEEE_STRICTNESS
D3D10_SHADER_NO_PRESHADER
D3D10_SHADER_PARTIAL_PRECISION
D3D10_SHADER_PREFER_FLOW_CONTROL
D3D10_SHADER_SKIP_OPTIMIZATION
D3D11 Assembler Error: Invalid Bytecode: %s
D3D11 Internal Compiler Error: Invalid Bytecode: %s
D3D12 constant/texture buffer template element can only be a struct
D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE combined with other flag(s) that don't make sense (root signature flags %x).
D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE not supported if device does not support raytracing (root signature flags %x).
D3DAssemble
D3DCOLORtoUBYTE4
D3DCompile
D3DCompile: backwards compatibility mode (/Gec) option is not supported for SM5_1+ targets
D3DCompile: cannot specify source and binary debug names
D3DCompile: Entry point cannot be specified for a library (mark library entry points with the export keyword)
D3DCompile: Entry point must specify the RootSignature define name
D3DCompile: Gfa option cannot be used in SM_5_1+ unless all_resources_bound flag is specified
D3DCompile: Invalid flags specified
D3DCompile: pEntrypoint pointer is invalid
D3DCompile: resources_may_alias option is only valid for cs_5_0+ targets
D3DCompile2
D3DCompileFromFile
d3dcompiler_47.dll
D3DCOMPILER_47.dll
d3dcompiler_47.dll
D3DCompiler_47.pdb
D3DCOMPILER_DISASSEMBLY_FORCE_HEX_LITERALS
D3DCOMPILER_FORCE_PREFER_FLOW
D3DCOMPILER_SAVE_REPLAY
D3DCOMPILER_USE_REPLAY
D3DCompressedData
D3DCompressShaders
D3DCreateBlob
D3DCreateFunctionLinkingGraph
D3DCreateLinker
D3DDecompressShaders
D3DDisassemble
D3DDisassemble10Effect
D3DDisassemble11Trace
D3DDisassembleRegion
D3DEffectCompiler
D3DGetBlobPart
D3DGetDebugInfo
D3DGetInputAndOutputSignatureBlob
D3DGetInputSignatureBlob
D3DGetOutputSignatureBlob
D3DGetTraceInstructionOffsets
D3DLoadModule
D3DPreprocess
D3DReadFileToBlob
D3DReflect
D3DReflectLibrary
D3DReturnFailure1
d3ds_dotswiz
d3ds_noiseswiz
D3DSerializeRootSignature: unknown root parameter type (%u)
D3DSerializeRootSignature: unsupported root signature version (%u)
D3DSetBlobPart
D3DStripShader
D3DWriteBlobToFile
D3DX: (WARN) An allocation of zero bytes should return a unique non-null pointer to at
D3DX: (WARN) D3DX11 relies upon this behavior.
D3DX: (WARN) least zero bytes. Deletion of a null pointer should quietly do nothing.
D3DX: (WARN) Overloaded ::new and ::delete operators do not conform to C++ standards:
D3DX_VERSION
D8 _<
dabs float_literal <| SFPS
dabs fp_flags <| SFPS
dabs fp_range <| SFPS
dabs fp_specials <| SFPS
dadd float_literal <| SFPS
dadd fp_flags <| SFPS
dadd fp_range <| SFPS
data error
data member
DATA_STATIC
DATA_STATIC_WHILE_SET_AT_EXECUTE
DATA_VOLATILE
dataCRC
DataKind
dcl %s# does not support any modifiers.
dcl %s# does not support any modifiers. 
dcl %s# must be one of the following types: dcl_2d, dcl_cube or dcl_volume.
dcl %s# must have one of the following masks: x, xy, xyz or xyzw (alternatively: r, rg, rgb, or rgba).
dcl %s# must not specify a writemask (equivalent to a full mask). 
dcl %s# must not specify a writemask (equivalent to a full mask). When samplers are used for texture lookup, 4 components are always returned, including defaults for components that may not be present in the texture format set at the sampler. 
dcl %s# only supports the (optional) _pp modifier (partial precision hint), and/or the _centroid modifier (relevant to multisampling). No other modifiers supported.
dcl %s# only supports the _centroid modifier (optional hint), and/or _pp modifier (partial precision hint). No other modifiers supported.
dcl can't specify empty writemask.
dcl for %s register does not support any modifiers. 
dcl for input v# register must specify usage+index (semantic). i.e. dcl_texcoord5 v%d. Note that the semantics position0, positiont0, psize0, tessfactor(n) and sample(n) are not permitted.
dcl instruction is missing a parameter.
dcl instruction should have exactly 2 parameter tokens.  Aborting validation.
dcl must specify full writemask in this shader version (same as not specifying mask) for %s# registers.
dcl must specify non-empty mask.
dcl usage index, %d, is too high.  Max allowed is %d.
dcl usage 'sample' is not avaliable to the pixel shader. 
dcl usage 'tessfactor' is not avaliable to the pixel shader. 
dcl usage 'tessfactor' is not permitted for vertex input shaders.
dcl usage 'tessfactor' is not permitted for vertex shader input registers.
dcl usage: %s%d has already been specified.
dcl usage+index positiont0 cannot be used in a pixel shader.
dcl usage+index psize0 cannot be used in a pixel shader.
dcl usage+index: %s,%d has already been specified for an input register.
dcl usage+index: %s,%d has already been specified for an output register.
dcl_constantbuffer
dcl_func_output(a) -> o->append_dataflow() <| SMR.DataflowAnalysis
dcl_function_body
dcl_function_table
dcl_globalFlags
dcl_gsinstances
dcl_hs_fork_phase_instance_count
dcl_hs_join_phase_instance_count
dcl_hs_max_tessfactor
dcl_immediateConstantBuffer
dcl_indexableTemp
dcl_indexrange
dcl_input
dcl_input_control_point_count
dcl_input_ps
dcl_input_ps_sgv
dcl_input_ps_siv
dcl_input_sgv
dcl_input_siv
dcl_inputprimitive
dcl_interface
dcl_maxout
dcl_output
dcl_output_control_point_count
dcl_output_sgv
dcl_output_siv
dcl_outputtopology
dcl_resource
dcl_resource_raw
dcl_resource_structured
dcl_sampler
dcl_stream
dcl_temps
dcl_tessellator_domain
dcl_tessellator_output_primitive
dcl_tessellator_partitioning
dcl_tgsm_raw
dcl_tgsm_structured
dcl_thread_group
dcl_uav_raw
dcl_uav_structured
dcl_uav_typed
ddiv float_literal <| SFPS
ddiv fp_flags <| SFPS
ddiv fp_range <| SFPS
ddiv fp_specials <| SFPS
ddx_coarse
ddx_fine
ddy_coarse
ddy_fine
debug info exceeds maximum comment size; no debug info emitted
debug info for optimized code
Debug instructions are unsupported in shader libraries
debug_break
DEBUGMONITORTOKEN
DebugSetMute
decimal value truncated to 64 bits
Declaration for register %s%d overlaps previous declaration for the following component(s) of the same register (*): %s
Declaration statements in HS Control Point phase must appear before other instructions.
Declaration statements in HS Fork phase must appear before other instructions.
Declaration statements in HS Join phase must appear before other instructions.
Declaration statements must appear before other instructions.
Declared output vertex count (%d) multiplied by the total number of declared scalar components of output data (%d) equals %d.  This value cannot be greater than %d.
Declared Thread Group Count %d (X*Y*Z) is beyond the valid maximum of %d for Compute Shader version < 5_0.  Opcode #%d (count is 1-based). 
Declared Thread Group Count %d (X*Y*Z) is beyond the valid maximum of %d.  Opcode #%d (count is 1-based). 
Declared Thread Group X size %d outside valid range [%d..%d] for Compute Shader version < 5_0.  Opcode #%d (count is 1-based). 
Declared Thread Group X size %d outside valid range [%d..%d].  Opcode #%d (count is 1-based). 
Declared Thread Group Y size %d outside valid range [%d..%d] for Compute Shader version < 5_0.  Opcode #%d (count is 1-based). 
Declared Thread Group Y size %d outside valid range [%d..%d].  Opcode #%d (count is 1-based). 
Declared Thread Group Z size %d outside valid range [%d..%d].  Opcode #%d (count is 1-based). 
DECR_SAT
DecrementCounter
DECRSAT
def and dcl instructions must appear before other instructions.
def or dcl instructions must appear before other instructions.
def32
default
default statement doesn't match to the scope of a switch statement. Opcode #%d (count 1-based). Aborting validation.
default statement seen already.  Opcode #%d (count 1-based).
default value
DEFGH
defghijklmnopqrstuvw
define
defined
degrees
delete
DeleteCriticalSection
DeleteFileW
DENY_DOMAIN_SHADER_ROOT_ACCESS
DENY_GEOMETRY_SHADER_ROOT_ACCESS
DENY_HULL_SHADER_ROOT_ACCESS
DENY_PIXEL_SHADER_ROOT_ACCESS
DENY_VERTEX_SHADER_ROOT_ACCESS
Dependent tex-op sequence too long (%dth order). A 1st order dependent tex-op is a tex[ld*|kill] instruction in which either: (1) an r# reg is input (NOT t# reg), or (2) output r# reg was previously written, now being written AGAIN. A 2nd order dependent tex-op occurs if: a tex-op reads OR WRITES to an r# reg whose contents, BEFORE executing the tex-op, depend (perhaps indirectly) on the outcome of a 1st order dependent tex-op. An (n)th order dependent tex-op derives from an (n-1)th order tex-op. A given tex-op may be dependent to at most 3rd order (ps_2_0/x only).
Deprecated DX9 state '%s' is being ignored for %s
Deprecated DX9 state '%s' is being ignored for %s; use state '%s' instead
DEPTH
depth
Depth
DEPTH must be a scalar
Depth of dynamic 'if' nesting exceeds limit of %d (callnz with predicate counts as a dynamic 'if' nesting level). Aborting shader validation. 
Depth of dynamic 'if' nesting exceeds limit of %d, due to break_cmp that counts towards same limit. Aborting shader validation. 
Depth of dynamic 'if' nesting exceeds limit of %d. Aborting shader validation. 
Depth of loop nesting exceeds limit of %d. Aborting shader validation. 
Depth of static 'if' nesting exceeds limit of %d. Aborting shader validation. 
Depth of subroutine call nesting exceeds limit of %d. Aborting shader validation. 
DEPTHBIAS
DepthBias
DepthBiasClamp
DepthClipEnable
DepthEnable
DepthFunc
DEPTHGE
DEPTHLE
DepthStencil
DepthStencilState
DepthStencilView
DepthWriteMask
deriv_rtx
deriv_rtx_coarse
deriv_rtx_fine
deriv_rty
deriv_rty_coarse
deriv_rty_fine
Derivative being used before it was defined. consider moving the derivative assignment earlier in the program.
Derivative is not defined in a different branch of flow-control. Consider moving the derivative assignment before any flow control statements.
Derivatives of indexed variables are not yet implemented.
Derivatives of known values are unimplemented.
Descriptor range (descriptor table slot [%u], root parameter [%u]) overlaps with another incompatible descriptor range.
Descriptor range flag values can only be 0 or flag enum values, found: '%s'
Descriptor range flags cannot be specified for root_sig_1_0
Descriptor range flags cannot specify DESCRIPTORS_VOLATILE with the DATA_STATIC flag at the same time (descriptor range flags %x). DATA_STATIC_WHILE_SET_AT_EXECUTE is fine to combine with DESCRIPTORS_VOLATILE, since DESCRIPTORS_VOLATILE still requires descriptors don't change during execution. 
Descriptor range flags cannot specify more than one DATA_* flag at a time (descriptor range flags %x).
Descriptor range flags cannot specify more than one DESCRIPTOR_* flag at a time (descriptor range flags %x).
DESCRIPTOR_RANGE_OFFSET_APPEND
DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS
DESCRIPTORS_VOLATILE
DescriptorTable
Dest for SINCOS must be a temp (r#) register.
Dest mask for SINCOS must be one of: .x | .y | .xy 
Dest parameter can't specify min precision unless shader is from D3D10+ target.
Dest register cannot be the same as first source register for m*x* instructions.
Dest register for CRS cannot be the same as a source register.
Dest register for LRP cannot be the same as first or third source register.
Dest register for m*x* instructions cannot be the same as one of the additional registers implied by the second source register.
Dest register for POW cannot be the same as second source register.
Dest register for SINCOS cannot be the same as first source register.
Dest register relative index indexable-temp register component %d in x[%d][%d] uninitialized. Opcode #%d (count is 1-based)
Dest register relative index temp register component %d in r%d uninitialized. Opcode #%d (count is 1-based)
Dest register type for CRS must be temp (r#).
Dest register type for LRP must be temp (r#).
Dest register type for NRM must be temp (r#).
Dest register type for POW must be temp (r#).
Dest register type for SINCOS must be temp (r#).
Dest shift not allowed for tex* instructions.
Dest shifts not allowed for vertex shaders.
Dest write mask cannot be empty.
Dest write mask must be .rgb, .a, or .rgba (all).
Dest write mask must be .rgb, or .rgba (all) for dp3.
Dest writemask for NRM must be .xyzw (default) or .xyz (or equivalent rgba notation)
Dest writemask for SINCOS must be .xy, .x or .y.
DEST_ALPHA
DEST_COLOR
DESTALPHA
DESTBLEND
DestBlend
DESTBLENDALPHA
DestBlendAlpha
DESTCOLOR
destination
destination address required
Destination for def instruction must be c# register (where # = reg number). In addition there may be no mask (equivalent to full .xyzw, which is fine).
Destination for def instruction must be of the form c# (where # = reg number). In addition there may be no mask (equivalent to full .xyzw, which is fine).
Destination for defb instruction must be b# register (where # = reg number). In addition there may be no mask (equivalent to full .xyzw, which is fine).
Destination for defi instruction must be i# register (where # = reg number). In addition there may be no mask (equivalent to full .xyzw, which is fine).
Destination for texdepth must be r5.
Destination of texm3x2depth instruction (t%d) is not available elsewhere in shader.
Destination shift not allowed for tex* instructions.
detect errors induced by race conditions <| Explicit
determinant
device or resource busy
DeviceIoControl
DeviceMemoryBarrier
DeviceMemoryBarrierWithGroupSync
dfma fp_flags <| SFPS
dfma fp_specials <| SFPS
dfuse float_literal <| SFPS
dfuse fp_flags <| SFPS
dfuse fp_specials <| SFPS
Different relative addressing of constant registers cannot be combined in one instruction.
Different relative addressing of input registers cannot be combined in one instruction.
Diffuse
DIFFUSE
DIFFUSEMATERIALSOURCE
dimension of conditional does not match value
DIRECT3D
Direct3D HLSL Compiler
Direct3D9: Shader Validator: 
DIRECTIONAL
directory not empty
DISABLE
disable
DisableThreadLibraryCalls
discard
discard_endif(a,b) -> append_arg(a,b,p_a) <| SMR.DataFlagAnalysis_PlaceHolder
discardable
discardif fp_flags <| SFPS
DISCRETE
distance
DITHERENABLE
div float_literal <| SFPS
div fp_flags <| SFPS
div fp_range <| SFPS
div fp_specials <| SFPS
div(a,b)->mul(a, rcp(b)) <| MR.Gen_RequiredTranslate
divide
division by a literal becomes multiplication by reciprocal <| MR.GenSimplifyInstructionsOpt1_NoExcl
division by zero in preprocessor expression
dmad -> dmul, dadd <| MR.Gen_RequiredTranslate
dmad float_literal <| SFPS
dmad fp_flags <| SFPS
dmad fp_range <| SFPS
dmad fp_specials <| SFPS
DMAPOFFSET
dmax 0/dmin 1 -> dsat <| MR.Gen_OptimizeEarlyTranslate_SAT_Excl
dmax float_literal <| SFPS
dmax fp_flags <| SFPS
dmax fp_range <| SFPS
dmax fp_specials <| SFPS
dmax(dmax(i0, l1), l2) -> dmax(i0, dmax(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmax(i, dneg(i)) -> dabs <| MR.Gen_OptimizeEarlyTranslate_SAT_NoExcl
dmax(i0, i1): if (i0 >= i1) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmax(i0, i1): if (i1 >= i0) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmin 1/dmax 0 -> dsat <| MR.Gen_OptimizeEarlyTranslate_SAT_Excl
dmin float_literal <| SFPS
dmin fp_flags <| SFPS
dmin fp_range <| SFPS
dmin fp_specials <| SFPS
dmin(dmin(i0, l1), l2) -> dmin(i0, dmin(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmin(i0, i1): if (i0 >= i1) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmin(i0, i1): if (i1 >= i0) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmov fp_flags <| SFPS
dmov mov <| SFPS
dmovc
dmovc float_literal <| SFPS
dmovc fp_flags <| SFPS
dmovc fp_specials <| SFPS
dmovc(!a,b,c) -> dmovc(a,c,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmovc((a<b),b,a) -> dmax(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmovc((a>=b),a,b) -> dmax(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmovc(a,b,b) -> dmov(b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmovc(bdlt(a, 0), |a|, a) -> dabs(a) <| MR.GenD3D10PreMod_NoExcl
dmovc(c,a,ignore) -> dmov(a) <| MR.GenSimplifyInstructionsAlways_Both
dmovc(c,ignore,a) -> dmov(a) <| MR.GenSimplifyInstructionsAlways_Both
dmovc(c,ignore,ignore) -> ignore(0) <| MR.GenSimplifyInstructionsAlways_Both
dmovc(false,b,c) -> dmov(c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmovc(true,b,c) -> dmov(b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmul float_literal <| SFPS
dmul fp_flags <| SFPS
dmul fp_range <| SFPS
dneg float_literal <| SFPS
dneg fp_flags <| SFPS
dneg fp_range <| SFPS
dneg fp_specials <| SFPS
Do not reduce literals in no-opt compiles <| Explicit
Do not reduce switches in no-opt compiles <| Explicit
Do not remove unaliasable array loads in no-opt compiles <| Explicit
domain
DOMAIN
Domain Shader input control point count already declared. Aborting.  Opcode #%d (count is 1-based). 
Domain Shader input vDomain must be declared with at most a .xy mask when the domain is ISOLINE.
Domain Shader input vDomain must be declared with at most a .xy mask when the domain is QUAD.
Domain Shader input vDomain must be declared with at most a .xyz mask when the domain is TRI.
Domain Shader must declare a tessellator domain.
Domain Shader must declare an input control point count.
domain type
DomainShader
Don't flush denorm values to zero <| Explicit
Don't truncate double values to floats <| Explicit
Don't use marker values for clamped literal conversions <| Explicit
dot float_literal <| SFPS
dot fp_flags <| SFPS
dot fp_range <| SFPS
dot of partial nullity reduction <| Explicit
dot(normalized_v, normalized_v) == 1.0 when v has length <| MR.GenSimplifyInstructionsOpt1_NoExcl
Dot-product needs color/vector pipeline to execute, so instruction co-issued with it cannot write to color components.
Dot-product which writes alpha cannot co-issue, because both alpha and color/vector pipelines used.
DOTPRODUCT3
double
double add of zero identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
double d(1/x)/dz -> -dx/dz/x^2 <| SR.GenDerivatives_Unary
double drcp identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
double negative to original <| MR.GenSimplifyInstructionsOpt1_NoExcl
Double operations not supported unless globalFlags includes enableDoublePrecisionFloatOps.
double rcp identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
Double-precision extensions for 11.1
Double-precision floating point
double-precision floating point division by zero
doubles cannot be used as shader inputs or outputs. If you need to pass a double between shader stages you must pass it as two uints and use asuint and asdouble to convert between forms
dp2add
dp3 which writes alpha cannot co-issue since it uses up both the alpha and color pipes.
dp4 cannot be coissued.
dp4 instruction cannot be co-issued.
drcp_approx float_literal <| SFPS
drcp_approx fp_flags <| SFPS
drcp_approx fp_range <| SFPS
drcp_approx fp_specials <| SFPS
ds_%d_%d
ds_5_0
ds_5_1
DS_StencilRef
dsat float_literal <| SFPS
dsat fp_flags <| SFPS
dsat fp_range <| SFPS
dsplit fp_flags <| SFPS
dsplit fp_specials <| SFPS
dsplit int_literal <| SFPS
Dst modifiers not allowed for vertex shaders.
dsx float_literal <| SFPS
dsx fp_flags <| SFPS
dsx fp_range <| SFPS
dsx fp_specials <| SFPS
dsx_coarse float_literal <| SFPS
dsx_coarse fp_flags <| SFPS
dsx_coarse fp_range <| SFPS
dsx_coarse fp_specials <| SFPS
dsx_fine float_literal <| SFPS
dsx_fine fp_flags <| SFPS
dsx_fine fp_range <| SFPS
dsx_fine fp_specials <| SFPS
dsy float_literal <| SFPS
dsy fp_flags <| SFPS
dsy fp_range <| SFPS
dsy fp_specials <| SFPS
dsy(x)/dz -> dsy(dx/dz) <| SR.GenDerivatives_Unary
dsy_coarse float_literal <| SFPS
dsy_coarse fp_flags <| SFPS
dsy_coarse fp_range <| SFPS
dsy_coarse fp_specials <| SFPS
dsy_fine float_literal <| SFPS
dsy_fine fp_flags <| SFPS
dsy_fine fp_range <| SFPS
dsy_fine fp_specials <| SFPS
dtof float_literal <| SFPS
dtof fp_flags <| SFPS
dtof fp_range <| SFPS
dtof fp_specials <| SFPS
dtof(ftod(x)) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
-dtof(x) -> dtof(-x) <| MR.GenSimplifyInstructionsOpt1_Excl
dtof(x)/dz -> dtof(dx/dz) <| SR.GenDerivatives_Unary
dtoi fp_flags <| SFPS
dtoi int_literal <| SFPS
dtoi int_range <| SFPS
dtoi(itod(x)) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dtou fp_flags <| SFPS
dtou int_literal <| SFPS
dtou int_range <| SFPS
dtou(utod(x)) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
duplicate attribute %s
duplicate macro parameter '%s'
Duplicate non-system value semantic definition: %s and %s
Duplicate system value semantic definition: %s and %s
duplicate usage semantic ignored
duplicate usages specified
Duplicated input semantics can't change type, size, or layout ('%s').
dword
DX9 state '%s' is not supported in %s; convert to '%s' or use compatibility mode to ignore
DX9 state '%s' is not supported in %s; use compatibility mode to ignore
DX9-style '= sampler_state' syntax is deprecated in strict mode
DX9-style assignment syntax is deprecated in technique10 pass blocks in favor of new function call syntax
DX9-style 'compile' syntax is deprecated in strict mode
DX9-style intrinsics are disabled when not in dx9 compatibility mode.
DX9-style 'LHS = <RHS>' syntax is deprecated in strict mode
DXBCPQ
dynamic instruction count calculated by training
dynamic_cast
E #E$
E )E$)E
E ;E@
E SVW
E SVWPh
E$:E(
E$^_[
E$jXW
E(SVW
E,_^[
e0e0e0
E4_^[
Earlier texld instruction used _dz(=_db) modifier on source param. When a phase marker is present, the _dz modifier is only permitted after the phase marker.
Early depth-stencil
earlydepthstencil
edge count between a caller/callee and it's parent
EditAndContinueEnabled
Effect file is too large, try reducing the number of techniques or compiling without debug info
Effects deprecated for D3DCompiler_47
element type of texture too large. Cannot exceed 4 components
ELEMENTINDEX
elements
elements of typed buffers and textures cannot be arrays
elements of typed buffers and textures must fit in four 32-bit quantities
'else' already used for current 'if' construct. Aborting shader validation. 
'else' instruction does not match up to an 'if'. Aborting shader validation. 
else statement doesn't match to an if statement. Opcode #%d (count 1-based). Aborting validation.
else statement seen already.  Opcode #%d (count 1-based). Aborting validation.
Embedded Portable PDB
EMISSIVEMATERIALSOURCE
Emit output arrays <| Explicit
Emit return instructions <| Explicit
emit write masks on sample instructions <| Explicit
emit_stream
emit_then_cut
emit_then_cut_stream
emitting a system-interpreted value which is not written in every execution path of the shader. Unconditional initialization may help. <| A%u (B%u)
emitting a system-interpreted value which may not be written in every execution path of the shader <| A%u (B%u)
enable instancing searches for programs with multiple outputs <| Explicit
enable11_1DoubleExtensions
enable11_1ShaderExtensions
ENABLEADAPTIVETESSELLATION
enableDoublePrecisionFloatOps
enableMinimumPrecision
enableRawAndStructuredBuffers
enableRawAndStructuredBuffers global flag can't be used (not needed) with Compute Shaders.  Opcode #%d (count is 1-based). 
end of file
end of line
End of program reached with incomplete flow control structure.
End of shader reached and '%s' construct was not completed with a '%s'. 
End of shader reached and 'if' construct was not completed with 'else'/'endif'. 
End of shader reached and rep construct was not completed with an endrep. 
End of shader reached without 'ret' to terminate subroutine.
endif
'endif' instruction does not match up to an 'if' or 'else'. Aborting shader validation. 
endif statement doesn't match to an if statement. Opcode #%d (count 1-based). Aborting validation.
endif(a,b) -> append_arg(a,b) <| SMR.RangeDataAnalysis
endif(a,b) -> append_arg(a,b,p_a) <| SMR.DataFlagAnalysis
endloop
'endloop' instruction does not match up to an 'loop'. Aborting shader validation. 
endloop statement doesn't match to a loop statement. Opcode #%d (count 1-based). Aborting validation.
endrep
'endrep' instruction does not match up to a 'rep'. Aborting shader validation. 
endswitch
endswitch statement doesn't match to a switch statement. Opcode #%d (count 1-based). Aborting validation.
EnterCriticalSection
entrypoint
EQUAL
error
error count exceeds %u, aborting
Error creating error string
error location reached from this location
error, duplicate case %u
error, duplicate default in switch statement
error: %s
Error: constant buffer %s has both user-defined offset and compiler-assigned offsets
Error: Effects expression assembly in invalid format!
Error: Effects expression assembly not found!
Error: Error getting Effects expression constant table.
Error: Error getting Effects expression literal block.
Error: Error getting texture shader literal block.
ERROR: Semantic %s is not supported in fx_4_1.
Error: Texture shader assembly not found!
Error: unexpected end of buffer
errorf
errorf 
eval bne on non-nan value <| MR.GenSimplifyInstructionsOpt1_NoExcl
eval eq <| MR.GenSimplifyInstructionsOpt1_NoExcl
eval ge <| MR.GenSimplifyInstructionsOpt1_NoExcl
eval lt <| MR.GenSimplifyInstructionsOpt1_NoExcl
eval mul <| Explicit
Eval range add inf flag if range not bound <| Explicit
Eval range add NaN flag if integer mask says it's possible <| Explicit
eval(
eval_centroid
eval_centroid fp_flags <| SFPS
eval_sample fp_flags <| SFPS
eval_sample_index
eval_snapped
eval_snapped fp_flags <| SFPS
EvaluateAttributeAtSample
EvaluateAttributeCentroid
EvaluateAttributeSnapped
Even Fractional
ewh/?y
Exceeded maximum number or index of output registers. Max allowed for this target is %d.
executable format error
execute
Execute allowed.
exp float_literal <| SFPS
exp fp_flags <| SFPS
exp fp_range <| SFPS
exp fp_specials <| SFPS
exp(a*log(0)) = 0 identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
exp(log(x)) identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
ExpandEnvironmentStringsW
expected %s parameter to be %s, got '%s'
Expected ',', found: '%s'
Expected a component mask which picks any one or 2 components for operand #%d of opcode #%d (counts are 1-based). 
Expected a descriptor range flag value, found: '%s'
Expected a register token (CBV, SRV, UAV, Sampler), found: '%s'
Expected a root descriptor flag value, found: '%s'
Expected a root signature flag value, found: '%s'
Expected component count of 0 for operand #%d of opcode #%d (counts are 1-based). 
Expected component count of 1 (or 4 component with select-1 mode) for operand #%d of opcode #%d (counts are 1-based). 
Expected component count of 4 (or 1 component immediate32, or in certain cases NULL or scalar operand allowed) for operand #%d of opcode #%d (counts are 1-based). 
Expected contiguous component mask starting at x (.x, .xy, .xyz, or .xyzw) for operand #%d of opcode #%d (counts are 1-based). 
Expected double-compatible component mask (xy, zw, or xyzw) for operand #%d of opcode #%d (counts are 1-based). 
Expected double-compatible swizzle for operand #%d of opcode #%d (counts are 1-based). 
Expected nonzero component mask (or in certain cases also NULL or single component output operand allowed) for operand #%d of opcode #%d (counts are 1-based). 
Expected relative address token.  Aborting validation.
Expected sample count > 0 but encountered %d for resource t%d.  Opcode #%d (count is 1-based). 
Expected sample count of 0 but encountered %d for resource t%d.  Opcode #%d (count is 1-based). 
Expected single component mask (or in certain cases also NULL or single component output operand allowed) for operand #%d of opcode #%d (counts are 1-based). 
explicit
export
export has explicitly assigned ordinal
export is CONSTANT
export is DATA
export is forwarder
export is NONAME
export is PRIVATE
export ordinal
expression has a minimum precision type and cannot be marked precise <| A%u (B%u), I%u (B%u)
expressions returning objects in an array or struct not yet implemented
expressions with side effects are illegal as attribute parameters
Extended 11.1 double operations not supported unless globalFlags includes enable11_1DoubleExtensions.
Extended 11.1 shader operations not supported unless globalFlags includes enable11_1ShaderExtensions.
extern
F ;B(
F +C 
F +G 
f!G 3
F!T$$!D$ !T$
F$;F,s%
F(;G$
F(;G(w<r0;
F(RPQ
F,#V(#
F,9F(
f;^0vI
f;_Xs
f;_Xs f
f;~Xs<
f;1t_
f;1tC
f;1tM
f;1tU
f;9ta
f;AXs
f;AXs_
f;BXs
f;C s@
f;D$(w
f;E(r/w$
f;FXr
f;FXs
f;FXs4
f;FXsK
f;GXs1
f;GXs4
f;GXsq
f;HXs
f;K0s
f;NXs
f;O0vV
F;p r
F;p0r
F;q r
F;s r
F;t$$r
F;t$4r
F;t$Hr
F;t$pr
F;t$tr
F;t$xr
F;w r
f;w\t
F;w8r
F;wLr
F;wTr
f;wXs
f;wXs-
f;wXs^
F`Pj@
F<;A<s
F<;B<s
F<9F4
F=RSDSu]
F0;F8
F0;G,u|
f16tof32
f16tof32 bits_known <| SFPS
f16tof32 float_literal <| SFPS
f16tof32 fp_flags <| SFPS
f16tof32(i) -> conversion sequence <| MR.Gen_RequiredTranslate
f1J ^[
f32tof16
f32tof16 fp_flags <| SFPS
f32tof16 int_literal <| SFPS
f32tof16 int_range <| SFPS
f32tof16(i) -> conversion sequence <| MR.Gen_RequiredTranslate
f3J _f
F4;F<
F4+F0
F8+F0
F'8V&
f9A"u
f9ABu
f9F4u
f9H"u
faceforward
Failed compiling 10_level_9 PS version of the library function '%s'.
Failed compiling 10_level_9 VS version of the library function '%s'.
Failed to extract driver shader code.
Failed to extract input signature.
Failed to extract output signature.
Failed to extract patch constant signature.
Failed to log error, redirecting to debug output:
failed to open source file: '%s'
Failed to parse shader using reference shader parser: 0x%x
Fall-throughs in switch statements are not allowed.
false
far return
fastopt
fcall
fcall fp_flags <| SFPS
fcall statement not referencing an interface.  Opcode #%d (count 1-based).
fcall statement referencing an out of bounds function index (%d).  Opcode #%d (count 1-based).
fcall statement referencing an undeclared interface (%d).  Opcode #%d (count 1-based).
fcbody fp_flags <| SFPS
FCIAddFile
FCICreate
FCIDestroy
FCIFlushCabinet
Fd;F\
FDICopy
FDICreate
FDIDestroy
feature
FFACE
ffff40
FH;GHu
FH_[^
FH_^[
Fh9Fd
fHasEH
fHasSEH
FHSW3
file error
file exists
file too large
FileDescription
fileName
filename too long
FileVersion
FILLMODE
FillMode
Filter
FILTER
filter
FILTER_ANISOTROPIC
FILTER_COMPARISON_ANISOTROPIC
FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT
FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR
FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT
FILTER_COMPARISON_MIN_MAG_MIP_LINEAR
FILTER_COMPARISON_MIN_MAG_MIP_POINT
FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR
FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT
FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR
FILTER_MAXIMUM_ANISOTROPIC
FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT
FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR
FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT
FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR
FILTER_MAXIMUM_MIN_MAG_MIP_POINT
FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR
FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT
FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR
FILTER_MIN_LINEAR_MAG_MIP_POINT
FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR
FILTER_MIN_MAG_LINEAR_MIP_POINT
FILTER_MIN_MAG_MIP_LINEAR
FILTER_MIN_MAG_MIP_POINT
FILTER_MIN_MAG_POINT_MIP_LINEAR
FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT
FILTER_MIN_POINT_MAG_MIP_LINEAR
FILTER_MINIMUM_ANISOTROPIC
FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT
FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR
FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT
FILTER_MINIMUM_MIN_MAG_MIP_LINEAR
FILTER_MINIMUM_MIN_MAG_MIP_POINT
FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR
FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT
FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR
final static size of live function, after inlining
finalLine*TessFactor requires ISOLINE tessellator domain.  Opcode #%d (count is 1-based). 
finalLineDensityTessFactor
finalLineDensityTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalLineDensityTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalLineDetailTessFactor
finalLineDetailTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalLineDetailTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalQuad*TessFactor requires QUAD tessellator domain.  Opcode #%d (count is 1-based). 
finalQuadUeq0EdgeTessFactor
finalQuadUeq0EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalQuadUeq0EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalQuadUeq1EdgeTessFactor
finalQuadUeq1EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalQuadUeq1EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalQuadUInsideTessFactor
finalQuadUInsideTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalQuadUInsideTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalQuadVeq0EdgeTessFactor
finalQuadVeq0EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalQuadVeq0EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalQuadVeq1EdgeTessFactor
finalQuadVeq1EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalQuadVeq1EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalQuadVInsideTessFactor
finalQuadVInsideTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalQuadVInsideTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalTri*TessFactor requires TRI tessellator domain.  Opcode #%d (count is 1-based). 
finalTriInsideTessFactor
finalTriInsideTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalTriInsideTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalTriUEdgeTessFactor
finalTriUeq0EdgeTessFactor
finalTriUeq0EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalTriUeq0EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalTriVEdgeTessFactor
finalTriVeq0EdgeTessFactor
finalTriVeq0EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalTriVeq0EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalTriWEdgeTessFactor
finalTriWeq0EdgeTessFactor
finalTriWeq0EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalTriWeq0EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finite a + -a -> append_arg(0) <| SMR.RangeDataAnalysis
first
First arithmetic instruction cannot have co-issue ('+') set; there is no previous arithmetic instruction to pair with.
First source for cnd instruction must be 'r0.a'.
First source param for SGN cannot be the same register as the second or third params.
First source parameter for bem must be temp (r#) or constant (c#) register.
First source parameter for texld can't specify min precision unless shader is from D3D10+ target.
First source parameter for texld must be temp (r#) or texture coordinate input(t#) register.
First source parameter for texld* must be temp (r#), input (v#) or constant (c#) register.
First source parameter for texldl must be temp (r#), input (v#) or const (c#) register.
firstbit*(x) != -1 -> x != 0 <| MR.GenSimplifyInstructionsOpt1_NoExcl
firstbit*(x) == -1 -> x == 0 <| MR.GenSimplifyInstructionsOpt1_NoExcl
firstbit_hi
firstbit_hi bits_known <| SFPS
firstbit_hi fp_flags <| SFPS
firstbit_hi int_literal <| SFPS
firstbit_hi(i) -> shift/bine/add sequence <| MR.Gen_RequiredTranslate
firstbit_lo
firstbit_shi
firstbit_shi bits_known <| SFPS
firstbit_shi fp_flags <| SFPS
firstbit_shi int_literal <| SFPS
firstbit_shi(i) -> shift/bine/add sequence <| MR.Gen_RequiredTranslate
firstbithigh
firstbitlow
firstbitlow bits_known <| SFPS
firstbitlow fp_flags <| SFPS
firstbitlow int_literal <| SFPS
firstbitlow(i) -> shift/bine/add sequence <| MR.Gen_RequiredTranslate
FIXUP
FkF3PQL
FL;BLv
FL;GL_
Flag specified was exclusively a parse flag and not a compile flag
flags
Flags parameter is invalid
Flags specified both compatibility and strict mode. These are mutually exclusive
flatten
float
float '%g'
float '%gf'
float '%gh'
float '%gl'
float constant
float d(1/x)/dz -> -dx/dz/x^2 <| SR.GenDerivatives_Unary
float1
float1x1
float1x2
float1x3
float1x4
float2
float2x1
float2x2
float2x3
float2x4
float3
float3x1
float3x2
float3x3
float3x4
float4
float4x1
float4x2
float4x3
float4x4
floating point division by zero
floating-point value out of integer range for conversion: %f
floating-point value out of unsigned range for conversion: %f
floor
floor float_literal <| SFPS
floor fp_flags <| SFPS
floor fp_range <| SFPS
floor fp_specials <| SFPS
flow control depth too deep to emit function call
flow control depth too deep to honor call or forcecase attribute
FLw#t
FLw6tP
fma can only be used with double arguments
FOG must be a scalar
FOGCOLOR
FOGDENSITY
FOGENABLE
FOGEND
FOGSTART
FOGTABLEMODE
FOGVERTEXMODE
for better compilation results, consider re-enabling rule "%s"
for better compilation results, consider re-enabling rule 0x%08x
For Compute Shader versions < 5_0, the element count for all Structured Thread Group Shared Memory declarations 
For Compute Shader versions < 5_0, with %d threads in a group, at most %d bytes per thread of Thread Group Shared Memory 
For ps_1_2 or ps_1_3, the cmp or dp4 instructions cannot have a source register the same as the destination register.
forcecase
forced to unroll loop, but unrolling failed.
ForceDebuggable
forceEarlyDepthStencil
ForceShaderSkipOptimization
Format
Format for address register must be a0.x.
fourth
Fp;Fh
fractional_even
fractional_odd
fragment info exceeds maximum comment size
Frame data for enclosing function.
frame pointer present
frame size
Frame.
FrameData
frameFunc
frc float_literal <| SFPS
frc fp_flags <| SFPS
frc fp_range <| SFPS
frc fp_specials <| SFPS
FRC of add with integer can bypass add <| Explicit
frc(a + int) = frc(a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
FreeLibrary
frexp
friend
FRONT
FrontCounterClockwise
FrontEndBuild
FrontEndMajor
FrontEndMinor
FrontEndQFE
FrontFaceStencilDepthFail
FrontFaceStencilFail
FrontFaceStencilFunc
FrontFaceStencilPass
Ft @;
FT t,
FT t+
FT tU
FT@t 
FT@t;Q
FT@t<Q
FT@tV
FT3GT
FtAon9$
ftob fp_flags <| SFPS
ftob int_literal <| SFPS
ftob int_range <| SFPS
ftob(trunc(btof(x))) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ftod float_literal <| SFPS
ftod fp_flags <| SFPS
ftod fp_range <| SFPS
ftod fp_specials <| SFPS
-ftod(x) -> ftod(-x) <| MR.GenSimplifyInstructionsOpt1_Excl
ftod(x)/dz -> ftod(dx/dz) <| SR.GenDerivatives_Unary
ftoi fp_flags <| SFPS
ftoi int_literal <| SFPS
ftoi int_range <| SFPS
ftoi(itof(x)) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ftou fp_flags <| SFPS
ftou int_literal <| SFPS
ftou int_range <| SFPS
ftou(utof(x)) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
FtXNAP
FtXNAS
funcStart
Function
function
function '%s' missing implementation
function body (%d) already declared. Opcode #%d (count 1-based). 
function body (%d) defined without being declared. Opcode #%d (count 1-based). 
function body (%d) referenced without being defined. Opcode #%d (count 1-based). 
function body (%d) was never defined.
function body (%d) was never referenced.
function name
function not supported
function parameters
function table (%d) already declared. Opcode #%d (count 1-based). 
function table (%d) was declared, but never referenced.
function_endif(a) -> append_arg(a, pred_a) <| SMR.DataFlagAnalysis
function_endif(a,b) -> append_arg(a,b,p_a) <| SMR.DataFlagAnalysis
functional defines in preprocessor expressions not yet implemented
functionif fp_flags <| SFPS
functionStart
fUsesBP
FVWVWh
fwidth
FwQte
Fx@;Ft
fx_2_0
fx_4_0
fx_4_1
fx_5_0
Fx9^dvT
fxgroup
fxl_2_0
fxl_4_0
G ;A s
G ;C 
G ;C s
G ;F u?
G ;F uM
G _^Y]
G `I:
G +B 
G +C ^_
G +F _^]
G C@;
G$;F$u7
G$@t5
G(;C(
G(;C(uV
G(;F(u
G(VPRQ
G,:F,uE
G,;C,uF
G,^_[
G;{8r
G;|$Xr
G;~ r
G;~(r
G;~,r
G;~4r
G;~Lr
G;~PsY;}
G@;C@t
G@QPh
G@QPj
G@QPVV
G\ ^t
G\ u$
G\@^t
G\@u$
G< ^t
G< u$
G<;C<u
G<;H$
G<@^t
G<@tE
G<@u$
G0;Ads
G0;B0tf
G0;F0u=
G0;G,s
G0;G8u
G0_^3
G0c0n0
G0e0s0{0
G0SVP
G0u0S
G4 ^t
G4 u$
G4;F4u5
G4;G<t
G4^9E
G4_^[
G4+G,
G8;C8u
G8+G4
G82C8$
Gather
gather2d fp_flags <| SFPS
gather2d_a fp_flags <| SFPS
gather2d_a_o fp_flags <| SFPS
gather2d_a_o_s fp_flags <| SFPS
gather2d_o fp_flags <| SFPS
gather2d_o_s fp_flags <| SFPS
gather4
gather4_c
gather4_c_s
gather4_po
gather4_po_c
gather4_po_c_s
gather4_po_s
gather4_s
GatherAlpha
GatherAlpha requires shader model 5 or higher
GatherBlue
GatherBlue requires shader model 5 or higher
GatherCmp
GatherCmpAlpha
GatherCmpBlue
GatherCmpGreen
GatherCmpRed
gathercube fp_flags <| SFPS
gathercube_a fp_flags <| SFPS
gathercube_a_s fp_flags <| SFPS
gathercube_c fp_flags <| SFPS
gathercube_c_a fp_flags <| SFPS
gathercube_c_a_s fp_flags <| SFPS
gathercube_c_s fp_flags <| SFPS
gathercube_s fp_flags <| SFPS
GatherGreen
GatherGreen requires shader model 5 or higher
GatherRed
GAUSSIANQUAD
Gd ^t
Gd u$
Gd@^t
Gd@u$
ge float_literal <| SFPS
ge fp_flags <| SFPS
ge fp_range <| SFPS
ge of known range reduction <| Explicit
ge(a, b) -> cmp(a - b, 1f, 0f) <| MR.Gen_RequiredTranslate
GenerateMips
GenerateMips is not supported in %s
generic
GEOMETRY
GeometryShader
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetDimensions
GetEnvironmentVariableA
GetFileAttributesW
GetFileSize
GetFileSizeEx
GetFileType
GetFullPathNameA
GetFullPathNameW
GetLastError
GetModuleFileNameA
GetNativeSystemInfo
GetProcAddress
GetProcessHeap
GetRenderTargetSampleCount
GetRenderTargetSamplePosition
GetSamplePosition
GetSystemInfo
GetSystemTimeAsFileTime
gfff+
gfff+M
gfffS
gfffW
Gh ^t
Gh u$
GH;GLt
Gh@^t
Gh@u$
GH_^[
Gh+Gd
GhV9E
GHWXYZ
GL tf
Global flags already declared once.  Opcode #%d (count is 1-based). 
global variables
global variables are implicitly constant, enable compatibility mode to allow modification
global variables are implicitly constant, variables of classes with interface inheritance can never be modified
globallycoherent
globallycoherent can only be used with Unordered Access View buffers
globallycoherent cannot be used with append/consume buffers
GOURAUD
GP+GL
GP9GX
gradient instruction used in a loop with varying iteration, attempting to unroll the loop
gradient instruction used in a loop with varying iteration; partial derivatives may have undefined value
gradient operation uses a value that may not be defined for all pixels (in %s UAV loads can not participate in gradient operations)
gradient-based operations must be moved out of flow control to prevent divergence. Performance may improve by using a non-gradient operation
GREATER
GREATER_EQUAL
GREATEREQUAL
GREEN
Group shared data for %s must be an array of elements
Group shared data for %s must have a count of elements (%u) equal to the number of threads in the thread group (%u)
Group shared data for %s must have an element size (%u) of at most %u bytes when compiling for %u theads
GroupMemoryBarrier
GroupMemoryBarrierWithGroupSync
groupshared
groupshared variables cannot contain resources such as textures, samplers or UAVs
GS has no input primitive, so no input regisers may be declared.  Input v[][%d] was declared.
GS Input
GS input primID already declared.  Opcode #%d (count is 1-based). 
GS input primitive already declared.  Opcode #%d (count is 1-based). 
GS input primitive can be a patch only if the GS version is gs_5_0 and greater.  Opcode #%d (count is 1-based). 
GS input primitive not declared. 
GS input primitive unrecognized.  Opcode #%d (count is 1-based). 
GS instance count already declared.  Opcode #%d (count is 1-based). 
GS instance count declaration cannot be greater than %d (%d specified).  Opcode #%d (count is 1-based). 
GS instance count must be at least 1
GS instance count must be at least 1 (%d specified).  Opcode #%d (count is 1-based). 
GS instance ID already declared.  Opcode #%d (count is 1-based). 
GS output primitive topology unrecognized.  Opcode #%d (count is 1-based). 
GS output topology already declared.  Opcode #%d (count is 1-based). 
GS output topology in stream m%d already declared.  Opcode #%d (count is 1-based). 
GS output topology not declared for stream m%d. 
GS output vertex count declaration can't be more than %d vertices (%d specified).  Opcode #%d (count is 1-based). 
gs_%d_%d
gs_4_0
gs_4_1
gs_5_0
gs_5_1
GT@t{hx
GT3BT
GT3CT
gw t=
GXtbj
h    
H#E$P
H#E<P
H$F;s
H$F;w
H$J#U
H(;K$
H*0"ZOW
H,B;Q
h./01hhhhh22234
H4j4(565
hAon9
has valid PGO counts
hasAlloca
HasAssignmentOperator
hasAsynchronousEH
hasC++EH
HasCastOperator
hasDebugInfo
HashDigestLength
hasInlineAssembly
hasLongJump
hasManagedCode
HasNestedTypes
hasSecurityChecks
hasSetJump
hasStructuredEH
hCLI4
hCRPT
hCTAB
header crc mismatch
HeapAlloc
HeapCreate
HeapDestroy
HeapFree
height
hex value truncated to 64 bits
HFA double
HFA float
hFX10
hhhKTMUVVWWhXYZ[\]^_`abcdefg
hISG1
hISGN
hISGNj
hLFS0
hLIBH
hlsl_full_path
HLSL_VERSION
hlslDefines
hlslEntry
hlslFlags
hlslTarget
Hoist predicated code into outermost predicate <| Explicit
hOSG1
hOSG5
hOSGN
hOSGNj
host unreachable
hPCSG
hPCSGj
HPQhh
HPQhP
hPSG1
hRDEF
HRESULT
hRPLY
hRTS0
hs_%d_%d
hs_5_0
hs_5_0 control point
hs_5_0 patch constant
hs_5_1
hs_control_point_phase
hs_decls
hs_fork_phase
hs_join_phase
hSDBG
hSDTL
hSFI0
hSHDR
hSHEX
hSMID
hSPDB
hSTAT
Hull Shader declared with IsoLine Domain must specify output primitive point or line. triangle_cw or triangle_ccw output are not compatible with the IsoLine Domain.
Hull Shader declared with Quad Domain must specify output primitive point, triangle_cw or triangle_ccw. line output is not compatible with the Quad domain.
Hull Shader declared with Tri Domain must specify output primitive point, triangle_cw or triangle_ccw. line output is not compatible with the Tri domain.
Hull Shader declsphase must declare a tessellator domain.
Hull Shader declsphase must declare a tessellator output primitive.
Hull Shader declsphase must declare a tessellator partitioning.
Hull Shader declsphase must declare an input control point count.
Hull Shader declsphase must declare an output control point count.
Hull Shader Fork Phase Instance Count already declared in this phase. Aborting.  Opcode #%d (count is 1-based). 
Hull Shader Fork Phase Instance Count must be [%d..%d].  %d specified.  Opcode #%d (count is 1-based). 
Hull Shader fork phase instance ID already declared.  Opcode #%d (count is 1-based). 
Hull Shader Fork Phase reads component(s) of output control point [%d] which were not output by the Control Point Phase.
Hull Shader input control point count already declared. Aborting.  Opcode #%d (count is 1-based). 
Hull Shader Join Phase Instance Count already declared in this phase. Aborting.  Opcode #%d (count is 1-based). 
Hull Shader Join Phase Instance Count must be [%d..%d].  %d specified.  Opcode #%d (count is 1-based). 
Hull Shader join phase instance ID already declared.  Opcode #%d (count is 1-based). 
Hull Shader Join Phase reads component(s) of output control point [%d] which were not output by the Control Point Phase.
Hull Shader MaxTessFactor must be [%f..%f].  %f specified.  Opcode #%d (count is 1-based). 
Hull Shader must start with HSDecls phase.
Hull Shader output control point count already declared. Aborting.  Opcode #%d (count is 1-based). 
Hull Shader output control point ID already declared.  Opcode #%d (count is 1-based). 
Hull Shader output max tessfactor already declared. Aborting.  Opcode #%d (count is 1-based). 
HullShader
hw t?
hw8t3
hXNAP
hXNAS
I ;H 
i + (I - i) -> append_arg(I) <| SMR.RangeDataAnalysis
i + -i -> append_arg(0) <| SMR.RangeDataAnalysis
I#L$L
i%d already def'd in the shader. 
i%d.w has no meaning; it must simply be 0. 
i%d.x (which represents loop or rep iteration count) cannot be greater than %d. i%d.x is currently def'd as %d. 
i%d.x (which represents loop or rep iteration count) cannot be negative. i%d.x is currently def'd as %d. 
i%d.x (which represents rep iteration count) cannot be greater than %d. i%d.x is currently def'd as %d. 
i%d.x (which represents rep iteration count) cannot be negative. i%d.x is currently def'd as %d. 
i%d.y (which represents loop initial value) must be in the range [0, %d]. i%d.y is currently def'd as %d. 
i%d.yzw have no meaning in this shader model; they must simply be 0. 
i%d.z (which represents loop step value) must be in the range [-%d, %d]. i%d.z is currently def'd as %d. 
I<;9v
I0;Hds
i0|0|1
I0b5y5.6
i0F1P1
I3T$H3
iadd bits_known <| SFPS
iadd fp_flags <| SFPS
iadd int_literal <| SFPS
iadd int_range <| SFPS
iadd zero reduces to no-op mov <| MR.GenSimplifyInstructionsOpt1_NoExcl
iadd(a, b) : if( and_is_zero(a, b) ) -> or(a, b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ibfe bits_known <| SFPS
ibfe fp_flags <| SFPS
ibfe int_literal <| SFPS
ibfe(i) -> extraction sequence <| MR.Gen_RequiredTranslate
ibfe(w, o, ((uint)a >> s) & m) : if( w + o + s < 32 ) -> ibfe(w, o + s, a & (m << s)) <| MR.GenSimplifyInstructionsOpt1_Excl
ibfe(w, o, (a >> s) & m) : if( o + s < 32 ) -> ibfe(w, o + s, a & (m << s)) <| MR.GenSimplifyInstructionsOpt1_Excl
ibfe(w, o, (uint)a >> s) : if( o + s + w < 32 ) -> ibfe(w, o + s, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ibfe(w, o, a >> s) : if( o + s < 32 ) -> ibfe(w, o + s, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ibfe(w, o, a) >> s : if( o + s < 32 && w >= s ) -> ibfe(w - s, o + s, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ID of base symbol for base pointer
ID of the register holding base pointer to locals
ID of the register holding base pointer to parameters
ID3D10Effect::ParseSODecl - invalid mask declaration '%s'
ID3D10Effect::ParseSODecl - Invalid output slot
ID3D10Effect::ParseSODecl - Non-digit '%c' in output slot
ID3D11FunctionLinkingGraph::CallFunction: %s::%s function has non-matching prototypes (different parameter counts)
ID3D11FunctionLinkingGraph::CallFunction: %s::%s function has non-matching prototypes (parameter %u)
ID3D11FunctionLinkingGraph::CallFunction: a function cannot be called after the output signature has been set
ID3D11FunctionLinkingGraph::CallFunction: function '%s' input parameter %u has unsupported register mapping
ID3D11FunctionLinkingGraph::CallFunction: function '%s' output parameter %u has unsupported register mapping
ID3D11FunctionLinkingGraph::CallFunction: function '%s' prototype is not found in the module
ID3D11FunctionLinkingGraph::CallFunction: function name cannot be empty
ID3D11FunctionLinkingGraph::CallFunction: NULL parameter
ID3D11FunctionLinkingGraph::CreateModuleInstance: FLG has no nodes
ID3D11FunctionLinkingGraph::CreateModuleInstance: FLG module instance has already been created
ID3D11FunctionLinkingGraph::CreateModuleInstance: NULL parameter
ID3D11FunctionLinkingGraph::CreateModuleInstance: uninitialized parameter #%u component '%c' passed to function '%s::%s' at call site #%u
ID3D11FunctionLinkingGraph::CreateModuleInstance: uninitialized shader output signature parameter #%u, component '%c'
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: %s parameter component '%c' is not defined
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: bad destination swizzle '%s'
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: bad source swizzle '%s'
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: cannot pass values for parameters of type void
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: destination parameter component '%c' has already been initialized
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: destination parameter must be an INOUT or IN parameter
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: destination swizzle '%s' cannot have replicated components
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: illegal character in the swizzle string '%s'
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: illegal destination parameter index
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: illegal source parameter index
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: incompatible column dimensions
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: incompatible element types
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: incompatible row dimensions
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: incompatible type classes
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: NULL parameter
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: possible loss of precision when passing value from <%u, %d> to <%u, %d> (<NodeId, ParamId>)
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: source node must preceed destination node in FLG
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: source parameter must be an INOUT or OUT parameter
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: source value has too few components
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: swizzle is not supported for matrices
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: swizzle string cannot be empty
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: value must be consumed by an input parameter
ID3D11FunctionLinkingGraph::PassValueWithSwizzle: value must be produced by an output parameter
ID3D11FunctionLinkingGraph::SetInputSignature: input signature has already been set
ID3D11FunctionLinkingGraph::SetInputSignature: input signature has duplicate parameter names/semantics
ID3D11FunctionLinkingGraph::SetInputSignature: input signature must be the first FLG node
ID3D11FunctionLinkingGraph::SetInputSignature: NULL parameter
ID3D11FunctionLinkingGraph::SetInputSignature: too many parameters (%u) in the input signature (max=%u)
ID3D11FunctionLinkingGraph::SetOutputSignature: input and output signatures have duplicate parameter names
ID3D11FunctionLinkingGraph::SetOutputSignature: NULL parameter
ID3D11FunctionLinkingGraph::SetOutputSignature: output signature has already been specified
ID3D11FunctionLinkingGraph::SetOutputSignature: output signature has duplicate parameter names/semantics
ID3D11FunctionLinkingGraph::SetOutputSignature: output signature must be the last FLG node
ID3D11FunctionLinkingGraph::SetOutputSignature: too many parameters (%u) in the output signature (max=%u)
ID3D11FunctionLinkingGraph::SetSignature: illegal name for parameter %u
ID3D11FunctionLinkingGraph::SetSignature: illegal semantic name for parameter %u
ID3D11FunctionLinkingGraph::SetSignature: illegal type for parameter %u
ID3D11FunctionLinkingGraph::SetSignature: NumColums must be between 1 and 4 for parameter %u
ID3D11FunctionLinkingGraph::SetSignature: NumRows must be between 1 and 4 for parameter %u
ID3D11FunctionLinkingGraph::SetSignature: unknown class for parameter %u
ID3D11FunctionLinkingGraph::SetSignature: unknown interpolation mode for parameter %u
ID3D11Linker::AddClipPlaneFromCBuffer: cbuffer entry index is too large (max=%u)
ID3D11Linker::AddClipPlaneFromCBuffer: cbuffer slot index is too large (max=%u)
ID3D11Linker::AddClipPlaneFromCBuffer: clipplane for cbuffer %u entry %u has already been specified
ID3D11Linker::AddClipPlaneFromCBuffer: the maximum allowed number of clipplane fron a cbuffer is %u
ID3D11Linker::Link: %s semantic '%s' can only have one row and number of components between [%u,%u]
ID3D11Linker::Link: %s sematic %s number must be in range [%u, %u] for shader target '%s'
ID3D11Linker::Link: a duplicate resource names (%s) are not allowed (use namespaces to disambiguate)
ID3D11Linker::Link: all components of %s semantic '%s' must be initialized by '%s' shaders
ID3D11Linker::Link: bad %s semantic name '%s'
ID3D11Linker::Link: Cannot use clipplanes attribute without specifying a 4-component SV_Position output
ID3D11Linker::Link: cbuffer (size=%u) remapping <vslot %u>-><slot %u, offset %u> in function '%s::%s' exceeds the maximum cbuffer size (%u)
ID3D11Linker::Link: cbuffer slot %u in function '%s::%s' maps to real slot %u that is too big (max=%u)
ID3D11Linker::Link: clipplanes can only specified for Vertex shaders
ID3D11Linker::Link: failed to generate byte code
ID3D11Linker::Link: failed to pack %s signature
ID3D11Linker::Link: failed to remap SRV to UAV (slot=%u)
ID3D11Linker::Link: function '%s::%s' byte code (version '%u.%u') cannot be used for the requested shader target '%s'
ID3D11Linker::Link: function '%s::%s' is missing a legacy shader blob necessary to link '%s' target
ID3D11Linker::Link: function '%s::%s' is not found in registered module instances
ID3D11Linker::Link: function '%s::%s' legacy byte code (version '%u.%u') cannot be used to link shader target '%s'
ID3D11Linker::Link: function '%s::%s' prototype and signature flags do not match for parameter %u
ID3D11Linker::Link: function '%s::%s' prototype and signature semantics do not match for parameter %u
ID3D11Linker::Link: function '%s::%s' prototype and signature types do not match for parameter %u
ID3D11Linker::Link: function '%s::%s' prototype does not match function signature
ID3D11Linker::Link: illegal remapping specified for resource slot range [%u, %u] in function '%s::%s'
ID3D11Linker::Link: illegal remapping specified for sampler slot range [%u, %u] in function '%s::%s'
ID3D11Linker::Link: illegal remapping specified for UAV slot range [%u, %u] in function '%s::%s'
ID3D11Linker::Link: immediate cbuffer (%u entries) exceeds the limit of %u entries
ID3D11Linker::Link: input semantic '%s' cannot be read by '%s' shaders
ID3D11Linker::Link: integer types must have constant interpolation mode for %s semantic '%s'
ID3D11Linker::Link: invalid %s SV_ semantic '%s' for shader target '%s'
ID3D11Linker::Link: invalid class specified for %s semantic '%s'
ID3D11Linker::Link: invalid interpolation mode specified for %s semantic '%s'
ID3D11Linker::Link: invalid type specified for %s semantic '%s'
ID3D11Linker::Link: not enough temporary registers (max=%u).
ID3D11Linker::Link: NULL parameter
ID3D11Linker::Link: only one Depth sematic can be spesified for shader target '%s'
ID3D11Linker::Link: output semantic '%s' cannot be written by '%s' shaders
ID3D11Linker::Link: overlapping %s sematics %s are not supported
ID3D11Linker::Link: pixel shaders cannot declare arbitrary output semantics ('%s')
ID3D11Linker::Link: remapping has not been specified for cbuffer slot %u in function '%s::%s'
ID3D11Linker::Link: remapping has not been specified for resource slot %u
ID3D11Linker::Link: remapping has not been specified for UAV slot %u
ID3D11Linker::Link: remapping of resource (slot %u) to UAV (slot %u) in function '%s::%s' is allowed only for buffers
ID3D11Linker::Link: remapping of resource (slot %u) to UAV (slot %u) is allowed only for buffers
ID3D11Linker::Link: resource slot %u maps to real resource slot %u that is too big (max=%u)
ID3D11Linker::Link: resource slot %u maps to real UAV slot %u that is too big (max=%u)
ID3D11Linker::Link: several UAVs/SRVs with incompatible properties map to slot %u
ID3D11Linker::Link: several virtual resources with incompatible properties map to real %s slot %u
ID3D11Linker::Link: several virtual samplers with incompatible sampler modes map to slot %u
ID3D11Linker::Link: SV_ClipDistance and SV_CullDistance occupy %u %s registers, only two are allowed
ID3D11Linker::Link: SV_ClipDistance semantics cannot be used when using the clipplanes attribute
ID3D11Linker::Link: SV_Target outputs must be contiguous from SV_Target0 to SV_TargetN for shader target '%s'
ID3D11Linker::Link: the number of sample entries exceeded the limit of %u
ID3D11Linker::Link: the shader requires %u defb constants, which exceeds the allowed limit of %u
ID3D11Linker::Link: the shader requires %u defc constants, which exceeds the allowed limit of %u
ID3D11Linker::Link: the shader requires %u defi constants, which exceeds the allowed limit of %u
ID3D11Linker::Link: total number of registers %u exceeds %u.
ID3D11Linker::Link: UAV slot %u maps to real slot %u that is too big (max=%u)
ID3D11Linker::Link: validation error:  %s
ID3D11Linker::SetEntry: entry cannot be NULL
ID3D11Linker::SetEntry: entry has already been set
ID3D11Linker::SetEntry: only FLG and cs_5_0 entries are supported currently
ID3D11Linker::SetEntry: shader target name cannot be NULL
ID3D11Linker::SetEntry: unsupported shader target '%s'
ID3D11Linker::UseLibraryWithNamespace: NULL parameter
ID3DXEffectCompiler: Arrays must be either numeric, structure, string or shader
ID3DXEffectCompiler: Assignment cannot be a structure
ID3DXEffectCompiler: Can't set shader'
ID3DXEffectCompiler: Compilation failed
ID3DXEffectCompiler: DMAPOFFSET sampler state can only be used with D3DDMAPSAMPLER (i.e. sampler index 256)
ID3DXEffectCompiler: Dword expressions for state '%s' must evaluate to NULL
ID3DXEffectCompiler: Error in type checking
ID3DXEffectCompiler: Error initializing annotation type
ID3DXEffectCompiler: Error initializing assignment type
ID3DXEffectCompiler: Error initializing variable type
ID3DXEffectCompiler: FVFs must not evaluate to NULL
ID3DXEffectCompiler: Geometry shader can only be set in fx_4_0 or higher.'
ID3DXEffectCompiler: Index is required for state '%s'
ID3DXEffectCompiler: Initializer list elements cannot be complex expressions or variables
ID3DXEffectCompiler: Initializers must be numeric scalars
ID3DXEffectCompiler: Internal error initializing assignment - missing type case
ID3DXEffectCompiler: Internal Error: Unexpected state.
ID3DXEffectCompiler: Invalid integer expression assignment
ID3DXEffectCompiler: Invalid sampler index %d
ID3DXEffectCompiler: Max index for effect state '%s' is %d
ID3DXEffectCompiler: Only numeric types and strings are allowed as annotations
ID3DXEffectCompiler: Only numeric types are allowed inside structures
ID3DXEffectCompiler: Only pass allowed within a technique
ID3DXEffectCompiler: State '%s' accepts only dwords and ids
ID3DXEffectCompiler: State '%s' cannot be assigned an array or structure
ID3DXEffectCompiler: State '%s' does not accept '%s' as a value
ID3DXEffectCompiler: State '%s' is not indexed
ID3DXEffectCompiler: State '%s' must be assigned a 3-vector or a 4-vector or a uint scalar
ID3DXEffectCompiler: State '%s' must be assigned a numeric scalar or a 4-float vector
ID3DXEffectCompiler: State '%s' must be assigned a numeric value
ID3DXEffectCompiler: State '%s' must be assigned a scalar
ID3DXEffectCompiler: State '%s' was assigned an incompatible type
ID3DXEffectCompiler: State '%s' was assigned an unsupported value
ID3DXEffectCompiler: State '%s' was not assigned a sampler type
ID3DXEffectCompiler: State '%s' was not assigned a stateblock type
ID3DXEffectCompiler: State '%s' was not assigned a texture type
ID3DXEffectCompiler: There was a problem getting annotations
ID3DXEffectCompiler: There was a problem getting variable type
ID3DXEffectCompiler: There was a problem in the parse tree
ID3DXEffectCompiler: There was an error initializing parameter annotation handles
ID3DXEffectCompiler: There was an error initializing parameter handles
ID3DXEffectCompiler: There was an error initializing pass annotation handles
ID3DXEffectCompiler: There was an error initializing technique annotation handles
ID3DXEffectCompiler: There was an error initializing the compiler
ID3DXEffectCompiler: There were no techniques
ID3DXEffectCompiler: This sampler is used with a DX10-style texture intrinsic. This is not implemented in this version of the compiler.
ID3DXEffectCompiler: Unexpected component type
ID3DXEffectCompiler: Unexpected error
ID3DXEffectCompiler: Unexpected node encountered when trying to determine type
ID3DXEffectCompiler: Unexpected template type
ID3DXEffectCompiler: Unexpected value type of state '%s' (internal error)
ID3DXEffectCompiler: Unrecognized state '%s'
ID3DXEffectCompiler: Unsupported sampler or stateblock expression (static usage not supported).
ID3DXEffectCompiler::CompileEffect: Could not compile expression containing shader array
ID3DXEffectCompiler::CompileEffect: Only 1-d shader arrays allowed
ID3DXEffectCompiler::CompileEffect: Shader arrays index %d out of bounds [0, %d]
ID3DXEffectCompiler::CompileEffect: Shader arrays index was not float or int
ID3DXEffectCompiler::CompileEffect: Shader arrays must be a previously defined parameter
ID3DXEffectCompiler::CompileEffect: There was an error compiling expression
ID3DXEffectCompiler::CompileEffect: There was an error compiling HLL shader parameter
ID3DXEffectCompiler::CompileEffect: Unrecognized value type
Identifier invalid or not found (were you attempting a forward reference?)
identifier removed
IDirect3DShaderValidator9::Begin called out of order. ::End must be called first.
IDirect3DShaderValidator9::End called out of order. Call to ::Begin, followed by calls to ::Instruction must occur first.
IDirect3DShaderValidator9::Instruction called out of order. ::Begin must be called first.
IDirect3DShaderValidator9::Instruction called out of order. After end token there should be no more instructions.  Call ::End next.
IDirect3DShaderValidator9::Instruction called with NULL == pdwInst or 0 == cdw.
idiv bits_known <| SFPS
idiv currently not supported (instruction deprecated). For now, try using unsigned int types for div instead
idiv fp_flags <| SFPS
idiv int_literal <| SFPS
idiv int_range <| SFPS
IEEE-safe mode clamps float literals to 32-bit values, %g is losing precision (this warning will only be shown once per compile)
if statement conditional expressions must evaluate to a scalar
if statement was flattened due to nesting limits but it contains side effects and can't be flattened
if(!a) -> ifn(a) <| MR.GenD3D10PostMod_Both
if(A){B = A ? C : D} -> if(A){B = C} <| Explicit
if(bieq(x,0)) -> ifn(x) <| MR.GenD3D10PostMod_Both
if(bilt(0,x)) -> if(x) <| MR.GenD3D10PostMod_Both
if(bine(x,0)) -> if(x) <| MR.GenD3D10PostMod_Both
if(bine(x,0)) -> if(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
if(bult(0,x)) -> if(x) <| MR.GenD3D10PostMod_Both
if(x){...} else {} -> if(x) {...} <| Explicit
if(x){...} if(x){...} -> if(x) {... ...} <| Explicit
if(x){} else {...} -> if(!x) {...} <| Explicit
if_cmp
if_eq(x + y, 0) -> if_eq(x, -y) <| MR.Gen_PreModTarget_Both
if_ge(-a^2,a^2) -> if_eq(a,0) <| MR.Gen_PreModTarget_Both
if_ge(neg(abs(x)), 0) -> if_eq0 <| MR.Gen_PreModTarget_Both
if_ge(x + y, 0) -> if_ge(x, -y) <| MR.Gen_PreModTarget_Both
if_lt(-a^2,a^2) -> if_ne(a,0) <| MR.Gen_PreModTarget_Both
if_lt(neg(abs(x)), 0) -> if_ne0 <| MR.Gen_PreModTarget_Both
if_lt(x + y, 0) -> if_lt(x, -y) <| MR.Gen_PreModTarget_Both
if_ne(x + y, 0) -> if_ne(x, -y) <| MR.Gen_PreModTarget_Both
if_ne(x, 0) -> if_ne(x, -x) <| MR.Gen_PreModTarget_Both
if+cmp_ge -> if_ge <| MR.Gen_PreModTarget_Both
if+cmp_ge0 -> if_ge0 <| MR.Gen_PreModTarget_Both
if+cmp_lt -> if_lt <| MR.Gen_PreModTarget_Both
if+cmp_lt0 -> if_lt0 <| MR.Gen_PreModTarget_Both
if+ge -> if_ge <| MR.Gen_PreModTarget_Both
if+lt -> if_lt <| MR.Gen_PreModTarget_Both
IFCEt
ifdef
ifndef
IGE a,a -> true <| MR.GenSimplifyInstructionsOpt1_NoExcl
ignore double move(a) -> append_arg(a) <| SMR.RangeDataAnalysis
ignore move(a) -> append_arg(a) <| SMR.RangeDataAnalysis
IiGM>nw
iL5f!
illegal byte sequence
Illegal character in shader file
Illegal initializer
Illegal initializer for a numeric variable
ILT a,a -> false <| MR.GenSimplifyInstructionsOpt1_NoExcl
imad bits_known <| SFPS
imad fp_flags <| SFPS
imad int_literal <| SFPS
imad int_range <| SFPS
imad match 1 (a + b*c) <| MR.GenMad
imad match 2 (a + b+b) <| MR.GenMad
imaginary square root
imax bits_known <| SFPS
imax fp_flags <| SFPS
imax int_literal <| SFPS
imax int_range <| SFPS
imax(i0, i1): if (i0 >= i1) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
imax(i0, i1): if (i1 >= i0) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
imax(imax(i0, l1), l2) -> imax(i0, imax(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
imax(x,y) where one is >= the other <| Explicit
imin bits_known <| SFPS
imin fp_flags <| SFPS
imin int_literal <| SFPS
imin int_range <| SFPS
imin(i0, i1): if (i0 >= i1) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
imin(i0, i1): if (i1 >= i0) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
imin(imin(i0, l1), l2) -> imin(i0, imin(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
imin(x,y) where one is <= the other <| Explicit
imm_atomic_alloc
imm_atomic_alloc and imm_atomic_consume can't be combined with other atomic operations on an Append UAV (%d). Opcode #%d (counts are 1-based).
imm_atomic_alloc and imm_atomic_consume on a given UAV (%d) cannot both be in the same shader. Opcode #%d (counts are 1-based).
imm_atomic_alloc and imm_atomic_consume require as Structured Buffer UAV (slot %d). Opcode #%d (counts are 1-based).
imm_atomic_alloc fp_flags <| SFPS
imm_atomic_and
imm_atomic_and fp_flags <| SFPS
imm_atomic_cmp_exch
imm_atomic_cmp_exch fp_flags <| SFPS
imm_atomic_consume
imm_atomic_consume fp_flags <| SFPS
imm_atomic_exch
imm_atomic_exch fp_flags <| SFPS
imm_atomic_iadd
imm_atomic_iadd fp_flags <| SFPS
imm_atomic_imax
imm_atomic_imax fp_flags <| SFPS
imm_atomic_imin
imm_atomic_imin fp_flags <| SFPS
imm_atomic_or
imm_atomic_or fp_flags <| SFPS
imm_atomic_umax
imm_atomic_umax fp_flags <| SFPS
imm_atomic_umin
imm_atomic_umin fp_flags <| SFPS
imm_atomic_xor
imm_atomic_xor fp_flags <| SFPS
Immediate constant buffer already declared, repeated declaration on opcode #%d (count is 1-based). 
Immediate constant buffer size must be a multiple (not incl. 0) of 32bit*4-tuples in size, but no larger than %d 32bit*4-tuples (%d bytes declared).  Opcode #%d (count is 1-based). 
imod bits_known <| SFPS
imod fp_flags <| SFPS
imod int_literal <| SFPS
imod int_range <| SFPS
implicit truncation of vector type
implicitly 
Import:
imul bits_known <| SFPS
imul fp_flags <| SFPS
imul int_literal <| SFPS
imul int_range <| SFPS
imul one reduces to no-op mov <| MR.GenSimplifyInstructionsOpt1_NoExcl
imul(a, iv_pow2) -> ishl(a, get_lowest_bit(iv_pow2)) <| MR.GenD3D10_OptimizeEarlyTranslate
imul(iadd(a, iv1), iv2) -> iadd(imul(a, iv2), imul(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_Excl
imul(ishl(iv1, a), iv2) -> ishl(imul(iv1, iv2), a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
in %s uints can only be used with known-positive values, use int if possible
inappropriate io control operation
include
Incompatible min precision type for operand #%d of opcode #%d (counts are 1-based). Expected float.
Incompatible min precision type for operand #%d of opcode #%d (counts are 1-based). Expected int or uint.
incompatible version
Incomplete texm* sequence.
Inconsistent semantic definition: %s and %s
incorrect bind semantic
incorrect data check
incorrect header check
incorrect length check
incorrect number of arguments to numeric-type constructor
Incorrect number of operands for opcode #%d (count is 1-based).  Expecting %d, encountered %d.
Incorrect number of parameters for BindInterfaces
Incorrect number of rows or columns
Incorrect register type '%s' in CBV (expected b#)
Incorrect register type '%s' in Sampler/StaticSampler (expected s#)
Incorrect register type '%s' in SRV (expected t#)
Incorrect register type '%s' in UAV (expected u#)
INCR_SAT
IncrementCounter
IncrementCounter/DecrementCounter are only valid on RWStructuredBuffer objects
INCRSAT
indefinite arccosine
indefinite arcsine
indefinite derivative calculation
indefinite logarithm
index
Index Dimension %d out of range (%d specified, max allowed is %d) for operand #%d of opcode #%d (counts are 1-based). Aborting.
Index Dimension %d's relative address indexable temp is out of range (%d specified, max allowed is %d) for operand #%d of opcode #%d (counts are 1-based). Aborting.
Index Dimension %d's relative address indexable temp's dimension %d index is out of range (%d specified, max allowed is %d) for operand #%d of opcode #%d (counts are 1-based). Aborting.
Index Dimension %d's relative address temp is out of range (%d specified, max allowed based on temp declaration is %d) for operand #%d of opcode #%d (counts are 1-based). Aborting.
Index Dimension %d's relative address temp is out of range (%d specified, max allowed is %d) for operand #%d of opcode #%d (counts are 1-based). Aborting.
index for an array of complex types containing doubles must be a literal expression
Index is required for state '%s'
index of input assembly file
Index ranges declared on Patch Constant Data cannot cross over related blocks of hardware TessFactors. An index range is declared from register [%d] to [%d], which crosses over a block of TessFactors that starts with %s in register [%d] and ends in %s in register [%d].
Indexable function parameters are unsupported (parameter: %u, "%s".
Indexable temp register index, [%d], too high.  Opcode #%d (count is 1-based). Aborting.
Indexable temp x%d already declared.  Opcode #%d (count is 1-based). 
Indexed expressions are illegal as attribute parameters
INDEXEDVERTEXBLENDENABLE
Indexing of t# resources with current instruction requires opcode to specify resource dimension and return type. Operand #%d of opcode #%d (counts are 1-based). Aborting.
IndirectVirtualBaseClass
Individual instruction in co-issue pair cannot write both alpha and color component(s).
ineg bits_known <| SFPS
ineg fp_flags <| SFPS
ineg int_literal <| SFPS
ineg int_range <| SFPS
ineg(and(ne(x,0),1)) -> ne(x,0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ineg(ineg(x)) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
infinite loop detected - loop never exits
infinite loop detected - loop writes no values
initial value
Initialize arrays to void <| Explicit
InitializeCriticalSection
InitializeCriticalSectionAndSpinCount
InitializeCriticalSectionEx
initializedData
initializer
Initializer used on a global 'const' variable. This requires setting an external constant. If a literal is desired, use 'static const' instead.
InitializeSListHead
InitializeSRWLock
InjectedSource
inline
inner array index within group shared element must be a literal expression for %s
INNERCOV
inout
inout 
input
Input
input assembly file name
Input cannot be dcl'd with usage+index positiont0, as vertex data containing this semantic has special meaning to the API: skip vertex processing altogether.
Input control point count must be [%d..%d].  %d specified.  Opcode #%d (count is 1-based). 
Input control point count must be [0..%d].  %d specified.  Opcode #%d (count is 1-based). 
Input domain point already declared.  Opcode #%d (count is 1-based). 
Input domain point declaration can't have an empty mask.  Opcode #%d (count is 1-based). 
Input index range declaration out of range.  Opcode #%d (count is 1-based). 
Input index range defined from %d to %d does not include any declared input registers. 
Input primitive ID already declared in this HS phase.  Opcode #%d (count is 1-based). 
Input primitive ID already declared.  Opcode #%d (count is 1-based). 
Input register v%d was not declared with a dcl statement.  Attempt to read component%s(*): %s
Input signature cannot be defined for a library function.
Input signature does not specify component %d of register %d which is declared in the shader code. 
Input signature name mismatch with declaration in shader code for component %d in register %d. 
Input signature parameter #%d (1-based) specifies out of range register %d. 
Input signature parameter #%d (1-based) specifies register %d (or components in the register) that have already been defined. 
input types for geometry shader must be arrays
InputAssemblyFiles
InputPatch
Inputs
InsideScale
instance
instance constructor of a class with virtual base
Instance ID
instance_id
instanceID already declared for input.  Opcode #%d (count is 1-based). 
INSTID
Instruction cannot have co-issue ('+') set without a previous arithmetic instruction to pair with.
instruction coissue is not supported in this shader version
Instruction length specified for instruction (%d) does not match the token count encountered (%d). Aborting validation.
Instruction modifiers are not allowed for tex* instructions.
Instruction modifiers not allowed for tex* instructions.
Instruction modifiers other than _sat or _pp not permitted. (_sat is permitted only on arithmetic ops, except frc or SINCOS)
Instruction not supported by %s shader.
Instruction not supported by this vertex shader version.
Instruction not supported by version %s pixel shader.
Instruction not supported by version %s shader.
instruction predication is not supported in this shader version
Instruction shifts not permitted.
insufficient memory
Insufficient resources were available to use additional parallelism.
int or unsigned int type required
int1x1
int1x2
int1x3
int1x4
int2x1
int2x2
int2x3
int2x4
int3x1
int3x2
int3x3
int3x4
int4x1
int4x2
int4x3
int4x4
Integer
integer
integer '%dl'
integer '%I64d'
integer '%I64uu64'
integer '%u'
integer '%uul'
integer add sequence simplification <| Explicit
Integer addition negative identities <| MR.GenSimplifyInstructionsOpt1_NoExcl
integer constant
integer constant register '%s' must be defined as a variable of type int3 or int4 only
Integer divide by zero
integer divides may be much slower, try using uints if possible.
integer inputs unsupported on %s
integer modulus may be much slower, try using uints if possible.
integer movc((a<b),b,a) -> max(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
integer movc((a>=b),a,b) -> max(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
integer multiply by literal identity <| Explicit
integer multiply by negative one identity <| Explicit
integer multiply by one identity <| Explicit
integer multiply by zero identity <| Explicit
integer negate modifier match <| Explicit
Integer Power of 2
integral
interface
interface arrays cannot be multi-dimensional
interface calls cannot be indexed with varying values
interface decl declares an interface index %d that is not a base register in the interface metadata.  Opcode #%d (count 1-based).
interface decl declares an interface index %d that is not the interface metadata.  Opcode #%d (count 1-based).
interface decl declares an interface index (%d) that has already been declared.  Opcode #%d (count 1-based).
interface decl declares an invalid interface index %d.  Opcode #%d (count 1-based).
interface decl expects a table of size %d, but table %d has %d elements.  Opcode #%d (count 1-based).
interface decl for interface index %d has different function table data than the interface metadata.  Opcode #%d (count 1-based).
interface decl references undefined function table (%d).  Opcode #%d (count 1-based).
Interface metadata expects interface %d to be declared, but it was not.
Interface metadata expects interface %d to be of size %d, but it was declared as size %d.
Interface metadata instance %d refers to undeclared constant buffer %d.
Interface metadata instance %d refers to undeclared constant buffer offset [%d,%d].
Interface metadata instance %d refers to undeclared sampler %d.
Interface metadata instance %d refers to undeclared texture %d.
interface pointer (%d) was declared, but never referenced.
interface references must resolve to non-varying objects
interface variables can only be initialized with concrete classes
Interface-reachable members containing UAVs or group shared variables are not yet implemented
interfaces
interfaces cannot be embedded in other types
interfaces cannot inherit from other types
interlocked targets must be groupshared or UAV elements
InterlockedAdd
InterlockedAnd
InterlockedCompareExchange
InterlockedCompareStore
InterlockedExchange
InterlockedMax
InterlockedMin
InterlockedOr
InterlockedXor
Internal Error - there was a problem getting a type size
internal error gathering debug file information
Internal error in compiler
internal error: 64-bit arg component %u not aligned <| A%u (B%u)
internal error: addressing inconsistent pool
internal error: AND operator inputs not bool
internal error: argument missing context <| A%u (B%u)
internal error: argument pulled into unrelated predicate
internal error: argument used without having been initialized <| A%u (B%u), I%u (B%u)
internal error: argument was never used <| (A%u (B%u))
internal error: argument was never used <| (A%u (B%u), I%u (B%u))
internal error: binary instruction expected
internal error: blob content mismatch between level9 and d3d10 shader
internal error: blob mismatch between level9 and d3d10 shader
internal error: blob size mismatch between level9 and d3d10 shader
internal error: cannot read from argument pool <| (A%u (B%u))
internal error: cannot write to argument pool <| (A%u (B%u), I%u (B%u))
internal error: chain register invalid
internal error: compilation aborted unexpectedly
internal error: compiler-generated value has a minimum precision type and is marked precise <| A%u (B%u)
internal error: component out of range
internal error: constant buffer used as address
internal error: debug info append failed, byte count (%d) too large?
internal error: DST test failure
internal error: emitting a denorm
internal error: expected binary instruction for scalar RHS
internal error: expected scalar RHS for instruction
internal error: expression expected
internal error: failed to add code section to debug info
internal error: failed to add module to debug info
internal error: failed to add section contribution
internal error: failed to add section header to debug info
internal error: failed to append section header to pdb
internal error: failed to close debug info
internal error: failed to close debug info in PDB
internal error: failed to close module in debug info
internal error: failed to close PDB
internal error: failed to close section header in debug info
internal error: failed to close source file store
internal error: failed to close source file store in PDB
internal error: failed to close type info
internal error: failed to commit inline type info in PDB
internal error: failed to commit PDB
internal error: failed to commit type info in PDB
internal error: failed to create debug info in PDB
internal error: failed to create inline type info in PDB
internal error: failed to create source file store in PDB
internal error: failed to create type info in PDB
internal error: failed to devirtualize a contained interface call
internal error: failed to emit instruction
internal error: failed to open PDB for writing in stream
internal error: failed to write debug data to pdb stream
internal error: flattened side effect
internal error: gradient instruction sent to preshader
internal error: IF with size greater then 1 found
internal error: inconsistent addressing
internal error: inconsistent derivative writer
internal error: input register missing semantic
internal error: instruction list and count mismatch
internal error: instruction list too long
internal error: instruction missing outputs
internal error: instruction size mismatch
internal error: invalid access of unbound variable
Internal error: invalid read of more specific predicate
internal error: invalid register
internal error: invalid sequence/cast expression
internal error: invalid swizzle found
internal error: l-value expected
internal error: modifier used on address
internal error: multiple write to same output
internal error: no profile exists for this pixel shader version
internal error: no profile exists for this shader version
internal error: no profile exists for this vertex shader version
internal error: no semantic found on i/o argument
internal error: no storage type for block output
internal error: non ordinal input/output found
internal error: non-vectorized pool violated port constraints
internal error: not all rules initialized
internal error: operand type mismatch
internal error: OR operater inputs not bool
internal error: out of memory
internal error: output argument was never initialized <| (A%u (B%u))
internal error: output found with no semantic
internal error: output register missing semantic
internal error: overlapping output writes
internal error: pdb append failed
internal error: PDB data too large
internal error: PDB stream truncated
internal error: production failed
internal error: reading from value known not to be read <| (A%u (B%u))
internal error: result register invalid
internal error: result violated port constraints
internal error: RootSignature append failed, byte count (%d) too large?
internal error: Rule class id invalid
internal error: scalar instruction with too many inputs
internal error: stack underflow
internal error: statistics append failed, byte count (%d) too large?
internal error: this-relative %s '%s' found outsideof function scope
internal error: unable to add non-conflicting symbol
internal error: unable to process intrinsic
internal error: unassociated return
internal error: unexpected Alias on texture declaration
internal error: unexpected input register type
internal error: unexpected output register type
internal error: unknown node
Internal error: unpredicated endif input
internal error: unpredicated incomplete
internal error: unpredicated loop_in
Internal error: unread predicate
Internal error: unrecognized assignment type
internal error: unrecognized expression
internal error: unrecognized geometry shader input primitive type
Internal error: unrecognized SB API Call
internal error: unrecognized statement
internal error: unrecognized value
internal error: vectorized instruction too large
internal warning: optimization did not converge
internal warning: PDB Error string is "%S"
InternalName
Interpolation mode cannot vary for different components of a single input register (v%d).  Opcode #%d (count is 1-based). 
Interpolation mode for PS clip or cull distance must be linear or linear centroid, or in 4.1, linear_sample  (register v%d).  Opcode #%d (count is 1-based). 
Interpolation mode for PS input position must be linear_noperspective or linear_noperspective_centroid (shader model 4.1+ allows linear_noperspective_sample as well). 
Interpolation mode for PS input position must be linear_noperspective_centroid or linear_noperspective_sample when outputting oDepthGE or oDepthLE and not running at sample frequency (which is forced by inputting SV_SampleIndex or declaring an input linear_sample or linear_noperspective_sample). 
Interpolation mode for PS renderTargetArrayIndex or viewportArrayIndex must be constant (register v%d).  Opcode #%d (count is 1-based). 
Interpolation mode for PS SGV must be constant (register v%d).  Opcode #%d (count is 1-based). 
Interpolation mode on input v# register used with eval_* instruction must be linear, linear_centroid, linear_noperspective, linear_noperspective_centroid, linear_sample or linear_noperspective_sample. Opcode #%d (count is 1-based). 
interrupted
intrinsic function
intrinsic function '%s' is not yet implemented
intrinsic method
Intro
INV_BLEND_FACTOR
INV_DEST_ALPHA
INV_DEST_COLOR
INV_SRC_ALPHA
INV_SRC_COLOR
INV_SRC1_ALPHA
INV_SRC1_COLOR
invalid
invalid %s %s
Invalid %s input semantic '%s'.
invalid %s semantic '%s': Legal indices are in [%d,%d]
Invalid %s semantics - POSITIONT0
invalid argument
Invalid assignment index (%u). Maximum allowed is %u.
invalid bit length repeat
invalid block type
invalid code -- missing end-of-block
invalid code lengths set
invalid compiler flag %s
invalid complement expression
Invalid component mask in indexable temp decl: 0x%x.  Opcode #%d (count is 1-based). Aborting. 
Invalid component selection mode for vCycleCounter.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid component selection mode for vInputThreadGroupID.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid component selection mode for vInputThreadID.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid component selection mode for vInputThreadIDInGroup.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid const register num: %d. Max allowed is %d.
Invalid constant bool (b#) register num: %d. Max allowed is %d.
Invalid constant integer (i#) register num: %d. Max allowed is %d.
Invalid dest reg num: %d. Max allowed for this reg type is %d.
Invalid destination register number: %d. Max allowed for this register type is %d.
Invalid destination shift.
invalid distance code
invalid distance too far back
invalid distances set
Invalid dst modifier for vertex shader.
Invalid dst modifier.
Invalid dst shift.
Invalid index dimension %d for relative address temp register within dimension 1 of operand.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid index dimension for relative address indexable temp register within dimension %d of operand.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid indexing mode for first dimension.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid input register '%s' specified
Invalid instruction for Hull Shader Control Point phase.
Invalid instruction for Hull Shader Decls phase.
Invalid instruction for Hull Shader Fork phase.
Invalid instruction for Hull Shader Join phase.
Invalid instruction for Hull Shader postamble section (subroutines and function bodies).
Invalid instruction modifier.
invalid instruction modifiers '%s'
invalid interface binding parameter
Invalid interface metadata: duplicated type in interface %d's type list.
Invalid interface metadata: instance buffer overrun.
Invalid interface metadata: instance name buffer overrun.
Invalid interface metadata: instance type buffer overrun.
Invalid interface metadata: interface %u unimplemented.
Invalid interface metadata: interface buffer overrun.
Invalid interface metadata: interface count mismatch.
Invalid interface metadata: no types defined.
Invalid interface metadata: too many instances.
Invalid interface metadata: too many interface slots.
Invalid interface metadata: too many types.
Invalid interface metadata: type %d violates type stride limits.
Invalid interface metadata: type buffer overrun.
Invalid interface metadata: type name buffer overrun.
Invalid interface metadata: unterminated instance name.
Invalid interface metadata: unterminated type name.
Invalid interface metadata: variable %d violates limits on member offsets.
Invalid interpolation mode for register v%d.  Opcode #%d (count is 1-based). 
invalid literal/length code
invalid literal/lengths set
invalid mask '%s'
Invalid name or shader for SGV dcl.  Opcode #%d (count is 1-based). 
Invalid name or shader for SIV dcl.  Opcode #%d (count is 1-based). 
Invalid operand type for operand #%d of opcode #%d (counts are 1-based). 
invalid or unsupported integer constant expression
Invalid output register '%s' specified
invalid packoffset location '%s'
Invalid parameter count.
Invalid pixel shader input register '%s' specified
invalid preprocessor command '%s'
invalid reference to input semantic '%s%d'
invalid reference to output semantic '%s%d'
Invalid reg num %d (%s source param).  Max allowed for this type is %d.
Invalid reg num for MISCTYPE.
Invalid reg num: %d for %s source param. Max allowed for this type is %d.
Invalid reg type (%s source param).
Invalid reg type for %s source param.
Invalid reg type for dest param.
invalid register '%s'
invalid register '%s[%u]'
invalid register '%s[...]'
Invalid register number, %d, specified for a# (address) register. Max # supported is %d (%s source param).
Invalid register number, %d, specified for aL register. Max # supported is %d (%s source param).
Invalid register number: %d. Max allowed for %s# register is %d.
invalid register semantic '%s', or variable must be bound to multiple register banks (%c register binding required)
invalid register specification, expected 'b' binding
invalid register specification, expected 'b' or 'c' binding
invalid register specification, expected 't' binding
Invalid register type for dcl.  Must be input register (v#), output register (o#) or sampler (s#).
Invalid register type for dcl.  Must be input register (v#), sampler (s#), position (vPos) or face (vFace).
Invalid register type for dcl.  Must be input register (v#).
Invalid register type for dcl.  Must be t#, v# or s#.
Invalid register type for destination param.
invalid register, input, or constant name '%s'
Invalid relative indexing register type for dimension %d.  Operand #%d of opcode #%d (counts are 1-based). Aborting.
Invalid representation for index dimension %d.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid resource dimension on resource t%d.  Opcode #%d (count is 1-based). 
Invalid resource dimension on resource u%d.  Opcode #%d (count is 1-based). 
Invalid resource return type on component %d of resource t%d.  Opcode #%d (count is 1-based). 
Invalid resource return type on component %d of resource u%d.  Opcode #%d (count is 1-based). 
Invalid sampler mode on sampler s%d.  Opcode #%d (count is 1-based). 
invalid seek
invalid semantic '%s' on pixel shader output
Invalid shader type used with %s
Invalid src mod for %s source param.
Invalid src mod for tex* instruction (%s source param).
Invalid src swizzle for %s source param.
invalid stored block lengths
Invalid stream index s%d.  Index must be between 0 and %d Opcode #%d (count is 1-based). 
Invalid StreamOut decl
Invalid StreamOut decl: %s
invalid subscript '%s'
invalid swizzle '%s'
Invalid Tessellator Domain specified. Must be isoline, tri or quad. Aborting. Opcode #%d (count is 1-based). 
Invalid Tessellator Output Primitive specified. Must be point, line, triangleCW or triangleCCW. Aborting. Opcode #%d (count is 1-based). 
Invalid Tessellator Partitioning specified. Must be integer, pow2, fractional_odd or fractional_even. Aborting. Opcode #%d (count is 1-based). 
Invalid texm* register.
Invalid texm* sequence.
invalid type for index - index must be a scalar, or a vector with the correct number of dimensions
invalid type used for '%s' %s semantics
invalid type used for '%s' %s semantics, must be %s
invalid usage modifier applied to %cbuffer
invalid variable reference in static variable initializer.  Locals cannot be used to initialize static variables
invalid window size
INVBLENDFACTOR
INVDESTALPHA
INVDESTCOLOR
INVERT
INVSRCALPHA
INVSRCCOLOR
io error
is a directory
is Accelerator group shared local
is Accelerator stub function
is compiled with /guard:cf
is compiled with /ltcg:pgo
is compiled with /sdl
is HLSL data
is interface class/struct
Is it compiled with -Bzalign
is live range of Accelerator pointer tag
is multiple inheritance
is objective-c category
is objective-c class interface/implementation
is objective-c protocol
is pointer to data member
is pointer to member function
is ref class/struct
is single inheritance
is the function optimized for speed
is value class/struct
is virtual inheritance
is WinRT pointer
is_front_face
isAggregated
isCTypes
isCVTCIL
IsDebuggerPresent
isfinite
isFrontFace already declared for input.  Opcode #%d (count is 1-based). 
isFrontFace already declared for output.  Opcode #%d (count is 1-based). 
ISG1t
ISGNt
ishl bits_known <| SFPS
ishl fp_flags <| SFPS
ishl int_literal <| SFPS
ishl(and(a, m), n) : if( and_is_identity_ignore_upper_n_bits(a, m, n) -> ishl(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ishl(and(m, a), n) : if( and_is_identity_ignore_upper_n_bits(a, m, n) -> ishl(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ishl(iadd(a, iv1), iv2) -> iadd(ishl(a, iv2), ishl(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_Excl
ishl(imul(a, iv1), iv2) : if(low_bit_clear(iv2)) -> imul(ishl(a, iv2/2), ishl(iv1, iv2/2)) <| MR.GenSimplifyInstructionsOpt1_Excl
ishl(ineg(a), iv1) -> ineg(ishl(a, iv1)) <| MR.GenSimplifyInstructionsOpt1_Excl
ishl(ishl(a, b), c) : if( nooverflow_mod_32(b, c) ) -> ishl(a, iadd(b, c)) <| MR.GenSimplifyInstructionsOpt1_Excl
ishl(or(a, m), n) : if( or_is_identity_ignore_upper_n_bits(a, m, n) -> ishl(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ishl(or(m, a), n) : if( or_is_identity_ignore_upper_n_bits(a, m, n) -> ishl(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
isHotpatchable
ishr bits_known <| SFPS
ishr fp_flags <| SFPS
ishr int_literal <| SFPS
ishr(ishr(a, b), c) : if( nooverflow_mod_32(b, c) ) -> ishr(a, iadd(b, c)) <| MR.GenSimplifyInstructionsOpt1_Excl
isinf
isMSILNetmodule
IsNaked
isnan
isoline
ISOLINE
Isoline
IsProcessorFeaturePresent
isSafeBuffers
isSplitted
isStripped
It is invalid to use eval_* on position input due to hardware limitation.  Opcode #%d (count is 1-based). 
iterator
itob bits_known <| SFPS
itob fp_flags <| SFPS
itob int_literal <| SFPS
itob int_range <| SFPS
itob(x) -> bine(x,0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
itod fp_flags <| SFPS
itof fp_flags <| SFPS
itof(ftoi(x)) -> trunc(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
j j@j
j!j@j
j"j@j
j#j@j
j$j@j
j%j@j
j&j@j
j(j@j
j)j@j
j*j@j
j,j@j
j.j@j
j/j@j
j:j@j
j;j@j
j?j@j
j@j@j
j[j@j
j\j@j
j]j@j
j^j@j
j_j@j
j`j@j
j+j@j
j<j@j
j=j@j
j>j@j
J0;Hds
j0j@j
j1j@j
j2j@j
j3j@j
j4j@j
j5j@j
j6j@j
j7j@j
j8j@j
j9j@j
jAj@j
jaj@j
jBj@j
jbj@j
jCj@j
jcj@j
jDj@j
jdj@j
jEj@j
jej@j
jfj@j
jFj@j
jGj@j
jgj@j
jHj@j
jhj@j
jij@j
jIj@j
j'j@j
j-j@j
jjj@j
jJj@j
jjjjh
jjjjj
jjjjjj
jkj@j
jKj@j
jklmnopqrs
jLj@j
jlj@j
jMj@j
jmj@j
jnj@j
jNj@j
Join phase declared the same component(s) of output patch constant register o[#d] as already declared for output by a previous fork phase or other joint phase.
Join phase declaring component(s) of input patch constant register vpc[%d] which have not been output by previous fork phase(s) or other join phase(s).
jOj@j
joj@j
jpj@j
jPj@j
JPSV3
jqj@j
jQj@j
jrj@j
jRj@j
jsj@j
jSj@j
jTj@j
jtj@j
juj@j
jUj@j
jVj@j
jWj@j
jXj@j
jYj@j
jZj@j
K ;H 
K ;H |9
K [_^
K 9H 
K 9J |
K@+K<
K@9BH
K`+C0P
K<9K4
K0_^[
K0VPW
K49K<
K8;J8
k97u@h
kernel32.dll
KH9M$
klmnk
KLMNOPQ
Known literals reduced to mov <| Explicit
L REL A*(L2<0) (double) <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A*(L2<0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A*(L2>0) (double) <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A*(L2>0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A*L2 where L2 < 0 divides L as an INT <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A*L2 where L2 > 0 divides L as an INT <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A*L2 where L2 divides L as a UINT <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A+A (double) <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A+A <| MR.GenSimplifyInstructionsOpt1_NoExcl
L$ )D$4+
L$ ;L$
L$ ;O,
L$ ^[3
L$ 9L$
L$ 9O,
L$#:L$
L$$;_
L$$;G
L$$9P
L$$PW
L$$PWj
L$$QPW
L$$WP
L$(9H
L$(9M
L$(AQS
L$(AQWVPh
L$(AQWVPh`
L$(AQWVPh0
L$(G;
L$(PS
L$(tD
L$(tF
L$,9L$HvK
L$,QQh
L$,WRV
L$/QP
L$;QP
L$@;U
L$@PVj
L$\;L$l
L$\;L$lr
L$\;L$Pt
L$\;T$
L$\3L$
L$\9L$l
L$\PhCLI4
L$\PhCTAB
L$\Qj
L$\RP
L$`;D$Ds
L$|_^[3
L$|PWj
L$|Qj
L$<;L$T
L$<_^[3
L$<9D$$u
L$<9L$T
L$<Qj
L$<t'
L$<t8
L$<th2
L$<Vh
L$<VR
L$0G;
L$0QP
L$0WR
L$1QP
L$4;D$0
L$4;D$8
L$4;N
L$4_^[3
L$49O
L$4SW
L$4Wj
L$8F;
L$8QP
L$8QPhh.
L$8VW
L$d;L$(
L$D_^[3
L$D9L$8vK
L$DPj
L$DQPj
L$dSVW
L$DWj
L$H;L$8
L$hF;
L$hG;
L$hQP
L$HQQh
L$I_^
L$JQP
L$l;H0s
L$L;O
L$l9K0
L$L9O
L$LSP
L$lVVWS
L$p;L$D
L$PPj
L$Pu2
L$X3L$
L$X9L$4
L$XQPRV
L$xVW
L$XVW
L0P0T0X0\0`0d0h0l0p0t0x0|0
l6qnk
label
label (%d) already defined. Opcode #%d (count 1-based). 
label (%d) being defined without any callers. Shader Model 5+ requires all callers to a subroutine to appear before the subroutine definition. Aborting.Opcode #%d (count 1-based). 
label (%d) called but not defined.
label (%d) defined but never called.
label (%d) must be preceded by a ret. Opcode #%d (count 1-based). Aborting validation.
label (%d) must not be nested inside flow control. Opcode #%d (count 1-based). Aborting validation.
label (%d) was never used in the shader
Label is defined inside a subroutine or main program. Label must follow the ret instruction. Aborting shader validation. 
'label' is only permitted directly after a 'ret' instruction. Aborting shader validation. 
label parameter doesn't allow min precision.
Language
LASTBETA_D3DCOLOR
LASTBETA_UBYTE4
LASTPIXEL
late-resolve interface calls nested too deeply
LCMapStringW
ld does not support raw or structured buffers.  Opcode #%d, operand #%d (counts are 1-based). 
ld requires resource declared as texture1D/2D/3D/1DArray/2DArray.  Opcode #%d, operand #%d (counts are 1-based). 
ld_raw
ld_raw cannot be used on a resource that is not declared as raw (resource index [%d]). Opcode #%d (counts are 1-based).
ld_raw requires resource declared as Raw Buffer.  Opcode #%d, operand #%d (counts are 1-based). 
ld_raw_s
ld_structured
ld_structured cannot be used on a resource that is not declared as structured (resource index [%d]). Opcode #%d (counts are 1-based).
ld_structured requires resource declared as Structured Buffer.  Opcode #%d, operand #%d (counts are 1-based). 
ld_structured_s
ld_uav_typed
ld_uav_typed cannot be used on a UAV that is not declared as typed (u%d). Opcode #%d (counts are 1-based).
ld_uav_typed_s
ld2dms requires resource declared as texture2DMS/texture2DMSArray.  Opcode #%d, operand #%d (counts are 1-based). 
ldexp
ldms_s
LeaveCriticalSection
Legacy !A * (A + B) => !A * B <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy !A + (A + B) => 1 + B <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy (!A * A) => 0 <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy (!A + A) => 1 + B <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy (A || A) => A <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy A * !(A * B) => A * !B <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy -BOOL < BOOL => BOOL <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy C + (A * B) + (A * !B) => C + A <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy NOT (A || A) => NOT A <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy NOT GE => LT <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy NOT LT => GE <| MR.GenSimplifyInstructionsOpt1_NoExcl
LegacyLocalResourceArrays
LegalCopyright
Length
length
Length in bytes of segment.
length of live range
Length of source in bytes.
lengthBlock
lengthLocals
lengthParams
lengthProlog
lengthSavedRegisters
LERP(!A,B,C) -> LERP(A, C, B) <| MR.GenSimplifyInstructionsOpt1_NoExcl
lerp(fbool, a, 0) -> append_arg(a,0) <| SMR.RangeDataAnalysis
lerp(fbool, a, b) -> append_arg(a,b) <| SMR.RangeDataAnalysis
lerp(fbool, finite a, 0) -> append_arg(a,0) <| SMR.RangeDataAnalysis
lerp(fbool, finite a, finite b) -> append_arg(a,b) <| SMR.RangeDataAnalysis
LESS_EQUAL
LESSEQUAL
Level9
levels
LexicalParent
LexicalParentId
LF_ALIAS
LF_ALIAS_ST
LF_ARGLIST
LF_ARGLIST_16t
LF_ARRAY
LF_ARRAY_16t
LF_ARRAY_ST
LF_BARRAY
LF_BARRAY_16t
LF_BCLASS
LF_BCLASS_16t
LF_BINTERFACE
LF_BITFIELD
LF_BITFIELD_16t
LF_BUILDINFO
LF_CLASS
LF_CLASS_16t
LF_CLASS_ST
LF_CLASS2
LF_COBOL0
LF_COBOL0_16t
LF_COBOL1
LF_DEFARG
LF_DEFARG_16t
LF_DEFARG_ST
LF_DERIVED
LF_DERIVED_16t
LF_DIMARRAY
LF_DIMARRAY_16t
LF_DIMARRAY_ST
LF_DIMCONLU
LF_DIMCONLU_16t
LF_DIMCONU
LF_DIMCONU_16t
LF_DIMVARLU
LF_DIMVARLU_16t
LF_DIMVARU
LF_DIMVARU_16t
LF_ENDPRECOMP
LF_ENUM
LF_ENUM_16t
LF_ENUM_ST
LF_ENUMERATE
LF_ENUMERATE_ST
LF_FIELDLIST
LF_FIELDLIST_16t
LF_FRIENDCLS
LF_FRIENDCLS_16t
LF_FRIENDFCN
LF_FRIENDFCN_16t
LF_FRIENDFCN_ST
LF_FUNC_ID
LF_HLSL
LF_INDEX
LF_INDEX_16t
LF_INTERFACE
LF_INTERFACE2
LF_IVBCLASS
LF_IVBCLASS_16t
LF_LABEL
LF_LIST
LF_MANAGED
LF_MANAGED_ST
LF_MATRIX
LF_MEMBER
LF_MEMBER_16t
LF_MEMBER_ST
LF_MEMBERMODIFY
LF_MEMBERMODIFY_ST
LF_METHOD
LF_METHOD_16t
LF_METHOD_ST
LF_METHODLIST
LF_METHODLIST_16t
LF_MFUNC_ID
LF_MFUNCTION
LF_MFUNCTION_16t
LF_MODIFIER
LF_MODIFIER_16t
LF_MODIFIER_EX
LF_NESTTYPE
LF_NESTTYPE_16t
LF_NESTTYPE_ST
LF_NESTTYPEEX
LF_NESTTYPEEX_ST
LF_NULL
LF_OEM
LF_OEM_16t
LF_OEM2
LF_ONEMETHOD
LF_ONEMETHOD_16t
LF_ONEMETHOD_ST
LF_POINTER
LF_POINTER_16t
LF_PRECOMP
LF_PRECOMP_16t
LF_PRECOMP_ST
LF_PROCEDURE
LF_PROCEDURE_16t
LF_REFSYM
LF_SKIP
LF_SKIP_16t
LF_STMEMBER
LF_STMEMBER_16t
LF_STMEMBER_ST
LF_STRIDED_ARRAY
LF_STRING_ID
LF_STRUCTURE
LF_STRUCTURE_16t
LF_STRUCTURE_ST
LF_STRUCTURE2
LF_SUBSTR_LIST
LF_TYPESERVER
LF_TYPESERVER_ST
LF_TYPESERVER2
LF_UDT_MOD_SRC_LINE
LF_UDT_SRC_LINE
LF_UNION
LF_UNION_16t
LF_UNION_ST
LF_UNION2
LF_VBCLASS
LF_VBCLASS_16t
LF_VECTOR
LF_VFTABLE
LF_VFTPATH
LF_VFTPATH_16t
LF_VFUNCOFF
LF_VFUNCOFF_16t
LF_VFUNCTAB
LF_VFUNCTAB_16t
LF_VTSHAPE
LFS0t
lib_%d_%d
lib_4_0
lib_4_0_level_9_1
lib_4_0_level_9_1_ps
lib_4_0_level_9_1_ps_only
lib_4_0_level_9_1_vs
lib_4_0_level_9_1_vs_only
lib_4_0_level_9_3
lib_4_0_level_9_3_ps_only
lib_4_0_level_9_3_vs
lib_4_0_level_9_3_vs_only
lib_4_1
lib_5_0
LIBFuh
LIBHt
Library entry points cannot be overloaded ('%s')
LibraryName
LIGHTAMBIENT
LIGHTATTENUATION0
LIGHTATTENUATION1
LIGHTATTENUATION2
LIGHTDIFFUSE
LIGHTDIRECTION
LIGHTENABLE
LIGHTFALLOFF
LIGHTING
LIGHTPHI
LIGHTPOSITION
LIGHTRANGE
LIGHTSPECULAR
LIGHTTHETA
LIGHTTYPE
limit
lineadj
LINEAR
linear
LINEDEN
LINEDET
lineNumber
lineNumberEnd
LineNumbers
LineStream
Literal floating-point value out of integer range for conversion: %f
Literal floating-point value out of unsigned range for conversion: %f
Literal in Log * Mul * Exp pattern <| Explicit
literal loop terminated early due to out of bounds array access
LiveRangeStartAddressOffset
LiveRangeStartAddressSection
LiveRangeStartRelativeVirtualAddress
LMIRSZWT
lmnop
load fp_flags <| SFPS
load_o fp_flags <| SFPS
load_o_s fp_flags <| SFPS
load_s fp_flags <| SFPS
load_uav fp_flags <| SFPS
load_uav_s fp_flags <| SFPS
Load2
load2d_msaa fp_flags <| SFPS
load2d_msaa_o fp_flags <| SFPS
load2d_msaa_o_s fp_flags <| SFPS
load2darray_msaa fp_flags <| SFPS
load2darray_msaa_o fp_flags <| SFPS
load2darray_msaa_o_s fp_flags <| SFPS
Load3
Load4
LoadLibraryExW
local
Local root signatures only support shader visibility flag D3D12_SHADER_VISIBILITY_ALL.  ShaderVisibility value: %u (root parameter [%u]).
Local root signatures only support shader visibility flag D3D12_SHADER_VISIBILITY_ALL.  ShaderVisibility value: %u (static sampler [%u]).
local variables
LocalAlloc
LocalFree
LOCALVIEWER
location is dependent on control flow
location semantics cannot be specified on members
location semantics do not apply to %ss
LocationType
lod instruction requires sampler declared in default mode.  Opcode #%d, operand #%d (counts are 1-based). 
lod requires resource declared as texture1D/2D/3D/Cube/CubeArray/1DArray/2DArray.  Opcode #%d, operand #%d (counts are 1-based). 
log float_literal <| SFPS
log fp_flags <| SFPS
log fp_range <| SFPS
log fp_specials <| SFPS
log(exp(x)) identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
log10
loop doesn't allow min precision on parameters.
loop doesn't seem to do anything, consider removing [loop]
loop doesn't seem to do anything, forcing loop to unroll
loop executes for more than %d iterations (maximum for this shader target), forcing loop to unroll
loop only executes for %d iteration(s), consider removing [loop]
loop only executes for %d iteration(s), forcing loop to unroll
loop requires first parameter to be loop counter (aL). 
loop simulation finished early, use /O1 or above for potentially better codegen
loop variables
loop will not exit early, try to make sure the loop condition as tight as possible
loop(a) -> append_sources() (loop predicate linkage) <| SMR.DataFlagAnalysis_NoPlaceHolder
loop/rep don't allow min precision on parameters.
loop_endif(a) -> append_arg(a, pred_a) <| SMR.DataFlagAnalysis
loop_endif(a,b) -> append_arg(a,b,p_a) <| SMR.DataFlagAnalysis
loop_in(completed a) -> o->append_inloop() <| SMR.DataFlagAnalysis
loop_in(completed a) -> o->append_inloop() <| SMR.RangeDataAnalysis
loopif fp_flags <| SFPS
loopif_consume fp_flags <| SFPS
LowerBound
LowerBoundId
lstrcmpiA
lt float_literal <| SFPS
lt fp_flags <| SFPS
lt fp_range <| SFPS
lt of known range reduction <| Explicit
lt(a, b) -> cmp(a - b, 0f, 1f) <| MR.Gen_RequiredTranslate
L-value Reference
l-value specifies const object
lw1t_
M$PWQ
M(;M0
M*x* matrix instructions cannot write to scalar output register.
M*x* matrix instructions cannot write to scalar output registers (oFog, oPts).
M0Y0y0
MachineType
mad float_literal <| SFPS
mad fp_flags <| SFPS
mad fp_range <| SFPS
mad fp_specials <| SFPS
mad match 1 (a + b*c) <| MR.GenMad
mad match 2 (a - b*c) <| MR.GenMad
mad match 3 (a + b+b) <| MR.GenMad
mad match 4 (a - b+b) <| MR.GenMad
MAGFILTER
malformed #hlsl_full_path
Managed
MapViewOfFile
MapViewOfFileEx
Masks (and if pixel shader, also interpolation mode) on all input registers in an index range must be identical. Input register %s[%d] does not match with others in the index range from %d to %d. 
MATERIAL
MATERIALAMBIENT
MATERIALDIFFUSE
MATERIALEMISSIVE
MATERIALPOWER
MATERIALSPECULAR
Matrices cannot be specified in temp registers with the fragment linker
matrix
matrix dimensions must be between 1 and %u
matrix dimensions must be literal scalar expressions
matrix element type must be a scalar type
matrix is row major
matrix types cannot be both column_major and row_major
max 0/min 1 -> sat <| MR.Gen_OptimizeEarlyTranslate_SAT_Excl
max float_literal <| SFPS
max fp_flags <| SFPS
max fp_range <| SFPS
max fp_specials <| SFPS
Max index for effect state '%s' is %d
max of known positive identity <| Explicit
max of neg idenity to abs instruction match <| Explicit
max(a, -a) -> abs <| MR.Gen_RequiredTranslate
max(a, b) -> cmp(a - b, a, b) <| MR.Gen_RequiredTranslate
max(i, neg(i)) -> abs <| MR.Gen_OptimizeEarlyTranslate_SAT_NoExcl
max(i0, i1): if (i0 >= i1) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
max(i0, i1): if (i1 >= i0) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
max(max(i0, l1), l2) -> max(i0, max(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
max(x,y) where range of one is >= the other (ieee safe version) <| Explicit
max(x,y) where range of one is >= the other <| Explicit
MAXANISOTROPY
maxAnisotropy
MaxAnisotropy
maximum %s %s register index (%u) exceeded - note that the minimum index is %u%s
maximum %s %s register index (%u) exceeded%s
Maximum %s control point count (%u) exceeded (%u).
maximum %s register index exceeded, target has %d slots, manual bind to slot %s failed
maximum address register index exceeded
maximum bool register index exceeded
maximum cbuffer exceeded. target has %u slots
maximum cbuffer exceeded. target has %u slots, manual bind to slot %u failed
maximum constant register index exceeded - Try reducing number of constants referenced
maximum input register index exceeded
maximum loop register index exceeded
maximum number of inputs exceeded
maximum number of interface pointers exceeded (%s max is %u)
maximum number of samplers exceeded. %s target can have a maximum of %u samplers
Maximum of 3 cmp instructions allowed.
Maximum of 4 dp4 instructions allowed.
maximum predicate register index exceeded
maximum sampler register index exceeded
Maximum semantic index (%d) exceeded: %d
maximum temp register index exceeded
MAXLOD
MaxLOD
maxLOD
MaxLOD be in the range [-INF to +INF].  %f specified.
MAXMIPLEVEL
maxStack
MAXTESSELLATIONLEVEL
maxtessfactor
maxvertexcount
MaxVertexCount
members
memcpy
memmove
memory exhausted
memory space kind
memset
merge and flip discard_nz test with an earlier bieq comparison <| MR.GenSimplifyInstructionsOpt1_NoExcl
merge and flip discard_z test with an earlier bieq comparison <| MR.GenSimplifyInstructionsOpt1_NoExcl
merge discard_nz test with an earlier bine comparison <| MR.GenSimplifyInstructionsOpt1_NoExcl
merge discard_z test with an earlier bine comparison <| MR.GenSimplifyInstructionsOpt1_NoExcl
message
message size
method
Method and Parameters
Method.#%X
methods
MGxyNVHIWXYQ1234567
Microsoft
Microsoft (R) D3D Shader Disassembler
Microsoft (R) D3DX9 Shader Assembler 10.1
Microsoft (R) D3DX9 Shader Disassembler
Microsoft (R) HLSL Shader Compiler 10.1
Microsoft (R) LINK
Microsoft (R) Optimizing Compiler
Microsoft (R) Shader Linker
Microsoft C/C++ MSF 7.00
Microsoft C/C++ program database 2.00
Microsoft Corporation
min 1/max 0 -> sat <| MR.Gen_OptimizeEarlyTranslate_SAT_Excl
min float_literal <| SFPS
min fp_flags <| SFPS
min fp_range <| SFPS
min fp_specials <| SFPS
min of known positive identity <| Explicit
Min precision not allowed on dest parameter.
Min precision not allowed on predicate register.
Min precision not allowed on predicate/loop/addr register.
Min precision types not allowed for operand #%d of opcode #%d (counts are 1-based). 
min(a, b) -> cmp(a - b, b, a) <| MR.Gen_RequiredTranslate
min(i0, i1): if (i0 >= i1) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
min(i0, i1): if (i1 >= i0) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
min(min(i0, l1), l2) -> min(i0, min(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
min(x,y) where range of one is <= the other (ieee safe version) <| Explicit
min(x,y) where range of one is <= the other <| Explicit
MIN_LINEAR_MAG_MIP_POINT
MIN_LINEAR_MAG_POINT_MIP_LINEAR
MIN_MAG_LINEAR_MIP_POINT
MIN_MAG_MIP_LINEAR
MIN_MAG_MIP_POINT
MIN_MAG_POINT_MIP_LINEAR
MIN_POINT_MAG_LINEAR_MIP_POINT
MIN_POINT_MAG_MIP_LINEAR
min10float
min12int
min16f
min16float
min16i
min16int
min16u
min16uint
min2_8f
min8float
min8uint
MINFILTER
Minimum precision types used in a shader that does not have minimum precision support enabled. 
Minimum-precision data types
minLOD
MinLOD
MINTESSELLATIONLEVEL
MIPFILTER
MIPLODBIAS
MipLODBias
mipLODBias
MIPMAPLODBIAS
MIRROR
MIRROR_ONCE
MIRRORONCE
Mismatch between shader declaration of 11.1 double extensions and accompanying Shader Feature Info blob (or lack thereof). Both the shader must declare 11.1 double extensions use and a Shader Feature Info blob must specify the same thing as well, or neither should request it. 
Mismatch between shader declaration of 11.1 double extensions and shader declaration of double precision floats. If a shader declares 11.1 double extensions use it must also declare double precision float use. 
Mismatch between shader declaration of 11.1 shader extensions and accompanying Shader Feature Info blob (or lack thereof). Both the shader must declare 11.1 shader extensions use and a Shader Feature Info blob must specify the same thing as well, or neither should request it. 
Mismatch between shader declaration of double precision floats and accompanying Shader Feature Info blob (or lack thereof). Both the shader must declare double precision float use and a Shader Feature Info blob must specify the same thing as well, or neither should request it. 
Mismatch between shader declaration of minimum precision and accompanying Shader Feature Info blob (or lack thereof). Both the shader must declare minimum precision use and a Shader Feature Info blob must specify the same thing as well, or neither should request it. 
Mismatch between shader declaration of raw and structured buffers for shader 4_x and accompanying Shader Feature Info blob (or lack thereof). Both the shader must declare raw and structured buffer use and a Shader Feature Info blob must specify the same thing as well, or neither should request it. 
mixed
mj>zjZ
MNOPQRS
MODULATE
MODULATE2X
MODULATE4X
MODULATEALPHA_ADDCOLOR
MODULATECOLOR_ADDALPHA
MODULATEINVALPHA_ADDCOLOR
MODULATEINVCOLOR_ADDALPHA
modulo
More than 2 constants (even identical ones) cannot be read by an instruction. (There is one exception: this rule does not apply to the SINCOS instruction.)
MostRecentApplication
mov fp_flags <| SFPS
mov mov <| SFPS
mov of sampler register reduction <| Explicit
mova instruction can only write to the address register.
movc and comparison sequence reductions <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc float_literal <| SFPS
movc fp_flags <| SFPS
movc fp_specials <| SFPS
movc(!a,b,c) -> movc(a,c,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc((a<b),b,a) -> max(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc((a>=b),a,b) -> max(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a, and(b, c), 0) -> and(and(a, b), c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a, b, and(c, b)) -> and(or(a, c), b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a, b, i/ushr/l(a, n)) -> movc(a, b, 0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a, b, movc(c, b, d)) -> movc(or(a, c), b, d) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a, i/ushr/l(a, n), 0) -> i/ushr/l(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a, true, b) -> or(a, b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a,b,b) -> mov(b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a,b,c) -> append_arg(b, c) <| SMR.RangeDataAnalysis
movc(a,false,true) -> bieq(a, 0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a,true,false) -> bine(a, 0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(b & iv_pow2, (b & m) | -iv_pow2, b) -> ibfe(get_first_bit(iv_pow2), 0, (b&m)) <| MR.GenD3D10_OptimizeEarlyTranslate
movc(b & iv_pow2, b | -iv_pow2, b) -> ibfe(get_first_bit(iv_pow2), 0, b) <| MR.GenD3D10_OptimizeEarlyTranslate
movc(b & iv_pow2, bfi(w, 0, (b & m), -iv_pow2)) -> ibfe(get_first_bit(iv_pow2), 0, (b&m)) <| MR.GenD3D10_OptimizeEarlyTranslate
movc(b & iv_pow2, bfi(w, 0, b, -iv_pow2), b) -> ibfe(get_first_bit(iv_pow2), 0, b) <| MR.GenD3D10_OptimizeEarlyTranslate
movc(b, a, b) -> movc (b, a, 0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(blt(a, 0), |a|, a) -> abs(a) <| MR.GenD3D10PreMod_NoExcl
movc(bool b, bool b, false) -> mov b <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(bool b, FALSE, TRUE) -> not b <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(bool b, TRUE, bool c) -> or(b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(bool b, TRUE, FALSE) -> mov b <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(bool,x,0) -> and(bool,x) <| MR.GenSimplifyInstructionsOpt2_NoExcl
movc(c,a,ignore) -> mov(a) <| MR.GenSimplifyInstructionsAlways_Both
movc(c,d=movc(c,a,b),f) -> movc(c,a,f) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(c,f,d=movc(c,a,b)) -> movc(c,f,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(c,ignore,a) -> mov(a) <| MR.GenSimplifyInstructionsAlways_Both
movc(c,ignore,ignore) -> ignore(0) <| MR.GenSimplifyInstructionsAlways_Both
movc(false,b,c) -> append_arg(b) <| SMR.RangeDataAnalysis
movc(false,b,c) -> mov(c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(i/ushr(a, n),v1, v2) : if(lower_n_bits_are_zero(a, n)) -> movc (a, v1, v2) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(ishl(a, n),v1, v2) : if(upper_n_bits_are_zero(a, n)) -> movc (a, v1, v2) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(movc(a,FALSE,TRUE),b,c) -> movc(a,c,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(movc(a,TRUE,FALSE),b,c) -> movc(a,b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(true,b,c) -> append_arg(b) <| SMR.RangeDataAnalysis
movc(true,b,c) -> mov(b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(u/ishr/l(a, n), movc(a, b, c), d) -> movc(u/ishr/l(a, n), b, d) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc, binary_compute on same value -> binary_compute, movc <| MR.GenShuffleCompute_NoExcl
movc, binary_compute on values -> binary_compute, movc <| MR.GenShuffleCompute_NoExcl
movc, binary_compute on values lhs -> binary_compute, movc <| MR.GenShuffleCompute_Excl
movc, binary_compute on values rhs -> binary_compute, movc <| MR.GenShuffleCompute_Excl
movc, quat arg1 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
movc, quat arg1 on values lhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg1 on values rhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg2 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
movc, quat arg2 on values lhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg2 on values rhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg3 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
movc, quat arg3 on values lhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg3 on values rhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg4 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
movc, quat arg4 on values lhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg4 on values rhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, ternary arg1 on values -> ternary, movc <| MR.GenShuffleCompute_NoExcl
movc, ternary arg1 on values lhs -> ternary, movc <| MR.GenShuffleCompute_Excl
movc, ternary arg1 on values rhs -> ternary, movc <| MR.GenShuffleCompute_Excl
movc, ternary arg2 on values -> ternary, movc <| MR.GenShuffleCompute_NoExcl
movc, ternary arg2 on values lhs -> ternary, movc <| MR.GenShuffleCompute_Excl
movc, ternary arg2 on values rhs -> ternary, movc <| MR.GenShuffleCompute_Excl
movc, ternary arg3 on values -> ternary, movc <| MR.GenShuffleCompute_NoExcl
movc, ternary arg3 on values lhs -> ternary, movc <| MR.GenShuffleCompute_Excl
movc, ternary arg3 on values rhs -> ternary, movc <| MR.GenShuffleCompute_Excl
movc, unary_compute on values -> unary_compute, movc <| MR.GenShuffleCompute_NoExcl
movc, unary_compute on values lhs -> unary_compute, movc <| MR.GenShuffleCompute_Excl
movc, unary_compute on values rhs -> unary_compute, movc <| MR.GenShuffleCompute_Excl
MSAA Sample Index must be a literal
MSAA Sample Index must be in the range 0 to %u
msad bits_known <| SFPS
msad fp_flags <| SFPS
msad int_literal <| SFPS
msad int_range <| SFPS
msad4
mul float_literal <| SFPS
mul fp_flags <| SFPS
mul fp_range <| SFPS
mul of a half times add of same value identity <| Explicit
mul of a number times its inverse identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
mul of double one identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
mul of one identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
mul(1f,a) -> append_arg(a) <| SMR.RangeDataAnalysis
mul(fbool,a) -> append_arg(0f,a) <| SMR.RangeDataAnalysis
mul(fbool,finite a) -> append_arg(0f,a) <| SMR.RangeDataAnalysis
Mulitply by 1 reduces to no-op move <| Explicit
MultiByteToWideChar
multiple concrete base types specified
Multiple constant registers cannot be read by a matrix op.
Multiple dependent texture reads are disallowed (%s source param).  Texture read results can be used as an address for subsequent read, but the results from that read cannot be used as an address in yet another subsequent read.
Multiple fork phase programs cannot declare partially overlapping index ranges for output Patch Constant Data. One index range is from register [%d] to [%d], while the another is from [%d] to [%d].
Multiple fork phase programs declared the same component(s) of output patch constant register o[#d].
Multiple fork/join phase programs cannot declare partially overlapping index ranges for output Patch Constant Data. One index range is from register [%d] to [%d], while the another is from [%d] to [%d].
Multiple Hull Shader phases cannot call the same interface body. If this is an important feature, support could be considered in the future. Opcode #%d (count is 1-based)
Multiple Hull Shader phases cannot call the same subroutine. If this is an important feature, support could be considered in the future. Opcode #%d (count is 1-based)
Multiple input registers cannot be read by a matrix op.
Multiple input/texture registers cannot be read by a matrix op.
Multiple phase markers not permitted.  Aborting shader validation.
multiple variables found with the same user-specified location
multiply
Multiply by 0 reduces to literal 0 <| Explicit
Multiply by -1 reduces to NEG operation <| Explicit
Multiply by 2, 4, or 8 <| Explicit
MULTIPLYADD
MULTISAMPLEANTIALIAS
MultisampleEnable
MULTISAMPLEMASK
must be equal to the number of threads in the group (%d in this case).  %d elements were specified for g%d. 
Must use texture register a dest param for tex* instructions.
mutable
N ;K8s
N ;O }
N$_^[
N$H#E
N(;~0r
N@Qh(
N<`_^
N<+N8
N0]0j0
Named register components cannot appear to the left (xyzw order) of components that are not named in a given register. TessFactors are an exception. Affected register is input %d. 
Named register components cannot appear to the left (xyzw order) of components that are not named in a given register. TessFactors are an exception. Affected register is output %d in stream m%d. 
Named register components cannot appear to the left (xyzw order) of components that are not named in a given register. TessFactors are an exception. Affected register is output %d. 
namespace
namespace %s
NaN and infinity literals not allowed by shader model
need dictionary
Needs to be replaced with a real rule
neg float_literal <| SFPS
neg fp_flags <| SFPS
neg fp_range <| SFPS
neg fp_specials <| SFPS
negate
negate and divide modifiers cannot be combined
negate modifier match <| Explicit
Negate modifier not allowed for operand #%d of opcode #%d (counts are 1-based). 
negative bool less then another bool identity <| Explicit
Negative value compared with zero <| Explicit
Negative values for cmp and clip can be rordered <| Explicit
Nested
network down
network reset
network unreachable
NEVER
NEWFPO
NF;wPr
NJ2"v
Nl@;G
NLC;Y
NLG;y
no buffer space
no child process
no classes implement '%s'
No include handler specified, can't perform a #include. Use D3DX APIs or provide your own include handler.
no link
no lock available
no message
no message available
no protocol option
no space on device
no stream resources
no such device
no such device or address
no such file or directory
no such process
NoInline
nointerpolation
nointerpolation 
nointerpolation usage unsupported on %s
noise
Non system-generated input signature parameter (%s) cannot appear after a system generated value.
non-empty case statements must have break or return
non-literal parameter(s) found for attribute %s
non-matrix types cannot be declared 'row_major' or 'column_major'
non-numeric case expression
non-numeric sample count
non-numeric vertex count
non-scalar case expression
non-trivial object expressions not yet implemented
NonUniformResourceIndex
'NonUniformResourceIndex' requires shader model 5 or higher
nop instruction cannot be co-issued.
noperspective
noperspective 
noperspective centroid 
noperspective sample 
noperspective usage unsupported on %s
NOPQ9:?@H
NOPQRS
NoReturn
NORMAL
normal
Normal
NORMALDEGREE
normalize
normalize(normalize(v)) -> normalize(v) <| MR.GenSimplifyInstructionsOpt1_NoExcl
NORMALIZENORMALS
not a directory
not a socket
not a stream
Not all elements of SV_Position were written
NOT BEQ => BNE <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BGE => BLT (safe) <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BGE => BLT <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BIEQ => BINE <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BIGE => BILT <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BILT => BIGE <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BINE => BIEQ <| MR.GenSimplifyInstructionsOpt1_Excl
not bits_known <| SFPS
NOT BLT => BGE (safe) <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BLT => BGE <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BNE => BEQ <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BUGE => BULT <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BULT => BUGE <| MR.GenSimplifyInstructionsOpt1_Excl
not cannot be used with other modifiers
not connected
not enough actual parameters for macro '%s'
not enough memory
not fp_flags <| SFPS
not int_literal <| SFPS
not supported
NOT_EQUAL
notCached
note that in IEEE strict mode, all values are implicitly marked precise
Note that the %s component of %s%d was previously initialized, but then became uninitialized by a previous instruction (e.g. SINCOS clobbers components).
NOTEQUAL
NOTM+
notPaged
NTA;NP
nullify clip ops on known positive values <| MR.GenSimplifyInstructionsOpt1_NoExcl
nullify discard ops on known false values <| MR.GenSimplifyInstructionsOpt1_NoExcl
num32BitConstants
num32BitConstants must be defined for each RootConstants
number of Accelerator pointer tags
number of columns in a matrix
number of HLSL register indices
Number of instruction slots used too high: %d. Max. allowed is %d.
number of live ranges
number of modifiers
number of rows in a matrix
numDescriptors
NumDescriptors cannot be 0 (descriptor table slot [%u], root parameter [%u]).
Numeric variables ('%s') can't be shared; share the containing cbuffer instead
numthreads
nx1^_`abc"
o = $IsStandardLoad(a, chain) -> append_addressed(o, chain) (all sources) <| SMR.DataFlagAnalysis_NoPlaceHolder
o = dfuse(ab) -> o->append_dfuse() <| SMR.DataFlagAnalysis
O$H#E
O(RPj
O*9y]
O,_^]
O@_^]
O`;1t
O<;K<s
o0}2b3c4
O0d0h0l0p0t0x0
O0W0n0
o2#;y;
O4_^[
O4RPj
O8;HDu'
O8T>[
object element type cannot be an object type
object file name
Object filename.
object literals are not allowed inside functions
ObjectFileName
ObjectLength
ObjectPointerType
Objects not allowed in structures
object's templated type must have at least one element
oC%d already written. (oCn registers can only be written at most once each)
oCn registers may only be written using the mov instruction.
octal value truncated to 64 bits
Odd Fractional
oDepth
oDepth already written.
oDepth may not be written by the %s instruction.
oDepth may only be written using the mov instruction.
oDepthGE
oDepthLE
OEMId
OEMSymbolId
Offset
offset
Offset in physical section.
offset into UDT
offset of exception handler
offset texture instructions must take offset which can resolve to integer literal in the range -8 to 7
OH!D>D
OL;GPu
Ol9OtsL+Ot
OMAPFROM
OMAPTO
oMask
OMSetRenderTargets
On current device, %s requires the condition%s parameter to be boolean constant register (b#). 
On current device, %s requires the condition%s parameter to be predicate register (p0). 
one of "integer", "pow2", "fractional_even", or "fractional_odd"
one of "point", "line", "triangle_cw", or "triangle_ccw"
one of "tri", "quad", or "isoline"
one of '%s'
One of the instructions in a co-issue pair must write to alpha only (.a writemask).
Only 3_x and earlier targets are supported on this compiler.
Only 4_x targets supported on this compiler.
only a0.x is allowed as a relative address register in vs_1_1
Only immediate32 indexing permitted for operand #%d of opcode #%d (counts are 1-based). Aborting.
Only numeric types and strings are allowed as annotations
Only numeric variables ('%s') can be added to a cbuffer
only one address register reference allowed in a relative address expression
only one address register reference is allowed in a relative address expression
Only one use of texdepth is permitted.
Only single-dimensional object arrays are allowed
Only the mov instruction is allowed to write to the address register.
Only the mova instruction is allowed to write to the address register.
only vs_1_1, vs_2_0, vs_2_x, vs_2_sw, ps_2_0, ps_2_x, and ps_2_sw are supported for assembly fragments
operation canceled
operation in progress
operation not permitted
operation not supported
operation would block
operator
operator cannot be used with a bool lvalue
opqro
or bits_known <| SFPS
or fp_flags <| SFPS
or int_flags <| SFPS
or int_literal <| SFPS
or(a, b) : if( and_is_zero(a, b) ) -> iadd(a, b) <| MR.GenD3D10PostMod_Both
or(a, iv2) : if( can_reduce_or(a, iv2) ) -> or(a, get_reduced_or(a, iv2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
or(and(a, iv1), iv2) if(and_ne_zero(iv1, iv2) -> or(and(a, iv1 & ~iv2), iv2) <| MR.GenSimplifyInstructionsOpt1_Excl
or(bfalse,a) -> append_arg(a) <| SMR.RangeDataAnalysis
or(ine(x,0),ine(y,0)) -> ine(or(x,y),0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
or(or(a, b), c) : if( or_is_identity(c, b) ) -> or(a, c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
or(or(b, a), c) : if( or_is_identity(c, b) ) -> or(a, c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
or(true,a) -> append_arg(true,a) <| SMR.RangeDataAnalysis
original
OriginalFilename
OSG1t!A;
OSG1u
OSG5t:A;
OSGNt
oShOSGN
oStencilRef
Ot_[]
Out of memory
out of memory
out of memory during compilation
out of memory while parsing
Out of memory.
Out of memory. Aborting shader validation. 
out parameters require l-value arguments
out parameters require l-value arguments (given argument is implicitly const, such as a global)
Output
output
output %s%u used more than once
Output control point count must be [0..%d].  %d specified.  Opcode #%d (count is 1-based). 
Output index range declaration out of range.  Opcode #%d (count is 1-based). 
Output index range defined from %d to %d includes output register %d that was not declared. 
output parameter 
Output register cannot be dcl'd with usage 'sample'.
Output register dcl'd with usage+index psize0 takes as special meaning as a scalar, so no writemask must be specified (identical to full write mask). In addition, no other semantics may declared for the same output register as one assigned to psize0. 
Output signature cannot be defined for a library function.
Output signature does not specify component %d of register %d which is declared in the shader code. 
Output signature name mismatch with declaration in shader code for component %d in register %d. 
Output signature parameter #%d (1-based) specifies out of range register %d. 
Output signature parameter #%d (1-based) specifies register %d (or components in the register) that have already been defined. 
Output value '%s' is not completely initialized
Output variable 
output_consume fp_flags <| SFPS
outputcontrolpoints
OutputDebugStringA
OutputPatch
Outputs
outputtopology
Overflow for descriptor range (descriptor table slot [%u], root parameter [%u])
Overflow for shader register range: BaseShaderRegister=%u, NumDescriptor=%u; (descriptor table slot [%u], root parameter [%u]).
Overflow of resource binding range
Overlapping input index range decl encountered.  Opcode #%d (count is 1-based). 
Overlapping output index range decl encountered.  Opcode #%d (count is 1-based). 
overlapping output semantics
overlapping register semantics not yet implemented '%c%u'
overlapping register semantics not yet implemented 'c%u'
overloaded function not found
OverloadedOperator
ow t?
owner dead
OZw3(?
p$hD&
P@;Q@r!w
P<;Q<r+w
p<`t6
p<`t8
P0Q7B8G=
P0T0X0\0`0<1@1D1H1L1
P0T0X0\0`0d0
P0T0X0\0m2(3,30343
P0Z0}1,232E2
p4_^[
p4RfA
pack_matrix
Packed
packoffset
packoffset cannot have a target qualifier
packoffset is only allowed in a constant buffer
Parameter '%s' can be specified only once
parameter count mismatch (%s)
Parameter(s) for %s instruction must specify default swizzle (.xyzw, or none specified.) 
Parameter(s) for %s instruction must specify default swizzle (.xyzw, or none specified.).  The exception is (on shader version > ps_2_0) if the condition is the predicate register, p0, in which case a replicate swizzle must be used in order to select a component. i.e. .x | .y | .z | .w (or rgba equivalent) 
Parameter(s) for %s instruction must specify default swizzle (.xyzw, or none specified.).  The exception is (on shader version > vs_2_0) if the condition is the predicate register, p0, in which case a replicate swizzle must be used in order to select a component. i.e. .x | .y | .z | .w (or rgba equivalent) 
Parameter(s) for %s instruction must specify default swizzle (.xyzw, or none specified.).  The exception is if the condition is the predicate register, p0, in which case a replicate swizzle must be used in order to select a component. i.e. .x | .y | .z | .w (or rgba equivalent)
Parameters
partial precision is not supported for target %s. Min-precision types may offer similar functionality.
Partials
partitioning
partitioning mode
passes
PASSTHRU
Patch Constant
Patch constant signature name mismatch with declaration in shader code for component %d in register %d. 
Patch constant signature parameter #%d (1-based) specifies out of range register %d. 
Patch constant signature parameter #%d (1-based) specifies register %d (or components in the register) that have already been defined. 
Patch constant signature signature does not specify component %d of register %d which is declared in the shader code. 
Patch semantics must live in the enclosed type, outer semantic ignored.
patchconstantfunc
PATCHEDGESTYLE
PATCHSEGMENTS
-PCSGt=-
PCSGu<
PDATA
PDB is available at IL merge time
pdr_?
pdr_m
pdr_robj
pdr_s
pdr_sc
pdr_t
pdr_tb
pdr_ts
pdr_ub
pdr_us
pdr_ut
permission denied
PhAon9
phase
Phase marker cannot be co-issued.
phase this function is a member of for PGO multiphased builds
PhCLIT
PhCTAB
PhFXLC
PhISGNhISG1
PhISGNhISGN
PhLFS0hLFS0
PhLIBH
PHONG
PhOSGNhOSG1
PhOSGNhOSGN
PhRDEFhRDEF
PhSHEX
PhSTAT
PIXEL
Pixel Shader allows output semantics to be SV_Target, SV_Depth, SV_DepthGreaterEqual, SV_DepthLessEqual, SV_Coverage only, or SV_StencilRef.  Output signature parameter #%d (1-based) specifies semantic %s. 
pixel shader must minimally write all four components of %s
pixel shader must minimally write all four components of COLOR0
Pixel shader must minimally write to oC0 (with a mov instruction).
pixelfragment
PIXELSHADER
pixelshader
PixelShader
PIXELSHADERCONSTANT
PIXELSHADERCONSTANT1
PIXELSHADERCONSTANT2
PIXELSHADERCONSTANT3
PIXELSHADERCONSTANT4
PIXELSHADERCONSTANTB
PIXELSHADERCONSTANTF
PIXELSHADERCONSTANTI
Pj h8{
Pj(RSj
PjthSTAT
placement_mov fp_flags <| SFPS
placement_mov mov <| SFPS
Platform
PLt"=
PLwQt:
POINT
point
Point
pointer based on value of a symbol
POINTSCALE_A
POINTSCALE_B
POINTSCALE_C
POINTSCALEENABLE
POINTSIZE
POINTSIZE_MAX
POINTSIZE_MIN
POINTSPRITEENABLE
PointStream
pos cmp sequence -> sat <| MR.Gen_OptimizeEarlyTranslate_SAT_NoExcl
Position
POSITION
position
position already declared for input.  Opcode #%d (count is 1-based). 
position already declared for output.  Opcode #%d (count is 1-based). 
position declaration must have xyzw mask.  Opcode #%d (count is 1-based). 
POSITIONDEGREE
positiont
POSITIONT
PositionT
positive sqrt(x*x) identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
Possible %ss are:
Possible integer divide by zero
Post-call locations: 
potentially unintended use of a comma expression in a return statement
potentially unintended use of a comma expression in a variable initializer
pow(f, e) will not work for negative f, use abs(f) or conditionally handle negative values if you expect them
PPPPR
ppShader pointer is invalid
PQh(|
PQh0|
PQQhPh
PQQQQ
PQRhH
PQSVQ
PQSVW
PQVhp7
pragma
precise
precise 
Precise mask not permitted for opcode #%d (counts are 1-based). 
pred move(a) -> append_arg(a) <| SMR.RangeDataAnalysis
predicate doesn't allow min precision.
predicate parameter doesn't allow min precision.
Predicate register (p0) parameter to %s instruction must specify replicate swizzle in order to select component. i.e. .x | .y | .z | .w (or rgba equivalent)
Predicate register read, but uninitialized. Note that the predicate register must be written by setp before it is used, and that flow control instructions invalidate the predicate register's contents. Affected components(*): %s
predicates are not supported in this shader version
PREMODULATE
preshader
preshader abs -> max(i, neg(i)) <| MR.Gen_RequiredTranslate_Preshader
preshader sat -> min(max(i, 0), 1) <| MR.Gen_RequiredTranslate_Preshader
PRESW
Previous writer to the first source register of lrp instruction should apply the saturate destination modifier.  This ensures consistent behaviour across different hardware. Affected components(*) of first source register: %s
PRh m
PRh(m
PRh<m
PRh0|
PRIMID
primitive_id
primitiveID already declared for input.  Opcode #%d (count is 1-based). 
primitiveID already declared for output.  Opcode #%d (count is 1-based). 
printf
printf 
Prior locations: 
private
Process2DQuadTessFactorsAvg
Process2DQuadTessFactorsMax
Process2DQuadTessFactorsMin
ProcessIsolineTessFactors
ProcessQuadTessFactorsAvg
ProcessQuadTessFactorsMax
ProcessQuadTessFactorsMin
ProcessTriTessFactorsAvg
ProcessTriTessFactorsMax
ProcessTriTessFactorsMin
ProductName
ProductVersion
program
PROJECTED
PROJECTIONTRANSFORM
propagate range info through mov <| Explicit
propagate special floating point values through add <| Explicit
propagate special floating point values through asin <| Explicit
propagate special floating point values through atan2 <| Explicit
propagate special floating point values through div <| Explicit
propagate special floating point values through log <| Explicit
propagate special floating point values through mul <| Explicit
propagate special floating point values through rcp <| Explicit
propagate special floating point values through rsq <| Explicit
propagate special floating point values through sqrt <| Explicit
propogate swizzles <| Explicit
protected
proto
protocol error
protocol not supported
PS Inner Coverage
PS input vCoverage already declared.  Opcode #%d (count is 1-based). 
PS input vCoverage declared, cannot also declare vInnerCoverage (features are mutually exclusive).  Opcode #%d (count is 1-based). 
PS input vInnerCoverage already declared.  Opcode #%d (count is 1-based). 
PS input vInnerCoverage declared, cannot also declare vCoverage (features are mutually exclusive).  Opcode #%d (count is 1-based). 
PS input vInnerCoverage requires feature flag enableInnerCoverage.  Opcode #%d (count is 1-based). 
PS ouputs must be declared in slots less than UAVs.  Output declared in slot %d while UAV declared in slot %d.  Opcode #%d (count is 1-based). 
PS output coverage mask already declared.  Opcode #%d (count is 1-based). 
PS output depth already declared.  Opcode #%d (count is 1-based). 
PS output depth already declared.  The previous declaration was of a different type.  Opcode #%d (count is 1-based). 
PS Output Stencil Ref
PS output stencil ref already declared.  Opcode #%d (count is 1-based). 
PS output stencil ref requires feature flag enableStencilRef.  Opcode #%d (count is 1-based). 
ps.1.0
ps.1.1
ps.1.2
ps.1.3
ps.1.4
ps.2.0
ps.2.a
ps.2.b
ps.2.sw
ps.2.x
ps.3.0
ps.3.sw
ps_%d_%d
ps_1_0
ps_1_0 is no longer supported.  It turned out that pixel shader capable hardware will always support at least ps_1_1 (which is not as limited a model as ps_1_0 was). To convert a ps_1_0 shader up to ps_1_1, the only change needed is to make the version number 1_1. 
ps_1_0 is no longer supported; using ps_1_1
ps_1_1
ps_1_2
ps_1_3
ps_1_4
ps_1_x is no longer supported; use /Gec in fxc to automatically upgrade to ps_2_0
ps_1_x is no longer supported; using ps_2_0
ps_2_0
ps_2_0 does not support predication.
ps_2_a
ps_2_b
ps_2_sw
ps_2_x
ps_2_x extended instruction not supported by the hardware (dynamic flow control not supported).
ps_2_x extended instruction not supported by the hardware (gradient instructions not supported).
ps_2_x extended instruction not supported by the hardware (neither predication or static flow control supported).
ps_2_x extended instruction not supported by the hardware (predication not supported).
ps_2_x extended instruction not supported by the hardware (static flow control not supported).
ps_3_0
ps_3_sw
ps_4_0
ps_4_0_level_9_0
ps_4_0_level_9_1
ps_4_0_level_9_3
ps_4_1
ps_5_0
ps_5_1
PSG1t
psize
Psize
PSIZE
PSize
PSIZE must be a scalar
PSj j
PSjPj
PSRWh
PSVWj
public
PVh |
PVh$+
PVSRQ
PVWSj
PWhp0
PWhtm
PWjPj
PWRSj
PWSjX
PYRAMIDALQUAD
Q ;P 
Q,_^[
Q0X0d0h0
qD;p s
qD;p(s
QhCTAB
QhDBUG
QhPRES
Qj hhR
Qj`RPj
Qjbh` 
Qjch` 
Qjih` 
Qjsj@h
Qjsj@j
Qjtj@j
Qjuj@j
Qkkbal
QL@B;G
QL1A$
QOMthis
QPh \
QPh >
QPh m
QPh8=
QPj0j
QPRh(|
QPRWV
QPVh(|
QPWhFX10
QQQQf
QQQQP
QQSVW
QRh |
QRh0|
QRh6u
QRSTUV
QSVW3
QSVWh
QUADEDGE
QUADINT
QUADRATIC
Quadrilateral
QueryPerformanceCounter
QUINTIC
QVPh0
QVPhh
QVPhh|
QVPhP
QVPhp
QVPhx
Qw4tg
QWPhLIBF
QWPhRTS0
R ;P u[
r | (a & n) : if( known_bfi_bitmask_noshift(n,a,r) && and_is_zero(n,r) ) -> bfi(bfi_bitwidth_noshift(n,a,r), 0i, a, r) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
r | (a = bfi(w, o, v, 0i)) : if( mask_is_zero(w,o,r) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_Excl
r | (n & a) : if( known_bfi_bitmask_noshift(n,a,r) && and_is_zero(n,r) ) -> bfi(bfi_bitwidth_noshift(n,a,r), 0i, a, r) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
r | a : if( known_bfi_bitmask_noshift_impmask(a,r) && and_is_zero(a,r) ) -> bfi(bfi_bitwidth_noshift_impmask(a,r), 0i, a, r) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
r HPQh
r HPQh8j
r HPRh
r PRWh
r SQh
r%HPQWh
r%HPSQh
r%HPSWh
r&PQWh
r&PRWh
r(QPh|
r)HPh
r.HPRh
r/w+cnt
r:N;r
r;;K$r
r@HPSR
r=HPQh
r'=OSGNu 
r0 must be written by shader. Uninitialized component%s(*): %s
r0 must be written by shader. Uninitialized component%s(*): %s. Note that an unfortunate effect of the phase marker in the shader is that the moment it is encountered in certain hardware, values previously written to alpha in any r# register, including r0, are lost. So after a phase marker, the alpha component of r0 must be written.
r0 must be written by shader. Uninitialized component%s(*): %s. Note that when texcrd is used with a .xy(==.rg) writemask, as it is in this shader, a side effect is that anything previously written to the z(==b) component of the destination r# register is lost and this component becomes uninitialized. The blue component of r0 must to be written after the texcrd.
r0 must be written by shader. Uninitialized component%s(*): %s. Note that when texcrd is used with a .xy(==.rg) writemask, as it is in this shader, a side effect is that anything previously written to the z(==b) component of the destination r# register is lost and this component becomes uninitialized. The blue component of r0 must to be written after the texcrd. Also: Note that an unfortunate effect of the phase marker in the shader is that the moment it is encountered in certain hardware, values previously written to alpha in any r# register, including r0, are lost. So after a phase marker, the alpha component of r0 must be written.
R0W0i0y0+1h1
R1h58
r4;r8
r4HPRh
r6;K,r
r7HPWh
race condition writing to shared memory detected, consider making this write conditional.
race condition writing to shared memory detected, note that threads will be writing the same value, but performance may be diminished due to contention.
race condition writing to shared resource detected, consider making this write conditional.
race condition writing to shared resource detected, note that threads will be writing the same value, but performance may be diminished due to contention.
radians
range sequence reduction <| Explicit
RANGEFOGENABLE
raSearch
raSearchStart
Raster Ordered UAVs
Rasterizer
rasterizer
RasterizerOrdered objects are only allowed in 5.0+ pixel shaders
RasterizerOrderedBuffer
RasterizerOrderedByteAddressBuffer
RasterizerOrderedStructuredBuffer
RasterizerOrderedTexture1D
RasterizerOrderedTexture1DArray
RasterizerOrderedTexture2D
RasterizerOrderedTexture2DArray
RasterizerOrderedTexture3D
RasterizerState
Raw or Structured buffers can't be declared in shader model 4_* VS/GS/PS without enabling them via a global flags declaration.. 
raw_buffer
RawDensityFactor
RawDetailFactor
RawEdgeFactors
rcp float_literal <| SFPS
rcp fp_flags <| SFPS
rcp fp_range <| SFPS
rcp fp_specials <| SFPS
rcp(mul(x, rsq(x)) = rsq(x) identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
rcp_approx
rcp_approx float_literal <| SFPS
rcp_approx fp_flags <| SFPS
rcp_approx fp_range <| SFPS
rcp_approx fp_specials <| SFPS
RDEFt
RDEFt^
rE;S s
Read allowed.
Read of uninitialized component%s(*) in %s%d: %s
Read of uninitialized component%s(*) in %s%d: %s. Note that an unfortunate effect of the phase marker earlier in the shader is that the moment it is encountered in certain hardware, values previously written to alpha in any r# register, including the one noted here, are lost. In order to read alpha from an r# register after the phase marker, write to it first.
Read of uninitialized component%s(*) in %s%d: %s. Note that when texcrd is used with a .xy(==.rg) writemask, as it is in this shader, a side effect is that anything previously written to the z(==b) component of the destination r# register is lost and this component becomes uninitialized. In order to read blue again, write to it first.
Read of uninitialized component%s(*) in %s%d: %s. Note that when texcrd is used with a .xy(==.rg) writemask, as it is in this shader, a side effect is that anything previously written to the z(==b) component of the destination r# register is lost and this component becomes uninitialized. In order to read blue again, write to it first. Also: Note that an unfortunate effect of the phase marker earlier in the shader is that the moment it is encountered in certain hardware, values previously written to alpha in any r# register, including the one noted here, are lost. In order to read alpha from an r# register after the phase marker, write to it first.
read only file system
ReadFile
Reading from texture buffers is unsupported on %s
reading uninitialized value
Reading uninitialized value
redefinition of '%s'
Redefinition of derivative, derivatives may only be assigned once.
redefinition of formal parameter '%s'
Redefinition of pass "%s"
redefinition of type with interface
redefinition of type with struct/class
reduce literal lit instruction <| Explicit
reduce mov instruction <| Explicit
refactoringAllowed
reference
Reference of register oDepth does mot match declaration (dcl_oDepthGE or dcl_oDepthLE).  Opcode #%d, operand #%d (counts are 1-based). 
Reference of register oDepthGE does mot match declaration (dcl_oDepth or dcl_oDepthLE).  Opcode #%d, operand #%d (counts are 1-based). 
Reference of register oDepthLE does mot match declaration (dcl_oDepth or dcl_oDepthGE).  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared components of indexable temp x%d[] within relative index of an operand.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared components of indexable temp x%d[].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared components of input vCycleCounter.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared components of input vInputThreadGroupID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared components of input vInputThreadID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared components of input vInputThreadIDInGroup.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared constant buffer cb%d[].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared immediate constant buffer.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared indexable temp x%d[].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of index range input starting at base v%s[%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of index range input starting at base vcp[][%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of index range input starting at base vocp[][%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of index range input starting at base vpc[%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of input v%s[%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of input vcp[][%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of input vocp[][%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of input vpc[%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input vInputThreadIDInGroupFlattened.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared output or undeclared components of index range output starting at base o[%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared output or undeclared components of output o%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register oDepth.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register oDepthGE.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register oDepthLE.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register oMask.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register oStencilRef.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vCoverage.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vForkPhaseInstanceID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vGSInstanceID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vInnerCoverage.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vJoinPhaseInstanceID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vOutputControlPointID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vPrimitiveID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared resource t%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared sampler s%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared stream m%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared temp r%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared thread group shared memory g%d[].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared UAV u%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of bounds, [%d], on cb%d[size==%d] (if size is listed as 0, it means default size is used, which is %d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of bounds, [%d], on g%d[size==%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of bounds, [%d], on immediate constant buffer [size==%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of bounds, [%d], on x%d[size==%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of bounds, cb%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of range of indexable temp x%d[] within relative index of an operand.  Index [%d] specified, but based on the indexable temp declaration, the max index allowed is [%d].  Operand #%d of opcode #%d (counts are 1-based). Aborting.
Reference out of range on vertex axis for input v[%d][].  Input control point has %d vertices.  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of range on vertex axis for input v[%d][].  Input primitive type has %d vertices.  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of range on vertex axis for input vcp[%d][].  Input control point has %d vertices.  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of range on vertex axis for input vocp[%d][].  Output control points has %d vertices.  Opcode #%d, operand #%d (counts are 1-based). 
reflect
refract
Reg num: %d for %s source param on matrix instruction causes attempt to access out of range register number %d. Max allowed for this type is %d.
RegCloseKey
RegEnumKeyExA
register
register %s not valid
Register %s%d has already been declared.
Register data that has been read by a texbem or texbeml instruction cannot be read later, except by another texbem/l.
register offset must be a literal scalar expression
register or offset bind %s not valid
register or offset bind %s.%s not valid
Register r%d (and thus texture stage %d) already used as a destination for a tex* instruction in this block of the shader. Reuse of a texture stage in ps_1_4 may only be accmplished by splitting the tex* ops across a phase marker.
register type kind
RegisterId
Registers in an input index range cannot have system names associated with them (TessFactors are an exception).  Input register %s[%d] has a name and is in an index range from %d to %d. 
Registers in an output index range cannot have system names associated with them (TessFactors are an exception).  Output register o%d has a name and is in an index range from o%d to o%d. 
RegOpenKeyExA
RegOpenKeyExW
RegQueryValueExA
RegQueryValueExW
reinterpret_cast
Related TessFactor names (such as edges) must be declared in the same component of consecutive Patch Constant registers, in the correct order. %s expected in %s[%d].%s since %s is in %s[%d].%s.
Related TessFactor names (such as edges) must be declared in the same component of consecutive Patch Constant registers, in the correct order. %s is in %s[%d].%s, which would put %s past the end of the available registers, since it is %d name after %s in the order.
Relative address for input (v#) can only be aL register (%s source param).
Relative address must specify a single component selector (.x, .y, .z or .w) to indicate relative address component. Aborting validation.
relative address references too deep
Relative address register for constant (c#) must be a# register or aL register (%s source param).
Relative address register must be a# register or aL register (%s source param).
Relative address register must be aL register (%s source param).
relative addressing not allowed for pixel shaders
relative addressing not supported in vs_1_0 instruction set
Relative addressing of constant register must reference a0.x only.
Relative addressing of destination not permitted on destination in this shader model.
Relative addressing of destination only permitted on output registers (o#).
relative addressing of destination parameters is not supported in this shader version
Relative addressing of o# register requires aL register.
relative addressing of predicates is not supported in this shader version
Relative addressing of source register only permitted on input (v#) and constant (c#) registers (%s source param).
Relative addressing only permitted on constant registers (%s source param).
Relative addressing only permitted on input (v#) registers (%s source param).
Relative indexing input register from base %s[%d] not allowed when register %d has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing input register from base %s[0] not allowed when register 0 has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing input register from base vcp[][%d] not allowed when register %d has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing input register from base vcp[0] not allowed when register 0 has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing input register from base vocp[][%d] not allowed when register %d has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing input register from base vpc[%d] not allowed when register %d has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing input register from base vpc[0] not allowed when register 0 has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing not allowed for cb%d since it was not declared for dynamic indexing..  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing output register from base o[%d] not allowed when register %d has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing output register from base o[0] not allowed when register 0 has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
RelativeVirtualAddress
ReleaseSRWLockExclusive
ReleaseSRWLockShared
relocCRC
remove
Remove args for CBuffers that are never read <| Explicit
remove clip chains that are merged with known-success clips <| MR.GenSimplifyInstructionsOpt1_NoExcl
remove clips that are merged with known-success clips <| MR.GenSimplifyInstructionsOpt1_NoExcl
remove discard chains that are merged with known-success discards <| MR.GenSimplifyInstructionsOpt1_NoExcl
remove discards that are merged with known-success discards <| MR.GenSimplifyInstructionsOpt1_NoExcl
Remove temp array stores that are immediately overwritten <| Explicit
rendertarget_array_index
renderTargetArrayIndex already declared for input.  Opcode #%d (count is 1-based). 
renderTargetArrayIndex already declared for output.  Opcode #%d (count is 1-based). 
renderTargetArrayIndex or viewportArrayIndex must have scalar mask in declaration.  Opcode #%d (count is 1-based). 
RenderTargetView
RenderTargetWriteMask
reorder instructions to minimize register load <| Explicit
rep doesn't allow min precision on parameter.
rep requires parameter to be integer constant register (i#). 
REPLACE
replace bitwise double-complement with move <| MR.GenSimplifyInstructionsOpt1_NoExcl
Required TessFactor name %s for %s domain not found declared anywhere in Patch Constant data. 
Reserved bit(s) set in dcl info token!  Aborting validation.
Reserved bit(s) set in destination parameter token!  Aborting validation.
Reserved bit(s) set in instruction parameter token!  Aborting validation.
Reserved bit(s) set in parameter %d source token!  Aborting validation.
Reserved bit(s) set in relative address token for source parameter %d!  Aborting validation.
Reserved bit(s) set in source %d parameter token!  Aborting validation.
reserved0
resinfo
resinfo fp_flags <| SFPS
resinfo requires resource declared as texture1D/2D/3D/Cube/1DArray/2DArray/2DMS/2DMSArray.  Opcode #%d, operand #%d (counts are 1-based). 
resinfo_uint fp_flags <| SFPS
resource
resource '%s' binding conflicts with template shader
resource '%s' binding not present in template shader
Resource being indexed is uninitialized.
Resource bind info for
resource deadlock would occur
Resource dimension and return type extended opcodes not expected on opcode #%d (counts are 1-based). 
Resource t%d already declared.  Opcode #%d (count is 1-based). 
resource unavailable try again
Resources being indexed cannot come from conditional expressions, they must come from literal expressions.
resources such as textures, samplers or UAVs cannot contain other resources
RestartStrip
result
result out of range
RESULTARG
ret can only be followed by case/default/endswitch/endloop/else/endif/label. Opcode #%d (count 1-based). Aborting validation.
'ret' instruction not permitted from inside any flow control block. Aborting shader validation. 
return
return address of the frame
return C++ style UDT
return fp_flags <| SFPS
return from interrupt
return never match (to NOP) <| MR.GenSimplifyInstructionsAlways_Both
return type of texture too large. Cannot exceed 4 components
return(a,bieq(x,0)) -> returnn(a,x) <| MR.Gen_PreModTarget_Both
return(a,bine(x)) -> return(a,x) <| MR.Gen_PreModTarget_Both
return(a,not(x)) -> returnn(a,x) <| MR.Gen_PreModTarget_Both
return_consume fp_flags <| SFPS
returna match <| MR.GenD3D10PostMod_Both
REV_SUBTRACT
reversebits
reversebits bits_known <| SFPS
reversebits fp_flags <| SFPS
reversebits int_literal <| SFPS
reversebits(i) -> and/shift/or sequence <| MR.Gen_RequiredTranslate
REVSUBTRACT
rFHPR
RhSPDB
rI;S s
Root descriptor flag values can only be 0 or flag enum values, found: '%s'
Root descriptor flags cannot be specified for root_sig_1_0
Root descriptor flags cannot specify more than one DATA_* flag at a time (root descriptor flags %x).
Root parameter [%u] descriptor table entry [%u] specifies RegisterSpace=%#x, which is invalid since RegisterSpace values in the range [%#x,%#x] are reserved for system use.
Root parameter [%u] specifies RegisterSpace=%#x, which is invalid since RegisterSpace values in the range [%#x,%#x] are reserved for system use.
root signature
Root signature flag values can only be 0 or flag enum values, found: '%s'
RootConstants
RootFlags
RootFlags cannot be specified more than once
rootsig_1_0
rootsig_1_1
RootSignature
RootSignature attribute parameter must be a string
RootSignature creation failed: %s
RootSignature is allowed only for 5.0+ targets
RootSignature is not allowed in HS patch constant function
RootSignature verification failed: %s
round
round float_literal <| SFPS
round fp_flags <| SFPS
round fp_range <| SFPS
round fp_specials <| SFPS
round_ne
round_ni
round_pi
round_z
RoundedDensityFactor
RoundedDetailFactorr
RoundedEdgeFactors
RoundedInsideFactor
RoundedInsideFactors
row_major
row_major 
row_major %s%ux%u
RPCRT4.dll
RPLYP
RPLYte
RPQVj
RQPhP
RQVQj
RShLI
rsq float_literal <| SFPS
rsq fp_flags <| SFPS
rsq fp_range <| SFPS
rsq fp_specials <| SFPS
rsq result can be assumed positive <| Explicit
rsq(x) * rsq(x) -> rcp(x) <| MR.GenSimplifyInstructionsOpt1_Excl
rsq(x) * rsq(x) -> rcp(x) for positive x <| MR.GenSimplifyInstructionsOpt1_Excl
rsqrt
RTINDEX
ruledisable
R-value Reference
RWBuffer
RWByteAddressBuffer
RWhLI
RWStructuredBuffer
RWStructuredBuffer(Decrementable)
RWStructuredBuffer(Incrementable)
RWStructuredBuffers may increment or decrement their counters, but not both.
RWTexture1D
RWTexture1DArray
RWTexture2D
RWTexture2DArray
RWTexture3D
s #w 
S$#W$
s(+K PQ
S@Ph(
S@Phx
S_ALIGN
S_ANNOTATION
S_ANNOTATIONREF
S_ARMSWITCHTABLE
S_ASSOCIATION
S_ATTR_FRAMEREL
S_ATTR_MANYREG
S_ATTR_REGISTER
S_ATTR_REGREL
S_BLOCK16
S_BLOCK32
S_BLOCK32_ST
S_BPREL16
S_BPREL32
S_BPREL32_16t
S_BPREL32_ENCTMP
S_BPREL32_INDIR
S_BPREL32_INDIR_ENCTMP
S_BPREL32_ST
S_BUILDINFO
S_CALLEES
S_CALLERS
S_CALLSITEINFO
S_CEXMODEL16
S_CEXMODEL32
S_COBOLUDT
S_COBOLUDT_16t
S_COBOLUDT_ST
S_COFFGROUP
S_COMPILE
S_COMPILE2
S_COMPILE2_ST
S_COMPILE3
S_CONSTANT
S_CONSTANT_16t
S_CONSTANT_ST
S_CVRESERVE
S_DATAREF
S_DATAREF_ST
S_DEFRANGE
S_DEFRANGE_CONSTVAL_FULL_SCOPE
S_DEFRANGE_DPC_PTR_TAG
S_DEFRANGE_FRAMEPOINTER_REL
S_DEFRANGE_FRAMEPOINTER_REL_FULL_SCOPE
S_DEFRANGE_GLOBALSYM_FULL_SCOPE
S_DEFRANGE_HLSL
S_DEFRANGE_REGISTER
S_DEFRANGE_REGISTER_REL
S_DEFRANGE_REGISTER_REL_INDIR
S_DEFRANGE_SUBFIELD
S_DEFRANGE_SUBFIELD_REGISTER
S_DISCARDED
S_DPC_SYM_TAG_MAP
S_END
S_ENDARG
S_ENTRYTHIS
S_ENVBLOCK
S_EXPORT
S_FILESTATIC
S_FRAMECOOKIE
S_FRAMEPROC
S_FRAMEREG
S_GDATA_HLSL
S_GDATA_HLSL32
S_GDATA_HLSL32_EX
S_GDATA16
S_GDATA32
S_GDATA32_16t
S_GDATA32_ST
S_GMANDATA
S_GMANDATA_ST
S_GMANPROC
S_GMANPROC_ST
S_GPROC16
S_GPROC32
S_GPROC32_16t
S_GPROC32_ID
S_GPROC32_ST
S_GPROC32EX
S_GPROC32EX_ID
S_GPROCIA64
S_GPROCIA64_ID
S_GPROCIA64_ST
S_GPROCMIPS
S_GPROCMIPS_16t
S_GPROCMIPS_ID
S_GPROCMIPS_ST
S_GTHREAD32
S_GTHREAD32_16t
S_GTHREAD32_ST
S_HEAPALLOCSITE
S_HOTPATCHFUNC
S_INLINEES
S_INLINESITE
S_INLINESITE_END
S_INLINESITE2
S_LABEL16
S_LABEL32
S_LABEL32_ST
S_LDATA_HLSL
S_LDATA_HLSL32
S_LDATA_HLSL32_EX
S_LDATA16
S_LDATA32
S_LDATA32_16t
S_LDATA32_ST
S_LMANDATA
S_LMANDATA_ST
S_LMANPROC
S_LMANPROC_ST
S_LOCAL
S_LOCAL_DPC_GROUPSHARED
S_LOCALSLOT
S_LOCALSLOT_ST
S_LPROC16
S_LPROC32
S_LPROC32_16t
S_LPROC32_DPC
S_LPROC32_DPC_ID
S_LPROC32_ID
S_LPROC32_ST
S_LPROC32EX
S_LPROC32EX_ID
S_LPROCIA64
S_LPROCIA64_ID
S_LPROCIA64_ST
S_LPROCMIPS
S_LPROCMIPS_16t
S_LPROCMIPS_ID
S_LPROCMIPS_ST
S_LPROCREF
S_LPROCREF_ST
S_LTHREAD32
S_LTHREAD32_16t
S_LTHREAD32_ST
S_MANCONSTANT
S_MANFRAMEREL
S_MANFRAMEREL_ST
S_MANMANYREG
S_MANMANYREG_ST
S_MANMANYREG2
S_MANMANYREG2_ST
S_MANREGISTER
S_MANREGISTER_ST
S_MANREGREL
S_MANREGREL_ST
S_MANSLOT
S_MANSLOT_ST
S_MANTYPREF
S_MANYREG
S_MANYREG_16t
S_MANYREG_ST
S_MANYREG2
S_MANYREG2_ST
S_OBJNAME
S_OBJNAME_ST
S_OEM
S_PARAMSLOT
S_PARAMSLOT_ST
S_PDBMAP
S_POGODATA
S_PROC_ID_END
S_PROCREF
S_PROCREF_ST
S_PUB16
S_PUB32
S_PUB32_16t
S_PUB32_ST
S_REF_MINIPDB
S_REF_MINIPDB2
S_REGISTER
S_REGISTER_16t
S_REGISTER_ST
S_REGREL16
S_REGREL32
S_REGREL32_16t
S_REGREL32_ENCTMP
S_REGREL32_INDIR
S_REGREL32_INDIR_ENCTMP
S_REGREL32_ST
S_RESERVED1
S_RESERVED2
S_RESERVED3
S_RESERVED4
S_RETURN
S_SECTION
S_SEPCODE
S_SKIP
S_SLINK32
S_SOURCELINK
S_SSEARCH
S_STATICLOCAL
S_THUNK16
S_THUNK32
S_THUNK32_ST
S_TOKENREF
S_TRAMPOLINE
S_UDT
S_UDT_16t
S_UDT_ST
S_UNAMESPACE
S_UNAMESPACE_ST
S_VFTABLE16
S_VFTABLE32
S_VFTABLE32_16t
S_WITH16
S_WITH32
S_WITH32_ST
S<9z$
S<G;z$
s0;z<
s4;s8
s8;z4
S9~<v;
sample
SAMPLE
Sample
sample 
Sample Bias value is limited to the range [-16.00, 15.99], using %f instead of %f
sample count must be non-zero
sample interpolation usage unsupported on %s
Sample interpolation usage unsupported on %s
sample/_l/_d requires resource declared as texture1D/2D/3D/Cube/1DArray/2DArray.  Opcode #%d, operand #%d (counts are 1-based). 
sample/_l/_d/_cl_s instructions require sampler declared in default mode.  Opcode #%d, operand #%d (counts are 1-based). 
sample_* instructions require resource to be declared to return UNORM, SNORM or FLOAT.  Opcode #%d, operand #%d (counts are 1-based). 
sample_b
sample_b requires resource declared as texture1D/2D/3D/Cube/1DArray/2DArray.  Opcode #%d, operand #%d (counts are 1-based). 
sample_b requires sampler declared in default mode.  Opcode #%d, operand #%d (counts are 1-based). 
sample_b_cl_s
sample_c
sample_c_* instructions require resource declared as texture1D/2D/Cube, but arrays not allowed.  Opcode #%d, operand #%d (counts are 1-based). 
sample_c_* instructions require resource declared as texture1D/2D/Cube/1DArray/2DArray/CubeArray.  Opcode #%d, operand #%d (counts are 1-based). 
sample_c_* instructions require sampler declared in comparison mode.  Opcode #%d, operand #%d (counts are 1-based). 
sample_c_cl_s
sample_c_lz
sample_c_lz_s
sample_cl_s
sample_d
sample_d_cl_s
sample_l
sample_l_s
sample1d fp_flags <| SFPS
sample1d_a fp_flags <| SFPS
sample1d_a_o fp_flags <| SFPS
sample1d_a_o_cl_s fp_flags <| SFPS
sample1d_bias fp_flags <| SFPS
sample1d_bias_a fp_flags <| SFPS
sample1d_bias_a_o fp_flags <| SFPS
sample1d_bias_a_o_cl_s fp_flags <| SFPS
sample1d_bias_l fp_flags <| SFPS
sample1d_bias_o fp_flags <| SFPS
sample1d_bias_o_cl_s fp_flags <| SFPS
sample1d_c fp_flags <| SFPS
sample1d_c_a fp_flags <| SFPS
sample1d_c_a_o fp_flags <| SFPS
sample1d_c_a_o_cl_s fp_flags <| SFPS
sample1d_c_lz fp_flags <| SFPS
sample1d_c_lz_a fp_flags <| SFPS
sample1d_c_lz_a_o fp_flags <| SFPS
sample1d_c_lz_a_o_s fp_flags <| SFPS
sample1d_c_lz_o fp_flags <| SFPS
sample1d_c_lz_o_s fp_flags <| SFPS
sample1d_c_o fp_flags <| SFPS
sample1d_c_o_cl_s fp_flags <| SFPS
sample1d_dd fp_flags <| SFPS
sample1d_dd_a fp_flags <| SFPS
sample1d_dd_a_o fp_flags <| SFPS
sample1d_dd_a_o_cl_s fp_flags <| SFPS
sample1d_dd_o fp_flags <| SFPS
sample1d_dd_o_cl_s fp_flags <| SFPS
sample1d_lod fp_flags <| SFPS
sample1d_lod_a fp_flags <| SFPS
sample1d_lod_a_o fp_flags <| SFPS
sample1d_lod_a_o_s fp_flags <| SFPS
sample1d_lod_l fp_flags <| SFPS
sample1d_lod_o fp_flags <| SFPS
sample1d_lod_o_s fp_flags <| SFPS
sample1d_o fp_flags <| SFPS
sample1d_o_cl_s fp_flags <| SFPS
sample2d fp_flags <| SFPS
sample2d_a fp_flags <| SFPS
sample2d_a_o fp_flags <| SFPS
sample2d_a_o_cl_s fp_flags <| SFPS
sample2d_bias fp_flags <| SFPS
sample2d_bias_a fp_flags <| SFPS
sample2d_bias_a_o fp_flags <| SFPS
sample2d_bias_a_o_cl_s fp_flags <| SFPS
sample2d_bias_l fp_flags <| SFPS
sample2d_bias_o fp_flags <| SFPS
sample2d_bias_o_cl_s fp_flags <| SFPS
sample2d_c fp_flags <| SFPS
sample2d_c_a fp_flags <| SFPS
sample2d_c_a_o fp_flags <| SFPS
sample2d_c_a_o_cl_s fp_flags <| SFPS
sample2d_c_lz fp_flags <| SFPS
sample2d_c_lz_a fp_flags <| SFPS
sample2d_c_lz_a_o fp_flags <| SFPS
sample2d_c_lz_a_o_s fp_flags <| SFPS
sample2d_c_lz_o fp_flags <| SFPS
sample2d_c_lz_o_s fp_flags <| SFPS
sample2d_c_o fp_flags <| SFPS
sample2d_c_o_cl_s fp_flags <| SFPS
sample2d_dd fp_flags <| SFPS
sample2d_dd_a fp_flags <| SFPS
sample2d_dd_a_o fp_flags <| SFPS
sample2d_dd_a_o_cl_s fp_flags <| SFPS
sample2d_dd_o fp_flags <| SFPS
sample2d_dd_o_cl_s fp_flags <| SFPS
sample2d_lod fp_flags <| SFPS
sample2d_lod_a fp_flags <| SFPS
sample2d_lod_a_o fp_flags <| SFPS
sample2d_lod_a_o_s fp_flags <| SFPS
sample2d_lod_l fp_flags <| SFPS
sample2d_lod_o fp_flags <| SFPS
sample2d_lod_o_s fp_flags <| SFPS
sample2d_o fp_flags <| SFPS
sample2d_o_cl_s fp_flags <| SFPS
sample3d fp_flags <| SFPS
sample3d_bias fp_flags <| SFPS
sample3d_bias_l fp_flags <| SFPS
sample3d_bias_o fp_flags <| SFPS
sample3d_bias_o_cl_s fp_flags <| SFPS
sample3d_dd fp_flags <| SFPS
sample3d_dd_o fp_flags <| SFPS
sample3d_dd_o_cl_s fp_flags <| SFPS
sample3d_lod fp_flags <| SFPS
sample3d_lod_l fp_flags <| SFPS
sample3d_lod_o fp_flags <| SFPS
sample3d_lod_o_s fp_flags <| SFPS
sample3d_o fp_flags <| SFPS
sample3d_o_cl_s fp_flags <| SFPS
SampleBias
SampleCmp
SampleCmpLevelZero
samplecube fp_flags <| SFPS
samplecube_a fp_flags <| SFPS
samplecube_a_cl_s fp_flags <| SFPS
samplecube_bias fp_flags <| SFPS
samplecube_bias_a fp_flags <| SFPS
samplecube_bias_a_cl_s fp_flags <| SFPS
samplecube_bias_cl_s fp_flags <| SFPS
samplecube_bias_l fp_flags <| SFPS
samplecube_c fp_flags <| SFPS
samplecube_c_a fp_flags <| SFPS
samplecube_c_a_cl_s fp_flags <| SFPS
samplecube_c_cl_s fp_flags <| SFPS
samplecube_c_lz fp_flags <| SFPS
samplecube_c_lz_a fp_flags <| SFPS
samplecube_c_lz_a_s fp_flags <| SFPS
samplecube_c_lz_s fp_flags <| SFPS
samplecube_cl_s fp_flags <| SFPS
samplecube_dd fp_flags <| SFPS
samplecube_dd_a fp_flags <| SFPS
samplecube_dd_a_cl_s fp_flags <| SFPS
samplecube_dd_cl_s fp_flags <| SFPS
samplecube_lod fp_flags <| SFPS
samplecube_lod_a fp_flags <| SFPS
samplecube_lod_a_s fp_flags <| SFPS
samplecube_lod_l fp_flags <| SFPS
samplecube_lod_s fp_flags <| SFPS
SampleGrad
sampleIndex
sampleIndex already declared for input.  Opcode #%d (count is 1-based). 
sampleinfo
sampleinfo fp_flags <| SFPS
sampleinfo_rt fp_flags <| SFPS
sampleinfo_uint fp_flags <| SFPS
sampleinfo_uint_rt fp_flags <| SFPS
SampleLevel
samplepos
samplepos fp_flags <| SFPS
samplepos_rt fp_flags <| SFPS
Sampler
sampler
SAMPLER
Sampler %s%d already declared. 
Sampler descriptor ranges can't specify DATA_* flags since there is no data pointed to by samplers (descriptor range flags %x).
Sampler descriptor ranges can't specify DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS, since there are no bounds to check (descriptor range flags %x).
sampler mismatch: sampler used inconsistently
Sampler parameter must come from a literal expression.
sampler register (s%u) used more than once
sampler register s#
Sampler register s# must be defined for each static sampler
Sampler register s%d has not been declared.
sampler requires an 's' or 't' register
Sampler s%d already declared.  Opcode #%d (count is 1-based). 
sampler slot start
Sampler variable '%s' does not specify the sampler type.  Explicit sampler types required for asm fragments.
Sampler: s%u
sampler_c
sampler_state
sampler1D
sampler2D
sampler3D
SamplerComparisonState
samplerCUBE
Samplers cannot be mixed with other resource types in a descriptor table (root parameter [%u]).
Samplers: s%u-s%u
SamplerState
samples
sat float_literal <| SFPS
sat fp_flags <| SFPS
sat fp_range <| SFPS
sat instruction to sat modifier match <| Explicit
saturate
Saturate modifier not permitted for opcode #%d (counts are 1-based). 
sbyte
Scalar output register must have full write mask.
Scalar output registers (oFog, oPts) must have full write mask.
scalar registers cannot be masked
scalar registers cannot be swizzled
scalar value expected
scalar, vector, or matrix expected
ScissorEnable
SCISSORTESTENABLE
scope
Scoped
SCt =
SDBGP
SDBGt
SDTL2
search for instancing opportunities in hull shaders <| Explicit
second
Second and third source parameters for SINCOS cannot be the same constant register.
Second and third source parameters for SINCOS cannot have a modifier.
Second and third source parameters for SINCOS must use default swizzle (no swizzle specified, or .xyzw). 
Second and third source params for SGN cannot use a source selector, and cannot have a modifier. 
Second and third source params for SGN must both be different temp (r#) registers.
Second source parameter for bem must be temp (r#) register.
Second source parameter for SINCOS must be a constant register.
Second source parameter for texld can't specify min precision.
Second source parameter for texld must be sampler stage (s#).
Second source parameter for texld* must be sampler stage (s#).
Second source parameter for texldl must be sampler stage (s#).
Second source parameter for texm3x3spec must be c#.
Second source paramter for SINCOS must be a constant register.
secondary array dimensions must be explicit
section number of exception handler
SECTIONHEADERS
SECTIONHEADERSORIG
Sections
SegmentMap
SELECTARG1
SELECTARG2
SELECTMASK
semantic '%s' unsupported on %s
Semantic length is limited to %d characters
semantics in type overridden by variable/function or enclosing type
SEPARATEALPHABLENDENABLE
Sequence of compares <| Explicit
SetBlendState
SetComputeShader
SetDepthStencilState
SetDomainShader
SetEndOfFile
SetFileAttributesW
SetFilePointerEx
SetGeometryShader
SetHullShader
SetLastError
SetPixelShader
SetRasterizerState
SetUnhandledExceptionFilter
SetVertexShader
SGV must have scalar mask in declaration.  Opcode #%d (count is 1-based). 
SGw4t>
SHA256
SHADEMODE
Shader CBV descriptor range (BaseShaderRegister=%u, NumDescriptors=%u, RegisterSpace=%u) is not fully bound in root signature
shader exceeds maximum supported number of interface call sites (%d).  Opcode #%d (count 1-based).
Shader extensions for 11.1
Shader has root bindings but root signature uses a DENY flag to disallow root binding access to the shader stage.
Shader has too much flow control complexity for the target (%s). 
Shader missing end token.
Shader model %s doesn't allow reading from position semantics.
Shader model %s is not allowed in D3D10 techniques
Shader Model 5+ requires that subroutine definitions appear after any call(s) to the subroutine. This also implies recursion is not allowed, although that may or may not be the case here.  Aborting. Opcode #%d (count 1-based).
shader register
shader register must be defined for each CBV/SRV/UAV
Shader register range of type %s %s overlaps with another shader register range %s.
Shader sampler descriptor range (BaseShaderRegister=%u, NumDescriptors=%u, RegisterSpace=%u) is not fully bound in root signature
Shader SRV descriptor range (BaseShaderRegister=%u, NumDescriptors=%u, RegisterSpace=%u) is not fully bound in root signature
Shader UAV descriptor range (BaseShaderRegister=%u, NumDescriptors=%u, RegisterSpace=%u) is not fully bound in root signature
Shader uses texture addressing operations in a dependency chain that is too complex for the target shader model (%s) to handle.
Shader uses texture addressing operations in a dependency chain that is too complex for the target shader model (%s) to handle.  
Shader uses too many (%u) indexable literal values, the maximum allowed is %u, consider using less constant arrays
shader version expected
Shader@0x%p
SHADER_VISIBILITY_ALL
SHADER_VISIBILITY_DOMAIN
SHADER_VISIBILITY_GEOMETRY
SHADER_VISIBILITY_HULL
SHADER_VISIBILITY_PIXEL
SHADER_VISIBILITY_VERTEX
ShaderFeatureInfo blob must not specify 4x raw and structured buffers for Compute Shaders, or for any shader 5_0+.
Shaders compiled for %s can only have a single group shared data item
share
shared
SHDRP
SHDRQ
SHDRt
SHEXP
SHEXs#
SHEXt
shift of commutative inputs <| Explicit
shift of commutative literals <| Explicit
short
ShSFI0
ShSHDR
SHwFt.=
Signature
signed
signed char
signed integer division is not supported on minimum-precision types. Cast to int to use 32-bit division.
signed integer remainder is not supported on minimum-precision types. Cast to int to use 32-bit division.
signed/unsigned mismatch between destination and value, unsigned assumed
signed/unsigned mismatch, unsigned assumed
simplify array merges that repeatedly chain in the same value <| MR.GenSimplifyInstructionsOpt1_NoExcl
simplify chain merges that bring in chain input <| MR.GenSimplifyInstructionsOpt1_NoExcl
simplify chain merges that bring in chain input via mov left <| MR.GenSimplifyInstructionsOpt1_NoExcl
simplify chain merges that bring in chain input via mov right <| MR.GenSimplifyInstructionsOpt1_NoExcl
simplify chain merges that repeatedly chain in the same value <| MR.GenSimplifyInstructionsOpt1_NoExcl
Simplify cmp sequences on possibly NaN/Inf values <| Explicit
Simplify conditions on instructions which only care about sign on possibly NaN/Inf values <| Explicit
simplify flow control that writes the same value in each flow control path <| Explicit
Simplify integer fraction on possibly NaN/Inf values <| Explicit
Simplify pow on possibly NaN/Inf values <| Explicit
sin float_literal <| SFPS
sin fp_flags <| SFPS
sin fp_range <| SFPS
sin fp_specials <| SFPS
-sin(x) -> sin(-x) <| MR.GenSimplifyInstructionsOpt1_Excl
sincos
sincos float_literal <| SFPS
sincos fp_flags <| SFPS
sincos fp_range <| SFPS
sincos fp_specials <| SFPS
single
single 
size in UDT
size of frame in bytes
sizeof
sjh D
sjh$D
skipOptimization
Sleep
SLF;r
SlopeScaledDepthBias
SLOPESCALEDEPTHBIAS
SMIDte=RTS0t
SMIDtf
smoothstep
snorm
snorm 
Software\Microsoft\Direct3D\Direct3D12
Software\Microsoft\VisualStudio\MSPDB
SOLID
source
source component %d in temp r%d not initialized. Opcode #%d (count is 1-based)
Source compression algorithm.
Source filename.
Source for texcrd requires component selector .xyw(==.rga), or .xyz(==.rgb). Note: Using no selector is treated same as .xyz here.
source indexable temp register component %d in x%d[*] never initialized anywhere.Opcode #%d (count is 1-based)
Source modifier not allowed on sampler (s#) parameter to texld* instruction.
source modifiers are not allowed on destination parameters
source modifiers are not allowed on predicates
source modifiers incompatible with SUB instruction
Source parameter can't specify min precision unless shader is from D3D10+ target.
Source parameter for instruction writing to oCn cannot use a modifier.
Source parameter for instruction writing to oCn cannot use swizzles.
Source parameter for instruction writing to oDepth cannot use a modifier.
Source parameter for instruction writing to oDepth must use a replicate source swizzle. i.e.: .x | .y | .z | .w or .r | .g | .b | .a.  This identifies the scalar component of the source to send to oDepth.
Source predicate must be p0 register.
Source predicate p0 must use one of the following swizzles: .x | .y | .z | .w | .xyzw (same as swizzle not present)
source register relative index indexable-temp register component %d in x[%d][%d] uninitialized. Opcode #%d (count is 1-based)
source register relative index temp register component %d in r%d uninitialized. Opcode #%d (count is 1-based)
Source selector for first source parameter for SINCOS must be .x, .y, .z or .w.
Source swizzle not allowed for tex* instruction (%s source param).
source_mark
source_mark is most useful in /Od builds.  Without /Od source_mark can be moved around in the final shader by optimizations.
sourceFile
sourceFileID
SourceFileName
SourceFiles
sourcelink
sourcelink$
sourcelink$%d
sourcelink$%u
Sp;Sh
Sp_^[
space
space is only supported for shader targets 5.1 and higher
SPDBP
SPDBtk
Specular
SPECULAR
SPECULARENABLE
SPECULARMATERIALSOURCE
SPh`%
SPHEREMAP
SPhLFS0
SPhRDEF
split literal sum ishl to allow literalization <| MR.GenSimplifyInstructionsOpt1_Excl
split literal sum ishr to allow literalization <| MR.GenSimplifyInstructionsOpt1_Excl
split literal sum ushr to allow literalization <| MR.GenSimplifyInstructionsOpt1_Excl
SPRhx"
SPWQj
SQhx<
sqrt float_literal <| SFPS
sqrt fp_flags <| SFPS
sqrt fp_range <| SFPS
sqrt fp_specials <| SFPS
sqrt times sqrt of positive value equals the original value identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
sqrt(x)/dz -> 0.5 / sqrt(x) * (dx/dz) <| SR.GenDerivatives_Unary
Src and dest registers for NRM cannot be the same.
Src reg for tex* instruction must be t# register (%s source param).
Src selector .b (%s source param) is only valid for instructions that occur in the alpha pipe.
SRC_ALPHA
SRC_ALPHA_SAT
SRC_COLOR
SRC1_ALPHA
SRC1_COLOR
SRCALPHA
SRCALPHASAT
SRCBLEND
SrcBlend
SrcBlendAlpha
SRCBLENDALPHA
SRCCOLOR
SRGBTEXTURE
SRGBWRITEENABLE
SRQhp2
SRV reference t%d must have a structure byte stride that is a multiple of 4 that is greater than 0 but no greater than %d when declared as structured (%d specified).  Opcode #%d (count is 1-based). 
SSSSP
Stack
Stage linkage warning: Semantic %s has been inconsistently defined in the two stages.
Stage linkage warning: Semantic %s has been placed in different registers in the two stages.
Stage linkage warning: Semantic %s is read from, but it's never written to.
State '%s' belongs in %s blocks, not %s blocks
State '%s' is not indexed
state not recoverable
STATEBLOCK
StateBlock
stateblock
stateblock_state
statement
States
static
static 
static function
static instruction count
static interfaces cannot have initializers
static method %s cannot refer to instance members
Static sampler: A NULL pSamplerDesc was specified.
Static sampler: AddressU unrecognized.
Static sampler: AddressV unrecognized.
Static sampler: AddressW unrecognized.
Static sampler: ComparisonFunc unrecognized.
Static sampler: Filter unrecognized.
Static sampler: MaxAnisotropy must be in the range [%d to %d].  %d specified.
Static sampler: MINIMUM or MAXIMUM filters not supported by the device. To see if the device supports this call CheckFeatureSupport with D3D12_FEATURE_D3D12_OPTIONS and check for TiledResourcesTier support of Tier 2+.
Static sampler: MinLOD be in the range [-INF to +INF].  %f specified.
Static sampler: MipLODBias must be in the range [%f to %f].  %f specified.
STATIC_BORDER_COLOR_OPAQUE_BLACK
STATIC_BORDER_COLOR_OPAQUE_WHITE
STATIC_BORDER_COLOR_TRANSPARENT_BLACK
static_cast
StaticSampler
status
STENCILENABLE
StencilEnable
STENCILFAIL
STENCILFUNC
STENCILMASK
STENCILPASS
StencilReadMask
STENCILREF
StencilWriteMask
STENCILWRITEMASK
STENCILZFAIL
STF;u
Stmts
Store
store_raw
store_raw cannot be used on a resource that is not declared as raw (resource index [%d]). Opcode #%d (counts are 1-based).
store_structured
store_structured cannot be used on a resource that is not declared as structured (resource index [%d]). Opcode #%d (counts are 1-based).
store_structured writing to Thread Group Shared Memory for shader models less than 5_0 must use 
store_uav_typed
store_uav_typed cannot be used on a UAV that is not declared as typed (u%d). Opcode #%d (counts are 1-based).
store_uav_typed must write to all four components of the UAV. Opcode #%d (counts are 1-based).
Store2
Store3
Store4
stores to group shared memory for %s targets must be indexed by an SV_GroupIndex only
strchr
strcmp
stream end
stream error
Stream index (%u) must between 0 and %u.
stream object '%s' cannot be declared in the global scope
Stream output geometry shaders can only be created from valid 4.0+ vertex and geometry shaders
stream parameter must come from a literal expression
stream parameters can only be single-element types
Stream s%d already declared.  Opcode #%d (count is 1-based). 
stream timeout
StreamOut declarations must be a literal string
StreamOut rasterization stream index must be a literal
StrictGSCheck
stride
string
String
string constant
string continues past end of file
string continues past end of line
string too long
StringFileInfo
strlen
strncmp
strnlen
strrchr
strstr
struct
struct %s
struct/class members
structure being emitted has elements with no semantic defined
structured buffer element size must be a multiple of %u bytes in %s (actual size %u bytes)
structured buffer elements cannot be larger than %u bytes in %s (actual size %u bytes)
structured_buffer
StructuredBuffer
stuvw
Sub index list
sub type
sub type ID
SubmitThreadpoolWork
Subroutine label #%d never referenced.
Subroutine label number, %d, is too large. Maximum label number is %d. Aborting shader validation.
Subroutine label number: %d already defined earlier. Aborting shader validation.
Subroutine with label #%d called, but never defined.
SUBTRACT
sum of %g and %g cannot be represented accurately in double precision
Sum of temp registers and indexable temp registers exceeds limit of %d..  Opcode #%d (count is 1-based). 
Sum of temp registers and indexable temp registers exceeds limit of %d..  Opcode #%d (count is 1-based). Aborting. 
Sum of temp registers and indexable temp registers exceeds limit of %u
sum of temp registers and indexable temp registers times %u threads exceeds the recommended total %u.  Performance may be reduced
SV_ClipDistance
SV_ClipDistance semantics cannot be used when using the clipplanes attribute
SV_Color
SV_Coverage
SV_COVERAGE
SV_Coverage and SV_InnerCoverage are mutually exclusive
SV_Coverage input not supported on %s
SV_Coverage not supported on %s
SV_CullDistance
SV_Depth
SV_DEPTH
SV_DEPTHGREATEREQUAL
SV_DepthGreaterEqual
SV_DEPTHLESSEQUAL
SV_DepthLessEqual
SV_DispatchThreadID
SV_DomainLocation
SV_GroupID
SV_GroupIndex
SV_GroupThreadID
SV_GSInstanceID
SV_GSInstanceID is an invalid input semantic for geometry shader primitives, it must be its own parameter.
SV_InnerCoverage
SV_INNERCOVERAGE
SV_InnerCoverage input not supported on %s
SV_InsideTessFactor
SV_InstanceId
SV_InstanceID
SV_InstanceID semantic cannot be used with 10Level9 targets
SV_IsFrontFace
SV_OutputControlPointID
SV_Position
SV_Position cannot be constinterp
SV_PrimitiveId
SV_PrimitiveID
SV_PrimitiveId is an invalid input semantic for geometry shader primitives, it must be its own parameter.
SV_RenderTargetArrayIndex
SV_RenderTargetArrayIndex or SV_ViewportArrayIndex from any shader feeding rasterizer
SV_SampleIndex
SV_SampleIndex isn't supported on %s
SV_STENCILREF
SV_StencilRef
SV_Target
SV_TARGET
SV_Target outputs must be contiguous from SV_Target0 to SV_TargetN
SV_Target0
SV_TessFactor
SV_ViewportArrayIndex
SVW;A s
SVW;Q
SVWf;AXsd
SVWh 
SVWh`
SVWh|
SVWhL
SVWj!
SVWj(
SVWj0
SVWj8
SVWjP
SVWPj
SVWQj
SVWrR
SVWrT
SVWsd
sw tE
swapc
swapc requires destination registers to be different.  Opcode #%d, operand #1 and operand #2 (counts are 1-based).
switch
switch fp_flags <| SFPS
switch must be followed by case or default. Opcode #%d (count 1-based). Aborting validation.
Swizzle
Swizzle not permitted on source parameters to CRS.
Swizzle not permitted on source paramters to CRS.
SWPP3
Symbols
symbols\
SymbolSearchPath
SymbolServerSetOptions
SymbolServerStoreFileW
SymbolServerW
SymbolsFileName
SymIndex
symmetric cmp <| Explicit
symmetric cmp <| MR.GenSimplifyInstructionsOpt1_NoExcl
SYMSRV*
SYMSRV.DLL
SYMSRV.DLL*
SymTag
sync can't specify both _ugroup and _uglobal. If both are needed, just specify _uglobal. Opcode #%d (counts are 1-based).
sync in a non-Compute Shader must only sync UAV (sync_uglobal).Opcode #%d (counts are 1-based).
sync must include some form of memory barrier - _u (UAV) and/or _g (Thread Group Shared Memory).  Only _t (thread group sync) is optional. Opcode #%d (counts are 1-based).
sync_g fp_flags <| SFPS
sync_g_t fp_flags <| SFPS
sync_g_ug fp_flags <| SFPS
sync_g_ug_t fp_flags <| SFPS
sync_g_up fp_flags <| SFPS
sync_g_up_t fp_flags <| SFPS
sync_ug fp_flags <| SFPS
sync_ug_t fp_flags <| SFPS
sync_up fp_flags <| SFPS
sync_up_t fp_flags <| SFPS
syntax error
syntax error : unexpected %s
syntax error: unexpected %s
systemExceptionHandling
SystemRoot
t _^]
t _^3
t =fff
t hL;
t QVS
t QWSh
t!hpL
t!QVS
t!SWh
t"3t$
t"3T$ 3
t"3t$,3
t"PVh4
t"RSh@
t"RWh
t"Shpd
t"SVj
t"SWj
t# registers must appear in sequence (i.e. t0 before t2 OK, but t1 before t0 not valid).
t#_^[
t#f;M
t$ ;\$(r
T$ C;
T$ QR
t$ SV
T$ uc
t$ VW
T$$;W
t$$Ph
t$$PQ
t$$PVW
T$$QQ
t$$SW
T$$t:3
T$$t0j
t$$VPPR
t$$VW
t$(:\$
t$(;L$@
T$(;QP
t$(;t$ 
T$(;Z
t$(9C
T$(9QP
t$(9t$ 
T$(uA
T$(uk
T$(uN
t$(Vh
t$(Vhp
t$(VW
T$,;L$8r
T$,;N
T$,;T$$r
t$,9t$t
T$,C;
t$,hh
t$,hP1
t$,PQ
t$,VQ
T$@#T$
T$@;U
t$@jPj
t$@Pj
T$@QR
T$@RQ
T$@RQP
t$\;t$4
t$\9t$4
t$\QRP
t$\VW
T$`PQ
T$`u{
t$`VW
t$|SQ
t$|SV
T$<;T$4s3
T$<;W
t$<jX
t$<Q3
t$<QP
t$<Rt
T$<VWR
T$0;B
T$0;D$<u@
T$0;L$Hr
T$0AB@
T$0B@
t$0h0000W
t$0PQh0
t$0QP
t$0Rh
t$0RPhX
T$0RQPV
t$0s,
T$0VS
t$4;\$(r
T$4;|$l
t$4Ph
t$4PVS
t$4VS
t$83t$(
T$8F;u
t$8Ph`
t$8Rh
t$8RP
t$8Rt
T$D8F
t$D9A
T$DC;\$`
t$DPQ
t$dRP
t$DRQh
T$dRQPV
T$Dt(
t$h3D$D
t$Hh` 
t$hlm
t$hPh
t$HPj
T$HRj
t$HVVVW
t$hxK
t$L;\$ 
t$LjPj
t$LPh@
t$LQP
t$LQV
t$LRS
t$LSP
t$LSV
t$lVP
t$lVPQ
T$P#T$
t$P;r
T$pRj
T$Pu5
T$pVR
t$PWW
t$SVS
t$tB;
t$TRP
t$Tuj;
t$TWV
t$x;t$(
T$X9E
t$xQP
t$XQPS
t$XQV
T$xRh
T$xRPQ
T$xuK
t%;wPs
t%h$I
t%h@J
t%N;u
t%ShP)
t%Vh 
t&9Y(t!
t&Ph|
t(9_Lv
t(9qht
t(hdx
t)f;M
t)hH/
t)hPp
t)QQh
t)ShxK
t*9t$
t.;]0s)
t/^_3
t/f;M
t/SVW
t/VQVj
t:f;M
t;f;M
t;h8$
t-;ODt(;OHt#
t?f;M
t?h<O
t@hdx
t@RQj
t^_^[
t_jiP
t`f;M
t'<0|
t09_Lv
T0l0|0
t0x0|0
t2A< 
t2QWQ
t3f;M
t3h85
t49Y t2
t4s"3
t5f;M
t5hhV
t6hP~
t9f;M
ta;C,t\
tAf;M
TANGENT
tangent
Tangent
TARGET
target does not support relative addressing
TargetOffset
TargetRelativeVirtualAddress
TargetSection
TargetVirtualAddress
tBh@9
tbuffer
tbuffer requires a 't' register
tc;p|s
tcRQP
tDyZ_^[
technique
technique10
technique10 
technique11
tehXY
Temp decl already encountered.  Repeated declaration on opcode #%d (count is 1-based). 
template
temporary and constant registers are not allowed in assembly fragments
temporary, constant, and output registers are not allowed in vs_3_0 assembly fragments
TerminateProcess
Tess factor processing functions only available on shader model 4+
Tessellation factor scale will be clamped to the range [0, 1]
Tessellator domain already declared. Aborting. Opcode #%d (count is 1-based). 
Tessellator Output Primitive already declared. Aborting. Opcode #%d (count is 1-based). 
Tessellator Partitioning already declared. Aborting. Opcode #%d (count is 1-based). 
TESSFACTOR
tessfactor
Tessfactor
tessfactor semantic out of order
tessfactor semantics must be in the same component
TessFactors must each be declared with a single component.  Opcode #%d (count is 1-based). 
TestString
Tex register t%d already declared.
tex* instructions cannot be after arithmetic instructions within one phase of a ps_1_4 shader.  Each phase can have a block of tex* instructions followed by a block of arithmetic instructions. 
tex* instructions must write all components.
tex1D
tex1d fp_flags <| SFPS
tex1D will be considered dependent since texcoord was not declared as at least float2
tex1d_bias fp_flags <| SFPS
tex1d_dd fp_flags <| SFPS
tex1d_lod fp_flags <| SFPS
tex1d_proj fp_flags <| SFPS
tex1Dbias
tex1Dgrad
tex1Dlod
tex1Dproj
tex2D
tex2d fp_flags <| SFPS
tex2d_bias fp_flags <| SFPS
tex2d_dd fp_flags <| SFPS
tex2d_lod fp_flags <| SFPS
tex2d_proj fp_flags <| SFPS
tex2Dbias
tex2Dgrad
tex2Dlod
tex2Dproj
tex3D
tex3d fp_flags <| SFPS
tex3d_bias fp_flags <| SFPS
tex3d_dd fp_flags <| SFPS
tex3d_lod fp_flags <| SFPS
tex3d_proj fp_flags <| SFPS
tex3Dbias
tex3Dgrad
tex3Dlod
tex3Dproj
texbem
texbeml
texcoord
TEXCOORD
Texcoord
texcoord/texcrd
TEXCOORDINDEX
TEXCOORDSIZE1_0
TEXCOORDSIZE1_1
TEXCOORDSIZE1_2
TEXCOORDSIZE1_3
TEXCOORDSIZE1_4
TEXCOORDSIZE1_5
TEXCOORDSIZE1_6
TEXCOORDSIZE1_7
TEXCOORDSIZE2_0
TEXCOORDSIZE2_1
TEXCOORDSIZE2_2
TEXCOORDSIZE2_3
TEXCOORDSIZE2_4
TEXCOORDSIZE2_5
TEXCOORDSIZE2_6
TEXCOORDSIZE2_7
TEXCOORDSIZE3_0
TEXCOORDSIZE3_1
TEXCOORDSIZE3_2
TEXCOORDSIZE3_3
TEXCOORDSIZE3_4
TEXCOORDSIZE3_5
TEXCOORDSIZE3_6
TEXCOORDSIZE3_7
TEXCOORDSIZE4_0
TEXCOORDSIZE4_1
TEXCOORDSIZE4_2
TEXCOORDSIZE4_3
TEXCOORDSIZE4_4
TEXCOORDSIZE4_5
TEXCOORDSIZE4_6
TEXCOORDSIZE4_7
texcrd
texcrd must use .xyz(=.rgb) destination writemask.
texcrd with _dw(=_da) source modifier must use .xy(=.rg) destination writemask.
texCUBE
texcube fp_flags <| SFPS
texcube_bias fp_flags <| SFPS
texcube_dd fp_flags <| SFPS
texcube_lod fp_flags <| SFPS
texcube_proj fp_flags <| SFPS
texCUBEbias
texCUBEgrad
texCUBElod
texCUBEproj
texdepth
texdp3
texdp3tex
texkill
texkill must write all components.
texld
texld* must not specify a writemask (same as full mask). texld* instructions always write 4 components, including defaults if the source texture being sampled contains fewer than 4 components. 
texld/texkill/texdepth instructions must write all components.
texld/texldb/texldp/dsx/dsy instructions with r# as source cannot be used inside dynamic conditional 'if' blocks, dynamic conditional subroutine calls, or loop/rep with break*. 
texld/texldb/texldp/dsx/dsy instructions with r# as source cannot be used inside dynamic conditional 'if' blocks, dynamic conditional subroutine calls, or rep with break*. 
texld[b|p]*
texldb
texldd
texldl
texldp
texlod not supported on this target
texm3x2depth
texm3x2pad
texm3x2tex
texm3x3
texm3x3pad
texm3x3spec
texm3x3tex
texm3x3vspec
texreg2ar
texreg2gb
texreg2rgb
text file busy
TEXT_1BIT
TEXTURE
texture
Texture
texture access must have literal offset and multisample index
TEXTURE assignments inside of samplers cannot be expression indexed
TEXTURE assignments inside of samplers cannot be variable indexed
Texture coordinate register t%d read more than once in shader with different source selector (swizzle). Multiple reads of identical texture coordinate register throughout shader must all use identical source selector. Note this does not restrict mixing use and non-use of a source modifier (i.e. _dw/_da or _dz/_db, depending what the swizzle allows) on these coordinate register reads.
texture mismatch: texture used inconsistently, can only use one DX9-style texture intrinsic on individual samplers or sampler arrays
texture register (t%u) used more than once
Texture register result of texbem or texbeml instruction must not be read by tex* instruction. Affected components(*) of %s source param: %s
Texture register result of texkill%s or texm*pad instructions must not be read. Affected components(*) of %s source param: %s
texture requires a 't' or 's' register
Texture sample will be considered dependent since texcoord was not declared as at least float%d
texture slot start
Texture:   t%u
TEXTURE_ADDRESS_BORDER
TEXTURE_ADDRESS_CLAMP
TEXTURE_ADDRESS_MIRROR
TEXTURE_ADDRESS_MIRROR_ONCE
TEXTURE_ADDRESS_WRAP
Texture1D
texture1d
texture1D
Texture1D Load method for tiled resources requires shader model 5 or higher
Texture1D Sample method for tiled resources requires shader model 5 or higher
Texture1D SampleBias method for tiled resources requires shader model 5 or higher
Texture1D SampleCmp method for tiled resources requires shader model 5 or higher
Texture1D SampleCmpLevelZero method for tiled resources requires shader model 5 or higher
Texture1D SampleLevel method for tiled resources requires shader model 5 or higher
Texture1D types are unsupported on %s
Texture1DArray
texture1darray
Texture1DArray Load method for tiled resources requires shader model 5 or higher
Texture1DArray Sample method for tiled resources requires shader model 5 or higher
Texture1DArray SampleBias method for tiled resources requires shader model 5 or higher
Texture1DArray SampleCmp method for tiled resources requires shader model 5 or higher
Texture1DArray SampleCmpLevelZero method for tiled resources requires shader model 5 or higher
Texture1DArray SampleLevel method for tiled resources requires shader model 5 or higher
texture2D
Texture2D
texture2d
Texture2D GatherAlpha method for tiled resources requires shader model 5 or higher
Texture2D GatherBlue method for tiled resources requires shader model 5 or higher
Texture2D GatherCmpAlpha method for tiled resources requires shader model 5 or higher
Texture2D GatherCmpBlue method for tiled resources requires shader model 5 or higher
Texture2D GatherCmpGreen method for tiled resources requires shader model 5 or higher
Texture2D GatherCmpRed method for tiled resources requires shader model 5 or higher
Texture2D GatherGreen method for tiled resources requires shader model 5 or higher
Texture2D GatherRed method for tiled resources requires shader model 5 or higher
Texture2D Load method for tiled resources requires shader model 5 or higher
Texture2D Sample method for tiled resources requires shader model 5 or higher
Texture2D SampleBias method for tiled resources requires shader model 5 or higher
Texture2D SampleCmp method for tiled resources requires shader model 5 or higher
Texture2D SampleCmpLevelZero method for tiled resources requires shader model 5 or higher
Texture2D SampleLevel method for tiled resources requires shader model 5 or higher
Texture2DArray
texture2darray
Texture2DArray Gather method for tiled resources requires shader model 5 or higher
Texture2DArray GatherAlpha method for tiled resources requires shader model 5 or higher
Texture2DArray GatherBlue method for tiled resources requires shader model 5 or higher
Texture2DArray GatherCmpAlpha method for tiled resources requires shader model 5 or higher
Texture2DArray GatherCmpBlue method for tiled resources requires shader model 5 or higher
Texture2DArray GatherCmpGreen method for tiled resources requires shader model 5 or higher
Texture2DArray GatherCmpRed method for tiled resources requires shader model 5 or higher
Texture2DArray GatherGreen method for tiled resources requires shader model 5 or higher
Texture2DArray Load method for tiled resources requires shader model 5 or higher
Texture2DArray Sample method for tiled resources requires shader model 5 or higher
Texture2DArray SampleBias method for tiled resources requires shader model 5 or higher
Texture2DArray SampleCmp method for tiled resources requires shader model 5 or higher
Texture2DArray SampleCmpLevelZero method for tiled resources requires shader model 5 or higher
Texture2DArray SampleLevel method for tiled resources requires shader model 5 or higher
Texture2DArrayMS
Texture2DMS
texture2dms
texture2DMS cannot be more than %u samples
Texture2DMS resources are only available for input to Pixel Shaders. Opcode #%d (count is 1-based). 
Texture2DMS[Array] or TextureCube[Array] resources are not supported with UAVs (Unordered Access Views). Opcode #%d (count is 1-based). 
Texture2DMSArray
texture2dmsarray
texture3D
texture3d
Texture3D
Texture3D Sampler method for tiled resources requires shader model 5 or higher
Texture3D SamplerBias method for tiled resources requires shader model 5 or higher
Texture3D SamplerLevel method for tiled resources requires shader model 5 or higher
TextureBuffer
TextureCube
texturecube
textureCUBE
TextureCube GatherAlpha method for tiled resources requires shader model 5 or higher
TextureCube GatherBlue method for tiled resources requires shader model 5 or higher
TextureCube GatherCmpAlpha method for tiled resources requires shader model 5 or higher
TextureCube GatherCmpBlue method for tiled resources requires shader model 5 or higher
TextureCube GatherCmpGreen method for tiled resources requires shader model 5 or higher
TextureCube GatherCmpRed method for tiled resources requires shader model 5 or higher
TextureCube GatherGreen method for tiled resources requires shader model 5 or higher
TextureCube GatherRed method for tiled resources requires shader model 5 or higher
TextureCube Sample method for tiled resources requires shader model 5 or higher
TextureCube SampleBias method for tiled resources requires shader model 5 or higher
TextureCube SampleCmp method for tiled resources requires shader model 5 or higher
TextureCube SampleCmpLevelZero method for tiled resources requires shader model 5 or higher
TextureCube SampleLevel method for tiled resources requires shader model 5 or higher
texturecubearray
TextureCubeArray
TextureCubeArray GatherAlpha method for tiled resources requires shader model 5 or higher
TextureCubeArray GatherBlue method for tiled resources requires shader model 5 or higher
TextureCubeArray GatherCmpAlpha method for tiled resources requires shader model 5 or higher
TextureCubeArray GatherCmpBlue method for tiled resources requires shader model 5 or higher
TextureCubeArray GatherCmpGreen method for tiled resources requires shader model 5 or higher
TextureCubeArray GatherCmpRed method for tiled resources requires shader model 5 or higher
TextureCubeArray GatherGreen method for tiled resources requires shader model 5 or higher
TextureCubeArray GatherRed method for tiled resources requires shader model 5 or higher
TextureCubeArray Sample method for tiled resources requires shader model 5 or higher
TextureCubeArray SampleBias method for tiled resources requires shader model 5 or higher
TextureCubeArray SampleCmp method for tiled resources requires shader model 5 or higher
TextureCubeArray SampleCmpLevelZero method for tiled resources requires shader model 5 or higher
TextureCubeArray SampleLevel method for tiled resources requires shader model 5 or higher
TextureCubeArray textures aren't supported on this target
TEXTUREFACTOR
textures
Textures:  t%u-t%u
TEXTURETRANSFORM
TEXTURETRANSFORMFLAGS
t'f;M
t-f;M
t-f9^
TFACTOR
tFQWQ
tFSWV
tG<.tC<$t?
t'h$H
The array element count of GetDimensions on TextureCubeArray objects is unavailable on %s
the clip planes (up to 6) to use
The current tex* instruction reads from %c%d, which was written earlier by another tex* instruction in the same block of tex* instructions.  Dependent reads are not permitted within a single block of tex* instructions.  To perform a dependent read, separate texture coordinate derivation from the tex* instruction using the coordinates with a 'phase' marker.
the debug info flag can only be set globally
the dimensions of the thread group
the final dimension specified (%u) for %s must be less than or equal to %u
The first stream declaration cannot appear after any output or output topology declarations.  Opcode #%d (count is 1-based). 
The intersection of all masks on output registers in an index range cannot be empty. Index range from o%d to o%d has empty mask intersecion. 
The maximum number of constant buffer slots is exceeded for a library (slot index=%u, max slots=%u)
The maximum number of sampler slots is exceeded for a library (slot index=%u, max slots=%u)
The maximum number of texture slots is exceeded for a library (slot index=%u, max slots=%u)
The maximum number of UAV slots is exceeded for a library (slot index=%u, max slots=%u)
the maximum number of vertices emitted by this shader
the maximum tessellation factor to allow
the name of the patch constant value evaluation function
the number of control points to emit
the number of instances of this shader to execute simultaneously
The only instruction allowed to write to the predicate register is setp.
The only modifier allowed for source predicate p0 is the not (!) modifier.
The only valid modifiers for the first source parameter of lrp are: reg (no mod) or 1-reg (complement).
The only valid write masks for the FRC instruction are .xy and .y.
the 'pixelshader' keyword is deprecated and reserved in strict mode
the product of the arguments of %s(%u,%u,%u) must be at least %u
the product of the arguments of %s(%u,%u,%u) must be less than or equal to %u
the 'sampler1D' keyword is deprecated in strict mode; use 'SamplerState' instead
the 'sampler2D' keyword is deprecated in strict mode; use 'SamplerState' instead
the 'sampler3D' keyword is deprecated in strict mode; use 'SamplerState' instead
the 'samplerCUBE' keyword is deprecated in strict mode; use 'SamplerState' instead
The setp instruction must write to the predicate register.
the size of constant buffer %s is %d 16-byte entries, which exceeds maximum allowed size of %d entries
the 'stateblock' keyword is deprecated in strict mode
The total amount of group shared memory (%u bytes) exceeds the %s limit of %d bytes
the 'vertexshader' keyword is deprecated and reserved in strict mode
There was a problem getting annotations
There was an error compiling expression
There was an error compiling HLSL shader variable
There was an unexpected error in the parse tree
tHh4h
third
Third and fourth parameter for texldd can't specify min precision unless shader is from D3D10+ target.
Third and fourth parameters to texldd must be temp (r#), input (v#) or constant (c#) register.
Third and fourth parameters to texldd must be temp (r#), texture (t#), input (v#) or constant (c#) register.
Third or fourth parameter for texldd using unrecognized min precision.
Third source parameter for dp2add must use a replicate swizzle (.r, .g, .b, .a) to select a scalar component.
Third source parameter for SINCOS must be a constant register.
Third source paramter for SINCOS must be a constant register.
this FX API is not available in this part your program (%s)
this loop dependent on potentially %s data <| I%u (B%u), A%u (B%u)
this memory access dependent on potentially %s data <| I%u (B%u), A%u (B%u)
This object can only be bound to one slot in this version of Effects
this operation
this operation cannot be used directly on resources containing doubles.
this operation with respect to %s
this variable dependent on potentially %s data: %s%s <| I%u (B%u), A%u (B%u)
this variable depends on potentially %s data on loop exit: %s <| I%u (B%u), A%u (B%u)
this variable holds return value
this variable is optimized away
ThisAdjust
Thread Group Shared Memory reference g%d already declared.  Opcode #%d (count is 1-based). 
Thread Group Shared Memory reference g%d byteCount (%d specified) must be a nonzero multiple of 4.  Opcode #%d (count is 1-based). 
Thread Group Shared Memory reference g%d must have a structure byte stride that is a nonzero multiple of 4 when declared as structured (%d specified).  Opcode #%d (count is 1-based). 
Thread local temp register storage in Compute Shader (per thread) %d. The shader declares too much temp storage (%d registers). 
thread sync operation found in varying flow control, consider reformulating your algorithm so all threads will hit the sync simultaneously
thread sync operation must be in non-varying flow control, due to a potential race condition this sync is illegal, consider adding a sync after reading any values controlling shader execution at this point
throw
ThunkOrdinal
tHVh84
ti_^3
Tiled resources
time stamp
timed out
TimeStamp
tiWSV
t'j\h
tJf;M
tkhDh
tkhlm
TkiP0
tKPVj
tL;8sH3
tload fp_flags <| SFPS
TlsAlloc
TlsFree
TlsGetValue
TlsSetValue
tMf;M
tn+D$8
Token
token
token '%s'
TOKENRIDMAP
Too many %s signature parameters of type SV_ClipDistance or SV_CullDistance.  Maximum number of registers usable is %i.
Too many (%d) arithmetic instruction slots used after phase marker. Max. allowed in a phase (counting any co-issued pairs as 1) is %d.
Too many (%d) arithmetic instruction slots used before phase marker. Max. allowed in a phase (counting any co-issued pairs as 1) is %d.
Too many (%d) arithmetic instruction slots used. Max. allowed (counting any co-issued pairs as 1) is %d. Note that adding a phase marker to the shader would double the number of instructions available.
Too many (%d) standard (non tex*) instruction slots used. Max. allowed is %d.
Too many (%d) tex* instruction slots used after phase marker. Max. allowed in a phase is %d.
Too many (%d) tex* instruction slots used before phase marker. Max. allowed in a phase is %d.
Too many (%d) tex* instruction slots used. Max. allowed is %d.
Too many (%d) tex* instruction slots used. Max. allowed is %d. Note that adding a phase marker to the shader would double the number of instructions available.
Too many (%d) total instruction slots used. Max. allowed is %d.
too many arguments to target TX
Too many arithmetic instruction slots used: %d. Max. allowed (counting any co-issued pairs as 1) is %d.
too many files open
too many files open in system
Too many instruction slots (%d) used by shader. Max. allowed is %d.
too many length or distance symbols
too many links
too many nested #includes
Too many nested flow control constructs
Too many output registers declared (%d).  When no output register has been declared with the semantic 'psize0', %d o# registers are available.  When an o# register has been declared with the semantic 'psize0' (same as 'psize'), %d registers are available.
too many outputs to target TX
too many symbolic link levels
Too many temp registers declared (%d).  Max allowed is %d.  Opcode #%d (count is 1-based). 
Too many texture addressing instruction slots used: %d. Max. allowed is %d. (Note that some texture addressing instructions may use up more than one instruction slot)
Too many total clip/cull distance values.  At most %d allowed (clip+cull total).  Opcode #%d (count is 1-based). 
Too many unique registers contain clip/cull distance values.  At most %d unique registers can have clip/cull distance in components.  Opcode #%d (count is 1-based). 
Too may static flow control instructions (%d) for this shader model.  Maximum allowed is %d. The shader instructions that count as 1 static flow control instruction each are: (1)call, (2)callnz (with static condition), (3)if (static branch), (4)else (paired with static if), (5)loop, (6)rep. 
topology type
tOQWQj
tOSVW
total invocation count in PGO training
Total number of instruction slots used too high: %d. Max. allowed (counting any co-issued pairs as 1) is %d.
Total number of scalars across all DS input control points must not exceed %d. Current input control point declaration specifies %d scalars of output per control point with %d output control points, resulting in %d total scalars of input control point data. 
Total number of scalars across all HS output control points must not exceed %d. Current output control point declaration specifies %d scalars of output per control point with %d output control points, resulting in %d total scalars of output control point data. 
Total Thread Group Shared Memory storage exceeded by g# declarations so far up to g%d.  Opcode #%d (count is 1-based). 
tphdx
tQ9x(uL
tQh4h
tQhP9
Translation
transpose
Triangle
triangle
triangle_ccw
triangle_cw
triangleadj
TriangleStream
TRIEDGE
TRIINT
trunc
trunc float_literal <| SFPS
trunc fp_flags <| SFPS
trunc fp_range <| SFPS
trunc fp_specials <| SFPS
trunc(itof(x)) -> itof(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
trunc(utod(x)) -> utod(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
trunc(utof(x)) -> utof(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
Try swizzling literal arrays to fit them together <| Explicit
Try to combine like instructions <| Explicit
Try to match temp array loads to their original store <| Explicit
Try to reduce known values to movs <| Explicit
TryAcquireSRWLockExclusive
tshHr
tThDx
tttttttttuuuuvvvwx
TU"opqr\]!
tU98uQ
tUf;>tP
tuhHr
Tunnel through temp arrays on load <| Explicit
tunnelable move(a) -> append_arg(a) <| SMR.RangeDataAnalysis
tv?@{Bsu
t'VWS
TWEENFACTOR
TWEENING
TWOSIDEDSTENCILMODE
tWSh@
tX;B$
tx_1_0
type mismatch
type mismatch between conditional values
Type of Virtual Base Offset Table
Typed UAV Load Additional Formats
typed UAV loads are only allowed for single-component 32-bit element types
typed UAV stores must write all declared components.
typedef
typedef 
TypeId
typename
tySW3
tZ;W(wU
tZG;{
u #L$,
u 9M u
u PhX
u PWh
u PWhp
u!8G8u28G9u
u!h|O
u!hpc
u#j<V
u#Shx
u$RQh
u$Whp
u%hXN
u&;3s"
u(;z,r
u(VPP
u)9F\u
u,PQRS
u,s:Vj
u,WVQ
u.;H(u)
u.QQQj
u/hPv
u/ishl/r(a, 0) -> mov(a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
u/ishr(and(a, m), n) : if( and_is_identity_ignore_lower_n_bits(a, m, n) -> u/ishr(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
u/ishr(and(m, a), n) : if( and_is_identity_ignore_lower_n_bits(a, m, n) -> u/ishr(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
u/ishr(or(a, m), n) : if( or_is_identity_ignore_lower_n_bits(a, m, n) -> u/ishr(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
u/ishr(or(m, a), n) : if( or_is_identity_ignore_lower_n_bits(a, m, n) -> u/ishr(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
u/ishr/l(and(a, iv1), iv2) -> and(u/ishr/l(a, iv2), u/ishr/l(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_Excl
u/ishr/l(or(a, iv1), iv2) -> or(u/ishr/l(a, iv2), u/ishr/l(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_Excl
u/ishr/l(xor(a, iv1), iv2) -> xor(u/ishr/l(a, iv2), u/ishr/l(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_Excl
u/QQQj
u:9\$
u;QQQj
U;U(tP
u\9^`u
u]9x uX
u|hXN
u+;2s'
u+F;w
u+hXw
u<_^[
u=8D$
u=WVj
u>h|.
u0_^3
u1QQQj
u1QQQQ
u3Sjc
u98] 
uaddc
uaddc bits_known <| SFPS
uaddc fp_flags <| SFPS
uaddc int_literal <| SFPS
uaddc int_range <| SFPS
UAV reference u%d has invalid flag.  Opcode #%d (count is 1-based). 
UAV reference u%d must have a structure byte stride that is a multiple of 4 that is greater than 0 but no greater than %d when declared as structured (%d specified).  Opcode #%d (count is 1-based). 
UAV reference u%d specified with invalid flag.  Opcode #%d (count is 1-based). 
UAV reference u%d: order preserving counter flag valid only on structured buffers.  Opcode #%d (count is 1-based). 
UAV reference u%d: ROV requires Rasterizer Ordered feature flag.  Opcode #%d (count is 1-based). 
UAV register (u%u) used more than once
UAV requires a 'u' register
UAV slot start
UAV u%d already declared.  Opcode #%d (count is 1-based). 
UAV-related
UAVs at every shader stage
UAVs must be declared in slots greater than PS outputs.  UAV declared in slot %d while output declared in slot %d.  Opcode #%d (count is 1-based). 
ub8L$
ubfe bits_known <| SFPS
ubfe fp_flags <| SFPS
ubfe int_literal <| SFPS
ubfe(i) -> extraction sequence <| MR.Gen_RequiredTranslate
ubfe(w, 0i, a >> s) -> ubfe(w, s, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ubfe(w, 0i, a) << o -> bfi(w, o, a, 0i) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ubfe(w, o, (a >> s) & m) : if( o + s < 32 ) -> ubfe(w, o + s, a & (m << s)) <| MR.GenSimplifyInstructionsOpt1_Excl
ubfe(w, o, a >> s) : if( o + s < 32 ) -> ubfe(w, o + s, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ubfe(w, o, a) >> s : if( o + s < 32 && w >= s ) -> ubfe(w - s, o + s, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ubfe(w, o, a) >> s -> ubfe(w, o + s, a) <| MR.GenSimplifyInstructionsOpt1_Excl
udhDx
udiv bits_known <| SFPS
udiv fp_flags <| SFPS
udiv int_literal <| SFPS
udiv int_range <| SFPS
udiv(a, iv_pow2) -> ushr(a, get_lowest_bit(iv_pow2)) <| MR.GenD3D10_OptimizeEarlyTranslate
UDT has constructor or destructor, or func is a constructor
UDTKind
uG9qDtB
UGE a,a -> true <| MR.GenSimplifyInstructionsOpt1_NoExcl
ughp8
uI_^2
uint1
uint1x1
uint1x2
uint1x3
uint1x4
uint2
uint2x1
uint2x2
uint2x3
uint2x4
uint3
uint3x1
uint3x2
uint3x3
uint3x4
uint4
uint4x1
uint4x2
uint4x3
uint4x4
uIVh(~
ulong
ulRvaStart
ULT a,a -> false <| MR.GenSimplifyInstructionsOpt1_NoExcl
umax bits_known <| SFPS
umax fp_flags <| SFPS
umax int_literal <| SFPS
umax int_range <| SFPS
umax(i0, i1): if (i0 >= i1) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
umax(i0, i1): if (i1 >= i0) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
umax(umax(i0, l1), l2) -> umax(i0, umax(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
umax(x,y) where one is >= the other <| Explicit
umin bits_known <| SFPS
umin fp_flags <| SFPS
umin int_literal <| SFPS
umin int_range <| SFPS
umin(i0, i1): if (i0 >= i1) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
umin(i0, i1): if (i1 >= i0) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
umin(umin(i0, l1), l2) -> umin(i0, umin(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
umin(x,y) where one is <= the other <| Explicit
umod bits_known <| SFPS
umod fp_flags <| SFPS
umod int_literal <| SFPS
umod int_range <| SFPS
umod(x,y) where x < y <| Explicit
umul bits_known <| SFPS
umul fp_flags <| SFPS
umul int_literal <| SFPS
umul int_range <| SFPS
Unable to calculate derivative of %s. %s
Unable to create warning string
unable to unroll loop, loop does not appear to terminate in a timely manner (%d iterations)
unable to unroll loop, loop does not appear to terminate in a timely manner (%d iterations) or unrolled loop is too large, use the [unroll(n)] attribute to force an exact higher number
UnalignedType
unary negate of unsigned value is still unsigned
unbounded
undecipherable custom data
undeclared identifier '%s'
UndecoratedName
undef
undefined
Undefined
Undefined shader variable '%s'
unexpected #elif
unexpected #elif following #else
unexpected #else
unexpected #else following #else
unexpected #endif
Unexpected component type
Unexpected DWORD count for instruction.  Aborting validation.
unexpected end of file
unexpected end of file in macro expansion
unexpected error in GetTypeArgFlags
Unexpected filter value: '%s'.
Unexpected indexing dimension for operand #%d of opcode #%d (counts are 1-based). Aborting.
Unexpected node encountered when trying to determine type
Unexpected source parameter.
Unexpected template type
Unexpected texture address mode value: '%s'.
Unexpected token '%s'
Unexpected token '%s' when parsing root signature
unexpected tokens following preprocessor directive
Unexpected visibility value: '%s'.
UnhandledExceptionFilter
uniform
uninitialized
uninitializedData
union
Unique id for input assembly file (in this data store)
Unique id for the source file (in this data store).
unknown
UNKNOWN
unknown attribute %s, or attribute invalid for this statement
unknown attribute %s, or attribute invalid for this statement, valid attributes are: %s
unknown compression method
Unknown creator
unknown error
Unknown exception
unknown header flags set
Unknown library function
Unknown Value
UnmapViewOfFile
unmodified type
unmodified type ID
Unnamed objects are not allowed
unorm
unorm 
Unreachable
unrecognized compiler target '%s'
unrecognized feature '%s' requested in '#pragma feature(...)'
Unrecognized FX function call (%s)
Unrecognized global flags.  Opcode #%d (count is 1-based). 
unrecognized identifier '%s'
Unrecognized instruction or instruction not valid in a library function.
Unrecognized instruction or instruction not valid in Compute Shader.
Unrecognized instruction or instruction not valid in Domain Shader.
Unrecognized instruction or instruction not valid in geometry shader.
Unrecognized instruction or instruction not valid in Hull Shader.
Unrecognized instruction or instruction not valid in pixel shader.
Unrecognized instruction or instruction not valid in vertex shader.
Unrecognized instruction. Aborting pixel shader validation.
Unrecognized instruction. Aborting vertex shader validation.
Unrecognized min precision on dest parameter.
Unrecognized min precision on source parameter.
Unrecognized min precision type for operand #%d of opcode #%d (counts are 1-based).
Unrecognized RHS value in assignment: '%s'
Unrecognized shader type.
unrecognized shader version
Unrecognized state '%s'
Unrecognized token %s
Unrecognized usage type in dcl statement.
unroll
UnroundedInsideFactor
UnroundedInsideFactors
unsigned
unsigned 
unsigned __int128
unsigned __int16
unsigned __int32
unsigned __int64
unsigned __int8
unsigned can not be used with type
unsigned char
unsigned int
Unsigned integer divide by zero
unsigned integer literal %I64u too large, truncated
unsigned integer movc((a<b),b,a) -> max(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
unsigned integer movc((a>=b),a,b) -> max(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
unsigned long
unsigned short
Unsized MSAA textures aren't supported on this target
Unsupported bit-flag set (descriptor range flags %x).
Unsupported bit-flag set (root descriptor flags %x).
Unsupported bit-flag set (root signature flags %x).
unsupported compiler target '%s'
Unsupported function parameter "%s" type.
Unsupported function parameter ("%s") type.
Unsupported ParameterType value %u (root parameter %u)
Unsupported RangeType value %u (descriptor table slot [%u], root parameter [%u]).
Unsupported ShaderVisibility value %u (root parameter [%u]).
Unsupported ShaderVisibility value %u (static sampler [%u]).
Unsupported texture type for %s
untyped textures are deprecated in strict mode
uo;wPs
uo_[^
uohlm
uOQhH
UpperBound
UpperBoundId
uPRh@
uPVWSR
uqSWj
usage semantics do not apply to %ss
use flow control and logical conditions to tighten ranges <| Explicit
use of potentially uninitialized variable (%s)
Use replicate swizzles to squish literal arrays <| Explicit
User defined %s buffer slots cannot be target specific
uses custom calling convention
ushort
ushr bits_known <| SFPS
ushr fp_flags <| SFPS
ushr int_literal <| SFPS
ushr(ishl(a, bv), cv) : if( ge_mod_32(cv, bv) ) -> and(ushr(a, cv - bv), (1 << (32-cv))-1) <| MR.GenSimplifyInstructionsOpt1_Excl
ushr(ushr(a, b), c) : if( nooverflow_mod_32(b, c) ) -> ushr(a, iadd(b, c)) <| MR.GenSimplifyInstructionsOpt1_Excl
using
Using a temp register (r#) as source for texld requires component selector .xyz(==.rgb). Note: Using no selector is treated same as .xyz here.
Using a texture coordinate register (t#) as source for texld requires component selector .xyw(=.rga), or .xyz(=.rgb). Note: Using no selector is treated same as .xyz here.
Using sampler arrays with texture objects on DX9 targets is not yet implemented.
usubb
usubb bits_known <| SFPS
usubb fp_flags <| SFPS
usubb int_literal <| SFPS
usubb int_range <| SFPS
u-SWh
uthDx
utod fp_flags <| SFPS
utof fp_flags <| SFPS
utof(sampleinfo_uint(x)) -> sampleinfo(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
utof(sampleinfo_uint_rt(x)) -> sampleinfo_rt(x) <| MR.GenSimplifyInstructionsSampleMask_Both
UuidCreate
uVh`E
uvwxyz{|
Uw(tLI
UWX++++
uXQjX
uY;_4s
uY8E 
v# register read by instruction(s) before phase marker.  This is not permitted. When a phase marker is present, v# register reads are only permitted after the phase marker.
v#Shx
V$_^[
v&PQh
v(PVhH/
v)QPSh8
V;H4r
v?SW3
v[SV3
V_:X1:
V`G;}
v{SW3
v+h@u
V<+V8
V0u0|0
V83V03N4
Validation Error: %s
Value
value
Value
value cannot be infinity, isfinite() may not be necessary.  /Gis may force isfinite() to be performed
value cannot be infinity, isinf() may not be necessary.  /Gis may force isinf() to be performed
value cannot be NaN, isnan() may not be necessary.  /Gis may force isnan() to be performed
value too large
Values
VarFileInfo
variable
variable '%s' has a minimum precision type and cannot be marked precise <| A%u (B%u)
variable '%s' used without having been completely initialized <| A%u (B%u), I%u (B%u)
Variable has an invalid type; is the structure definition empty?
VARIANT
varying
vCoverage
vCycleCounter
vCycleCounter can only be used with the mov instruction.  Opcode #%d, operand #%d (counts are 1-based). 
vCycleCounter is only supported on 5_0+ shaders.  Opcode #%d (count is 1-based). 
vDomain
vector
vector dimension must be a literal scalar expression
vector dimension must be between 1 and %u
vector element type must be a scalar type
vector too long
vectorize tunnel through add <| Explicit
vectorize tunnel through mul <| Explicit
vectorize tunnel through neg <| Explicit
version token
Version token 0x%x does not represent a pixel library function.
Version token 0x%x does not represent a vertex library function.
Version token 0x%x does not represent a vertex shader.
Version token: 0x%x indicates a pixel shader.  Vertex shader version token must be of the form 0xfffe****.
Version Token: 0x%x indicates a vertex shader.  Pixel shader version token must be of the form 0xffff****.
Version Token: 0x%x is invalid. Pixel shader version token must be of the form 0xffff****. Aborting pixel shader validation.
Version Token: 0x%x is invalid. Vertex shader version token must be of the form 0xfffe****. Aborting vertex shader validation.
Version Token: Pixel shader version ps_2_sw is for software rasterizers only (e.g. the reference device). Aborting shader validation.
Version Token: Pixel shader version ps_3_sw is for use with software rasterizers only (e.g. the reference device). Aborting shader validation.
Version Token: Shader version %s is not supported by device. 
Version Token: Shader version %s is not supported by hardware. 
Version Token: Shader version %s is not supported. Aborting pixel shader validation.
Version Token: Shader version %s is not supported. Aborting vertex shader validation.
Version Token: Shader version %s is not supported. Aborting vertex shader validation. 
Version Token: Vertex shader version vs_2_sw is for software use only. Aborting shader validation.
Version Token: Vertex shader version vs_3_sw is for software use only. Aborting shader validation.
VERTEX
vertex count must be non-zero
Vertex shader must minimally write all four components (xyzw) of oPos output register.  Missing component%s(*): %s
vertex shader must minimally write all four components of POSITION
vertex shader must minimally write all four components of SV_Position
Vertex shader must write all four components (xyzw) of oPos output register.
Vertex shader output dcl with usage 'tessfactor' must have usage index 0, and register must have .x write mask. This semantic is for special purpose use only: creating vertex data that is to be used with tesselation, where a scalar tessfactor is needed.  If you are not doing tesselation, do not bother using this semantic. 
Vertex shader output is not permitted to be dcl'd with the usage+index positiont0.
Vertex Shader position offset
vertex_id
VERTEXBLEND
vertexfragment
vertexID already declared for input.  Opcode #%d (count is 1-based). 
vertexshader
VERTEXSHADER
VertexShader
VERTEXSHADERCONSTANT
VERTEXSHADERCONSTANT1
VERTEXSHADERCONSTANT2
VERTEXSHADERCONSTANT3
VERTEXSHADERCONSTANT4
VERTEXSHADERCONSTANTB
VERTEXSHADERCONSTANTF
VERTEXSHADERCONSTANTI
VERTID
Vf;AXs
VFACE
VFace
vFace
vFace being read, but not declared. vFace must be declared if it is used:  dcl vFace
vFace or vPos registers cannot be used as sources for matrix operations.
vFace register can only be used as one of the sources to if_(cond), break_(cond), setp_(cond), or the condition in a cmp.
vFace register must not specify a swizzle (i.e. default swizzle), as it is an implied scalar.
vForkInstanceID
vFSW3
vfunctab
vGroupIndex
vGSInstanceID
vH90u
vHSInstanceID
VhSTAT
viewport_array_index
viewportArrayIndex already declared for input.  Opcode #%d (count is 1-based). 
viewportArrayIndex already declared for output.  Opcode #%d (count is 1-based). 
VIEWTRANSFORM
vInnerCoverage
virtual
Virtual
Virtual filename.
VirtualAddress
VirtualAlloc
VirtualBaseClass
VirtualBaseDispIndex
VirtualBaseOffset
VirtualBasePointerOffset
VirtualFree
VirtualTableShape
VirtualTableShapeId
visibility
vJoinInstanceID
vjt}e
VLG;z
VLw8t!
VLwBt/
VLwBtY
vmPSh
void main(
void main()
volatile
VolatileType
volume
vOutputControlPointID
vOutputControlPointId
VPINDEX
vPos does not have .z or .w channels in this shader model. Attempt to read following unavailable component(s) (*): %s
vPrim
VPRQj
vPS;~
VPWh 
vQO+t
vs.1.0
vs.1.1
vs.2.0
vs.2.a
vs.2.sw
vs.2.x
vs.3.0
vs.3.sw
vs_%d_%d
vs_1_0
vs_1_0 is no longer supported.  It turned out that vertex shader capable hardware will always support at least vs_1_1 (which is not as limited a model as vs_1_0 was). To convert a vs_1_0 shader up to vs_1_1, the only change needed is to make the version number 1_1. 
vs_1_0 is no longer supported; using vs_1_1
vs_1_1
vs_2_0
vs_2_0 does not support predication.
vs_2_a
vs_2_sw
vs_2_x
vs_2_x extended instruction not supported by the hardware (dynamic flow control not supported).
vs_2_x extended instruction not supported by the hardware (predication not supported).
vs_2_x predication not supported by the hardware.
vs_3_0
vs_3_sw
vs_4_0
vs_4_0_level_9_0
vs_4_0_level_9_1
vs_4_0_level_9_3
vs_4_1
vs_5_0
vs_5_1
VS_VERSION_INFO
VShOSG1
VSRPQ
vT8L$
vThreadGroupID
vThreadID
vThreadIDInGroup
vThreadIDInGroupFlattened
vThreadIDInGroupFlattened as the structure index (second) parameter. Opcode #%d (counts are 1-based).
VVVVP
VW;C }#
VW;C s
VWXY{Z
VWXYZ[
VWXYZ[\]^_`a
vZ8L$
w 3C,3K(#
w tA=
w!t-=
w$t_=
w(_^[
w(tB-
w)t =
w*tT=
w/tU-
W;F s
w;t)=\
w?SVW
w@h(i
w@t.=
w[t?-
w\;wT
W\9_Ps
w_tL=
W`9_Ps
w}tn=
w+OQvr
w+t =
W<_^[
w4f9F
w5tK=
w8HPWh
WaitForThreadpoolWorkCallbacks
warning
warning location reached from this location
warning treated as error
WasInlined
WasSpecifiedAsInline
wBtG=
wchar_t
wcschr
wcsncmp
wcsrchr
wCt0=
wCta-
wDt;=
wDtg-
wESVW
wEt1-
Wf;FXs
wFt2=
wftJ=
wGt4=
Wh@g9
Wh`g9
When a %s shader writes to oCn, it must write to all of oC(n-1) down to oC0 (no gaps).
When a phase marker is present in a shader, texdepth is only permitted after the phase marker.
When a phase marker is present in a shader, texkill is only permitted after the phase marker.
When aL is used as a relative address, it must not specify any swizzle, as it is a scalar register. Aborting validation.
When code ends in subroutine definition, it must end with ret.
When constant registers are read multiple times in a single instruction, the _abs modifier must either be present on all of the constants, or none of them. 
when multiple GS output streams are used they must be pointlists
When multple usages are declared for various components of a given input v# register, the _centroid hint can only be specified on either (a) all usages declared for the register, or (b) on none of them.  Also note that the usage 'color' (with any index) has special behavior: even if the centroid hint is not specified for color, it is assumed to be set. 
When predicate register is used as the condition for a %s instruction, a replicate swizzle must be specified, to select a component. i.e. .x | .y | .z | .w (or rgba equivalent)
When relative addressing of output o# registers is used, position0 must be declared in o%d only, psize0 (if present) must be declared in o%d only, and indexing from/into o%d, or o%d (psize0 case only) is undefined. Indexing into any other declared o# is fine. If relative addressing of o# is not used in the shader, these restrictions on register numbers do not apply. 
When streams are declared, you must use emit_stream, cut_stream, and emitthencut_stream instead of emit, cut, and emitthencut.  Opcode #%d (count is 1-based). 
When the Hull Shader doesn't have a Control Point Phase, the declared Input Control Point Count (%d) must match the declared Output Control Point Count (%d), indicating the control points will pass through, or the Output Control Point Count can be set 0. 
When there is no Control Point phase in the HS, the control points are pass-through to the DS, but the Fork/Join phases in the HS cannot use 'output control points' (vocp[][] registers).  Instead just use vcp[][] input control points (which are the same anyway in the passthrough case). Opcode #%d (count is 1-based).
When using the bias source modifier on a register, the previous writer should apply the saturate modifier. This would ensure consistent behaviour across different hardware. Affected components(*) of %s source param: %s
When using the complement source modifier on a register, the previous writer should apply the saturate destination modifier. This would ensure consistent behaviour across different hardware. Affected components(*) of %s source param: %s
When writing to oDepth with predication, p0 must use a replicate swizzle to select a single component: .x | .y | .z | .w
When writing to oDepth, %s instruction must use replicate swizzle on source parameter(s), in order to select single component. i.e. .x | .y | .z | .w (or rgba equivalent)
When writing to scalar output (oFog, oPts) with predication, p0 must use a replicate swizzle to select a single component: .x | .y | .z | .w
When writing to scalar output (psize) with predication, p0 must use a replicate swizzle to select a single component: .x | .y | .z | .w
When writing to scalar output register, %s instruction must use replicate swizzle on source parameter(s), in order to select single component. i.e. .x | .y | .z | .w (or rgba equivalent)
WhIFCE
while
wHt^=
WideCharToMultiByte
width
WIREFRAME
Wj Ph
wjt?=
wkt*-
wKt==
wKt2-
wLta-
wn>Jj
WORLDTRANSFORM
wOt5=
wp_^3
WPh86
WPhIFCE
wPt:=
WRAP0
WRAP1
WRAP10
WRAP11
WRAP12
WRAP13
WRAP14
WRAP15
WRAP2
WRAP3
WRAP4
WRAP5
WRAP6
WRAP7
WRAP8
WRAP9
WRh`M
WRhLI
write
Write allowed.
Write mask for CRS must be one of: .x | .y | .z | .xy | .xz | .yz | .xyz (or rgba equivalent)
Write to oCn register cannot use _sat instruction modifier.
Write to oCn register must use full writemask (equivalent to not specifying writemask at all).
Write to oDepth register cannot use _sat instruction modifier.
Write to oDepth register must not specify any writemask. (Note, this is equivalent to using a full writemask) oDepth is a scalar output, however a specific rgba/xyzw channel does not apply -> the writemask is meaningless. 
Write to oDepth register must not specify any writemask. (Note, this is equivalent to using a full writemask) oDepth is a scalar output, however a specific rgba/xyzw channel does not apply; the writemask is meaningless. 
WriteFile
Writemask cannot be empty.
Writemask for bem must be '.rg'
wrong protocol type
wRt?=
WRVPQ
WSh6u
w-t =
wtt^=
wUt9-
ww t?
wWtG=
WWWWQ
wx8M t
wxt\=
wZtD=
x / x -> 1 <| MR.GenSimplifyInstructionsOpt1_NoExcl
x /t1
x ? firstbit*(x) : -1 -> firstbit*(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
X AND ~X => 0 <| MR.GenSimplifyInstructionsOpt1_NoExcl
X AND Y : if( and_is_identity(x,y) => X <| MR.GenSimplifyInstructionsOpt1_NoExcl
X AND Y : if( and_is_identity(y,x) => Y <| MR.GenSimplifyInstructionsOpt1_NoExcl
X OR ~X => btrue <| MR.GenSimplifyInstructionsOpt1_NoExcl
X OR Y : if( or_is_identity(x,y) => X <| MR.GenSimplifyInstructionsOpt1_NoExcl
X OR Y : if( or_is_identity(y,x) => Y <| MR.GenSimplifyInstructionsOpt1_NoExcl
x -u,
x!_[3
x!VSW
x$9^,vl
X,Y,Z
x/ShSHEX
x@jHP
x0$rc
x0_^[
x3WhSFI0
X8JKt3
XDATA
xdC;_
XEzXXDz
XFGHASHTYPES
XFt&=
XFt1=
XFuUVhl
x-G;y(r
XNA Prepass
xNht~
xor bits_known <| SFPS
xor fp_flags <| SFPS
xor int_flags <| SFPS
xor int_literal <| SFPS
xor(xor(a, iv1), iv2) -> xor(a, xor(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
Xp_^[
xsF;u
XSVW3
XTu%h
XTu\9
xtVShISG1
xtVShPSG1
xvQSVhRTS0
XWQRj
XYZ[\]^_`
xyz{|}~
XYZB1
XYZB2
XYZB3
XYZB4
XYZB5
xyzhi
XYZRHW
xyzw (same as not specifying mask)
y ;{ |4
Y VW3
y!hTH
y"_^[
y%_^[
y%j W
y@_^[
Y__^[
y=hP}
y1_^[
y2_^[
y2jth
y4i596
y5hTH
y7VhX
yC_^[
yE_^Y]
yj_^[
yk_^[
Yw?ty
YY_^]
YZ[\]^_`
YZ_ab
z .u5
z or w components of vPos register are not available in this shader version, and cannot be dcl'd.
Z[\]^_
Z[\]^_`
Z1a1<2C2
ZENABLE
Zero character semantics aren't allowed
ZFUNC
Zh_ijdk
zTPSj
Zw$t,
ZWRITEENABLE
zYXEz
zZXEz
