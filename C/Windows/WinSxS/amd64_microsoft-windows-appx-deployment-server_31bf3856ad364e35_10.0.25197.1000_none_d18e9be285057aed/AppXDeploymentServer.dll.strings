                                     Callstack: %p %p %p %p %p %p %p %p %p %p %p %p
 @8}8t?L
 `&B*0,
 8<Ut
 A^_]
 A^_^
 A^_^[]
 A^A\_^]
 A__]
 A__^
 A_A^]
 A_A^_
 A_A^_^[
 A_A^_^]
 A_A^A\
 A_A^A\_]
 A_A^A\_^
 A_A^A\_^[]
 A_A^A]_^
 A_A^A]A\]
 A_A^A]A\_
 A_A^A]A\_^]
 addPackageList:
 deferredRemovePackageFullNames:
 destagePackageList:
 f"" 
 for user 
 H;\$pu
 H3E H3E
 Hcy@H
 is updating to 
 Microsoft Corporation. All rights reserved.
 onecore\base\appmodel\staterepository\dataaccesslayer\entity-targetdevicefamily.cpp
 Operating System
 Qj2aU
 removePackageList:
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) INNER JOIN Package AS p ON p._PackageID=dg.DependentPackage WHERE dg.User=?1 AND p.PackageFullName=?2 AND (dg._WorkId=0 OR dg._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND pu._WorkId=0 AND pel._WorkId=0 AND p._WorkId=0 UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) INNER JOIN Package AS p ON p._PackageID=dg.DependentPackage WHERE dg.User=?1 AND p.PackageFullName=?2 AND dg._WorkId=0 AND pel._WorkId=0 AND p._WorkId=0 LIMIT 1);
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) WHERE pu.User=?1 AND pu.Package=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) WHERE dg.User=?1 AND dg.DependentPackage=?2 AND (dg._WorkId=0 OR dg._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) LIMIT 1);
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) WHERE pu.User=?1 AND pu.Package=?2 AND pu._WorkId=0 AND pel._WorkId=0 UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) WHERE dg.User=?1 AND dg.DependentPackage=?2 AND dg._WorkId=0 AND pel._WorkId=0 LIMIT 1);
 SELECT EXISTS(SELECT 1 FROM DependencyGraph AS dg INNER JOIN Package AS p ON p._PackageID = dg.SupplierPackage INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID = p.PackageFamily WHERE dg.User=?1 AND dg.DependentPackage=?2 AND pf.PackageFamilyName=?3 AND (dg._WorkId=0 OR dg._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) LIMIT 1);
 SELECT EXISTS(SELECT 1 FROM DependencyGraph AS dg INNER JOIN Package AS p ON p._PackageID = dg.SupplierPackage INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID = p.PackageFamily WHERE dg.User=?1 AND dg.DependentPackage=?2 AND pf.PackageFamilyName=?3 AND dg._WorkId=0 AND p._WorkId=0 LIMIT 1);
 SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID WHERE p.PackageType & 0x21 !=0 AND pf.PackageFamilyName=?2 AND (p._WorkId=0 OR p._WorkId=?3)  AND p.SourceBundle IN (SELECT SourceBundle FROM Package WHERE PackageFullName=?1) ORDER BY p.Version DESC;
 SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID WHERE p.PackageType & 0x21 !=0 AND pf.PackageFamilyName=?2 AND p._WorkId=0  AND p.SourceBundle IN (SELECT SourceBundle FROM Package WHERE PackageFullName=?1) ORDER BY p.Version DESC;
 stagePackageList:
 u7H9
 UPDATE Package SET Flags=Flags|0x400 WHERE _PackageID IN (SELECT toSetFlags._PackageID FROM PACKAGE AS toSetFlags INNER JOIN (SELECT p._PackageID, p.SourceBundle, MAX(Version) AS MaxVersion FROM Package AS p WHERE p.PackageType&0x21!=0 AND (p._WorkId=0 OR p._WorkId=?1) AND EXISTS (SELECT 1 FROM PackageUser AS puser WHERE p._PackageID=puser.Package AND puser._WorkId=?1) AND NOT EXISTS (SELECT 1 FROM PackageUser AS pu WHERE p._PackageID=pu.Package AND (pu.DeploymentState=6 OR pu.DeploymentState=5) AND (pu._WorkId=0 OR pu._WorkId=?1) AND (p._WorkId=0  OR p._WorkId=?1) LIMIT 1) GROUP BY PackageFamily) highestVersion ON CASE WHEN toSetFlags.SourceBundle=0 THEN highestVersion._PackageID=toSetFlags._PackageID ELSE toSetFlags.SourceBundle=highestVersion.SourceBundle AND toSetFlags.PackageType=8 END)
 UPDATE Package SET Flags=Flags|0x400 WHERE _PackageID IN (SELECT toSetFlags._PackageID FROM PACKAGE AS toSetFlags INNER JOIN (SELECT p._PackageID, p.SourceBundle, MAX(Version) AS MaxVersion FROM Package AS p WHERE p.PackageType&0x21!=0 AND p._WorkId=0 AND NOT EXISTS (SELECT 1 FROM PackageUser AS pu WHERE p._PackageID=pu.Package AND (pu.DeploymentState=6 OR pu.DeploymentState=5) AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1) AND (p.PackageFamily NOT IN (SELECT PackageFamily FROM Package WHERE Flags&0x400!=0 GROUP BY PackageFamily)) GROUP BY PackageFamily) highestVersion ON CASE WHEN toSetFlags.SourceBundle=0 THEN highestVersion._PackageID=toSetFlags._PackageID ELSE toSetFlags.SourceBundle=highestVersion.SourceBundle AND toSetFlags.PackageType=8 END)
 UPDATE Package SET Flags=Flags|0x400 WHERE _PackageID IN (SELECT toSetFlags._PackageID FROM PACKAGE AS toSetFlags INNER JOIN (SELECT p._PackageID, p.SourceBundle, MAX(Version) AS MaxVersion FROM Package AS p WHERE p.PackageType&0x21!=0 AND p.PackageFamily=? AND p._WorkId=0 AND NOT EXISTS (SELECT 1 FROM PackageUser AS pu WHERE p._PackageID=pu.Package AND (pu.DeploymentState=6 OR pu.DeploymentState=5) AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1) GROUP BY PackageFamily) highestVersion ON CASE WHEN toSetFlags.SourceBundle=0 THEN highestVersion._PackageID=toSetFlags._PackageID ELSE toSetFlags.SourceBundle=highestVersion.SourceBundle AND toSetFlags.PackageType=8 END)
 UPDATE Package SET Flags=Flags|0x400 WHERE _PackageID IN (SELECT toSetFlags._PackageID FROM PACKAGE AS toSetFlags INNER JOIN (SELECT p._PackageID, p.SourceBundle, MAX(Version) AS MaxVersion FROM Package AS p WHERE p.PackageType&0x21!=0 AND p.PackageFamily=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND NOT EXISTS (SELECT 1 FROM PackageUser AS pu WHERE p._PackageID=pu.Package AND (pu.DeploymentState=6 OR pu.DeploymentState=5) AND (pu._WorkId=0 OR pu._WorkId=?2) AND (p._WorkId=0  OR p._WorkId=?2)  LIMIT 1) GROUP BY PackageFamily) highestVersion ON CASE WHEN toSetFlags.SourceBundle=0 THEN highestVersion._PackageID=toSetFlags._PackageID ELSE toSetFlags.SourceBundle=highestVersion.SourceBundle AND toSetFlags.PackageType=8 END)
 updateList:
 UpstreamDependentPackageFullName
 Windows
 X*o 
!$2ed
!\$ H
!\$ L
!\$(E3
!\$(H
!_additionalValuesForInprocServer32.try_emplace( ValueName(WindowsGetStringRawBuffer(name, nullptr)), RegSzValueData(value)).second
!~NnGQ
!current.IsValid()
!D$x!D$p!D$tL
!emplaceResult.second
!l$`H
!l$xH
!m_values.try_emplace(std::move(valueName), std::move(valueData)).second
!pointer
!string
!t$ 3
!T$@L
!t$`H
!This program cannot be run in DOS mode.
"%ls"
"%ls" %ls
"&B*0,b&0.N
"&B*0,T&0.`
"(RSZ
"/NX(
"<?by
"D{h3
"UW72T
#9rrR
#HIUl5
#q3 ,
#StreamingDataSourcePrefetchCanceled
#text
$&:@t
$(package.mutableRoot)\
$(package.volumeRoot)\
$`@s>=
$=2WV
$0< u
$a"<.
$Kernel.Smartlocker.OriginClaim
%%f%$
%|fUN<
%02u%02u%02u %02u%02u%02u.%03u [%s 0x%08X] P%x T%x: %s
%02u%02u%02u %02u%02u%02u.%03u [Profile %ums] P%x T%x: %s
%02u%02u%02u %02u%02u%02u.%03u [Trace] P%x T%x: %s
%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X
%1.8e;%1.8e;%1.8e;%1.8e;%1.8e;%1.8e
%AppRepository%
%AppRepository%\Downlevel\StateRepository-Machine.srd
%AppRepository%\StateRepository-Deployment.srd
%AppRepository%\StateRepository-Machine.srd
%AppRepository%\StateRepository-User-%UserSid%.srd
%d.%d.%d.%d
%f,%f,%f
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%u)\%hs!%p: 
%hu.%hu.%hu.%hu
%I64x
%lCD +
%ls isn't framework.
%ls isn't on allowed list.
%PROGRAMDATA%
%programdata%\Microsoft\Windows\AppRepository\
%s!%s
%s%s%s
%s%s%s%s
%s%s\%s
%s.%s
%s.%s%s
%s:%s:%s
%s\%d
%s\%s
%s\%s.%03d.etl
%s\AC
%s\AppData
%s\LocalCache
%s\LocalState
%s\microsoft.system.package.metadata\%s
%s\resources.pri
%s\RoamingState
%s\Settings
%s\TempState
%s\WpSystem
%s\WpSystem\%s\AppData\Local\Packages
%s\WpSystem\*
%s\WpSystem\AppData\Local\Packages
%s_%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X.%s
%s_%s_%s
%s_%s_%s_%s
%s_32
%s_64
%systemroot%\System32\AppInstallerBackgroundUpdate.exe
%USERPROFILE%
%windir%\Logs\WindowsUpdate\
%windir%\system32\eraproxyapp.exe
%windir%\system32\gamecoreproxyapp.exe
%windir%\syswow64\aghost.exe
%windir%\Temp\
%ws isn't on allowed list.
%ws needs remediation and should be reinstalled.
&\$,&
(!x4(_
((HRESULT)0x8007000EL)
((HRESULT)0x80070057L)
((HRESULT)0x80080204L)
(/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application' and @*[local-name()='Executable']])
(/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application' and @*[local-name()='HostId' and .='VailProxy']])
(/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application' and @*[local-name()='HostId']])
(/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @*[local-name()='Executable']])
(/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @*[local-name()='HostId' and .='VailProxy']])
(/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @*[local-name()='HostId']])
(/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @*[local-name()='Scope' and .='machine']])
(/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension' and @*[local-name()='Executable']])
(/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension' and @*[local-name()='HostId' and .='VailProxy']])
(/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension' and @*[local-name()='HostId']])
(/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension' and @*[local-name()='Scope' and .='machine']])
(_^[]
(|$PI
(|K+2c
(9%BT
(A;;0x120089;;;BU)
(A;;0x1200A9;;;BU)
(A;;0x1200a9;;;RC)
(A;;0xB;;;%s)
(A;;FR;;;BU)
(A;;GA;;;SY)(A;;0x120089;;;S-1-15-2-2)(A;;0x120089;;;LS)(A;;0x120089;;;NS)(A;;GA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;;0x120089;;;S-1-15-3-1024-3635283841-2530182609-996808640-1887759898-3848208603-3313616867-983405619-2501854204)
(A;;GA;;;SY)(A;;0x1200A9;;;S-1-15-2-2)(A;;0x1200A9;;;LS)(A;;0x1200A9;;;NS)(A;;GA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;;0x1200A9;;;S-1-15-3-1024-3635283841-2530182609-996808640-1887759898-3848208603-3313616867-983405619-2501854204)
(A;CI;FRFX;;;BA)(XA;;FRFX;;;BU;(exists WIN://SYSAPPID))
(A;CI;FRFX;;;BU)(XA;;FX;;;BU;(exists WIN://SYSAPPID))
(A;CI;FX;;;BU)(A;OICI;0x010116;;;BA)
(A;OICI;0x120089;;;%s)
(A;OICI;0x120089;;;%s)(A;OICI;0x120089;;;%s)
(A;OICI;0x120089;;;AC)(A;OICI;0x120089;;;S-1-15-2-2)(A;OICI;0x120089;;;BU)
(A;OICI;0x120089;;;BU)
(A;OICI;0x1200A9;;;%s)
(A;OICI;0x1200A9;;;%s)(A;OICI;0x1200A9;;;%s)
(A;OICI;0x1200A9;;;AC)
(A;OICI;0x1200A9;;;AC)(A;OICI;0x1200A9;;;S-1-15-2-2)(A;OICI;0x1200A9;;;BU)
(A;OICI;0x1200A9;;;BU)
(A;OICI;0x1200A9;;;S-1-15-2-2)
(A;OICI;FR;;;BU)
(A;OICI;FRFX;;;BA)
(A;OICI;FRFX;;;BU)
(A;OICI;GR;;;S-1-15-3-1024-3635283841-2530182609-996808640-1887759898-3848208603-3313616867-983405619-2501854204)(A;OICI;GA;;;SY)(A;OICI;FR;;;RC)
(A;OICI;GRGX;;;S-1-15-3-1024-3635283841-2530182609-996808640-1887759898-3848208603-3313616867-983405619-2501854204)(A;OICI;GA;;;SY)(A;OICI;FRFX;;;LS)(A;OICI;FRFX;;;NS)(A;OICI;FRFX;;;RC)
(A;OICI;GRGX;;;S-1-15-3-1024-3635283841-2530182609-996808640-1887759898-3848208603-3313616867-983405619-2501854204)(A;OICI;GA;;;SY)(A;OICI;FRFX;;;RC)
(A^_^[
(A_A^_^[]
(A_A^A]A\_^[]
(caller: %p) 
(currentEnd - currentBegin) > MaxKeyNameLength
(D$ f
(D$ H
(D$ I
(D$@f
(D$@L
(D$`f
(database)
(eCDq
(HashMap<CLSID, ComProxyStubRegistration*>::Make(&_proxyStubs))
(HashMap<CLSID, ComTreatAsClassRegistration*>::Make(&_treatAsClasses))
(HashMap<CLSID, Internal::ComClassRegistrationCombinedProperties*>::Make(&_classes))
(HashMap<IID, ComInterfaceRegistration*>::Make(&_interfaces))
(HashMap<UINT32, IComServerRegistration*>::Make(&_servers))
(L9u8u
(lBpTl"rL
(m_text.length() - currentBegin) > MaxKeyNameLength
(null)
(query only)
(registrationStore->*Traits::getEntriesForPackage)(packageFullName, &entriesHandle)
(registrationStore->*Traits::readEntry)(packageFullName, EntryIdRaiiTraits::UnwrapRaiiType(entryId), properties, nullptr, nullptr)
(registrationStore->*Traits::tryGetEntryIdForPackageByIndex)(entriesHandle, index, &hasEntryAtIndex, &entryId)
(t$ H
(t$`H
(t$`I
(t$`L
(t$0H
(Unknown)
(XA;;0x120089;;;BU;(exists WIN://PKG))
(XA;;0x1200A9;;;BU;(exists WIN://PKG))
(XA;;0x1200A9;;;BU;(WIN://SYSAPPGROUPID Contains "
(XA;;0x1200A9;;;BU;(WIN://SYSAPPID Contains "
(XA;OICI;0x120089;;;BU;(WIN://SYSAPPGROUPID Contains "%s"))
(XA;OICI;0x120089;;;BU;(WIN://SYSAPPID Contains "%s"))
(XA;OICI;0x1200A9;;;BU;(WIN://SYSAPPGROUPID Contains "%s"))
(XA;OICI;0x1200A9;;;BU;(WIN://SYSAPPID Contains "%s"))
(z&:<
)(+LH
)(A;OICI;0x1200a9;;;
)D$ H
)D$0f
)D$0H
)L$@f
)L$@H
)L$`H
)L$`L
)L$PH
)L$pH
)L$PL
)L$pL
)L$PL
)t$ I
)t$`M
)t$0H
)t$0I
)t$0t%
)t$PL
***Unexpected***
*.dat*
*.rslc
*:c>;
*[local-name()='%s']
*[local-name()='AllowedProduct']
*[local-name()='AppExecutionAlias']
*[local-name()='AppExtension']
*[local-name()='AppExtensionHost']/*[local-name()='Name']
*[local-name()='AppInstaller']/*[local-name()='Dependencies']/*[local-name()='Package']
*[local-name()='AppInstaller']/*[local-name()='MainBundle']
*[local-name()='AppInstaller']/*[local-name()='MainPackage']
*[local-name()='AppInstaller']/*[local-name()='OptionalPackages']/*[local-name()='Bundle']
*[local-name()='AppInstaller']/*[local-name()='OptionalPackages']/*[local-name()='Package']
*[local-name()='AppInstaller']/*[local-name()='RelatedPackages']/*[local-name()='Bundle']
*[local-name()='AppInstaller']/*[local-name()='RelatedPackages']/*[local-name()='Package']
*[local-name()='AppInstaller']/*[local-name()='RepairUris']/*[local-name()='RepairUri']
*[local-name()='AppInstaller']/*[local-name()='UpdateSettings']/*[local-name()='AutomaticBackgroundTask']
*[local-name()='AppInstaller']/*[local-name()='UpdateSettings']/*[local-name()='ForceUpdateFromAnyVersion']
*[local-name()='AppInstaller']/*[local-name()='UpdateSettings']/*[local-name()='OnLaunch']
*[local-name()='AppInstaller']/*[local-name()='UpdateUris']/*[local-name()='UpdateUri']
*[local-name()='AppInstaller']/@Uri
*[local-name()='AppInstaller']/@Version
*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.startupTask']
*[local-name()='AppService']
*[local-name()='AppUriHandler']
*[local-name()='BackgroundTasks']/*[local-name()='Task']
*[local-name()='ContentPackageVisualElements']
*[local-name()='DisplayName']
*[local-name()='DriverConstraint']
*[local-name()='EditFlags']
*[local-name()='ExecutionAlias']
*[local-name()='FileTypeAssociation']
*[local-name()='FileTypeAssociation']/*[local-name()='ProgId']
*[local-name()='FileTypeAssociation']/*[local-name()='SupportedFileTypes']/*[local-name()='FileType']
*[local-name()='HoloContent']
*[local-name()='Host']
*[local-name()='HostRuntime']
*[local-name()='InfoTip']
*[local-name()='Logo']
*[local-name()='MixedRealityModel']/@*[local-name()='Path']
*[local-name()='ProgId']
*[local-name()='Properties']
*[local-name()='Protocol']
*[local-name()='PublisherCacheFolders']/*[local-name()='Folder']
*[local-name()='StartupTask']
*[local-name()='SupportedVerbs']/*[local-name()='Verb' and @Id='Open']
*[local-name()='VisualElements']
*[local-name()='VisualElements']/*[local-name()='ApplicationView']
*[local-name()='VisualElements']/*[local-name()='DefaultTile']/*[local-name()='MixedRealityModel']/*[local-name()='SpatialBoundingBox']
*[local-name()='VisualElements']/*[local-name()='DefaultTile']/*[local-name()='MixedRealityModel']/@Path
*[local-name()='VisualElements']/*[local-name()='DefaultTile']/*[local-name()='ShowNameOnTiles']/*[local-name()='ShowOn']
*[local-name()='VisualElements']/*[local-name()='DefaultTile']/@ShortName
*[local-name()='VisualElements']/*[local-name()='DefaultTile']/@ShowName
*[local-name()='VisualElements']/*[local-name()='DefaultTile']/@Square310x310Logo
*[local-name()='VisualElements']/*[local-name()='DefaultTile']/@Tall150x310Logo
*[local-name()='VisualElements']/*[local-name()='DefaultTile']/holo:HoloContent
*[local-name()='VisualElements']/*[local-name()='InitialRotationPreference']/*[local-name()='Rotation']
*[local-name()='VisualElements']/*[local-name()='LockScreen']
*[local-name()='VisualElements']/*[local-name()='LockScreen']/@BadgeLogo
*[local-name()='VisualElements']/*[local-name()='LockScreen']/@Notification
*[local-name()='VisualElements']/*[local-name()='SplashScreen']
*[local-name()='VisualElements']/*[local-name()='SplashScreen']/@*[local-name()='Optional']
*[local-name()='VisualElements']/@BackgroundColor
*[local-name()='VisualElements']/@DisplayName
*[local-name()='VisualElements']/@ForegroundText
*[local-name()='XboxLive']
*9\$8v"H
*fD97u
*value
, could not get user sid
, Getting size failed with hr=
, Reason: 
, Size: 
, user SID: 
, Users: 
,~:'B
,8]Hu'L
,A!p'
,D8ug
,p<DR
,Zndrz
... Applicability is offline, because it is not Installed for every user and is offline
... Applicability is offline, because package family is on an offline volume
... Applicability state is Installable because a higher version of the package was found, but the caller is forcing a downgrade.
... Applicability state is Installable because a higher version was found, but lower versions are installable
... Applicability state is Installable because it is a framework and concurrent architecture installs are allowed when neither of them is neutral.
... Applicability state is Installable because it is not already installed and no higher version was found
... Applicability state is Installable because the package is Inbox and a different version is currently installed
... Applicability state is Installed because a higher version of the package was found installed.
... Applicability state is Installed because the exact version, arch and language was found installed.
... Applicability state is Installed but this inbox package was not found in the per-user AllUserStore. Applicability State is RequiresReinstall.
... Applicability state is Not Installable
... Applicability state is NotInstallable because a version of the package in the same family is StageInPlace (attached)
... Applicability state is NotInstallable because it is already installed with a different resourceID
... Applicability state is RequiresReinstall because the exact version, arch and language was found installed, but it is in a bad status
... Checking Applicability for user
... Package may have been blocked because payload type is unknown
...ArchitectureNotCompatible
...but the architecture is no longer supported on this system
...butNotInstalledForCurrentUser.
...ComparedAgainstInstalledPackage
...ComparedToExistingPackage
../..
./*[local-name()='AppService']
./*[local-name()='BackgroundTasks']
./*[local-name()='VisualElements']
./_[e
./m:VisualElements
./m2:VisualElements
./m3:VisualElements
.?AUhresult_access_denied@winrt@@
.?AUhresult_canceled@winrt@@
.?AUhresult_changed_state@winrt@@
.?AUhresult_class_not_available@winrt@@
.?AUhresult_class_not_registered@winrt@@
.?AUhresult_error@winrt@@
.?AUhresult_illegal_delegate_assignment@winrt@@
.?AUhresult_illegal_method_call@winrt@@
.?AUhresult_illegal_state_change@winrt@@
.?AUhresult_invalid_argument@winrt@@
.?AUhresult_no_interface@winrt@@
.?AUhresult_not_implemented@winrt@@
.?AUhresult_out_of_bounds@winrt@@
.?AUhresult_wrong_thread@winrt@@
.?AV<lambda_c11cd384dede5ed21b37ab49eb636685>@@
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVbad_optional_access@std@@
.?AVexception@std@@
.?AVinvalid_argument@std@@
.?AVlogic_error@std@@
.?AVout_of_range@std@@
.?AVResultException@wil@@
.?AVtype_info@@
._Q%N
.00cfg
.appx_
.blockcache
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$brc
.data$r$brc
.data$rs$brc
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.emsix
.gehcont
.gfids
.giats
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.L5oj
.LVHL
.msix
.onecore\admin\appmodel\packagemanager\server\sharedpackagecontainerparameterprocessor.cpp
.pdata
.rdata
.rdata$brc
.rdata$r
.rdata$voltmd
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.recovery
.remove
.rslc
.rsrc
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$di
.text$lp00SPGO
.text$mn
.text$mn$00
.text$x
.text$yd
.xdata
.xdata$x
.xn--
/*[local-name()="Package"]/*[local-name()="Applications"]/*[local-name()="Application" and @*[local-name()="RuntimeBehavior" and .="win32App"]]
/*[local-name()="Package"]/*[local-name()="Applications"]/*[local-name()="Application" and @*[local-name()="TrustLevel" and .="mediumIL"] and not(@*[local-name()="RuntimeBehavior" and .="packagedClassicApp"] or @*[local-name()="RuntimeBehavior" and .="win32App"]) and not(@EntryPoint="Windows.FullTrustApplication")]
/*[local-name()="Package"]/*[local-name()="Applications"]/*[local-name()="Application" and @*[local-name()="TrustLevel" and .="mediumIL"] and not(@EntryPoint="Windows.FullTrustApplication" or not(boolean(//EntryPoint)))]
/*[local-name()="Package"]/*[local-name()="Applications"]/*[local-name()="Application"]/*[local-name()="Extensions"]/*[local-name()="Extension" and @*[local-name()="RuntimeBehavior" and .="win32App"]]
/*[local-name()="Package"]/*[local-name()="Applications"]/*[local-name()="Application"]/*[local-name()="Extensions"]/*[local-name()="Extension" and @*[local-name()="TrustLevel" and .="mediumIL"] and not(@*[local-name()="RuntimeBehavior" and .="packagedClassicApp"] or @*[local-name()="RuntimeBehavior" and .="win32App"]) and not(@EntryPoint="Windows.FullTrustApplication")]
/*[local-name()="Package"]/*[local-name()="Applications"]/*[local-name()="Application"]/*[local-name()="Extensions"]/*[local-name()="Extension" and @*[local-name()="TrustLevel" and .="mediumIL"] and not(@EntryPoint="Windows.FullTrustApplication" or not(boolean(//EntryPoint)))]
/*[local-name()="Package"]/*[local-name()="Extensions"]/*[local-name()="Extension" and @*[local-name()="RuntimeBehavior" and .="win32App"]]
/*[local-name()="Package"]/*[local-name()="Extensions"]/*[local-name()="Extension" and @*[local-name()="TrustLevel" and .="mediumIL"] and not(@*[local-name()="RuntimeBehavior" and .="packagedClassicApp"] or @*[local-name()="RuntimeBehavior" and .="win32App"]) and not(@EntryPoint="Windows.FullTrustApplication")]
/*[local-name()="Package"]/*[local-name()="Extensions"]/*[local-name()="Extension" and @*[local-name()="TrustLevel" and .="mediumIL"] and not(@EntryPoint="Windows.FullTrustApplication" or not(boolean(//EntryPoint)))]
/*[local-name()='Package']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application' and @Id='%s']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application' and @Id='%s']/*[local-name()='ApplicationContentUriRules']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application' and @Id='%s']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.ntServices']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application' and @Id='%s']/*[local-name()='Extensions']/*[local-name()='Extension']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application' and @Id='%s']/*[local-name()='Properties']/*
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application' and @Id='%s']/*[local-name()='VisualElements']/*[local-name()='DefaultTile']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application' and @StartPage] | /*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @StartPage]
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.localExperiencePack']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.ntServices']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.service']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='xbox.live']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='xbox.vui']/*[local-name()='XboxVui']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Ratings']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='VisualElements']/*[local-name()='DefaultTile']
/*[local-name()='Package']/*[local-name()='Capabilities']/*[local-name()='Capability'][@Name='contentRestrictions']
/*[local-name()='Package']/*[local-name()='Capabilities']/*[local-name()='CustomCapability' and @Name='Microsoft.coreAppActivation_8wekyb3d8bbwe']
/*[local-name()='Package']/*[local-name()='Capabilities']/*[local-name()='CustomCapability' and @Name='Microsoft.deployFullTrustOnHost_8wekyb3d8bbwe']
/*[local-name()='Package']/*[local-name()='Capabilities']/*[local-name()='CustomCapability' and @Name='Microsoft.nonUserConfigurableStartupTasks_8wekyb3d8bbwe']
/*[local-name()='Package']/*[local-name()='Dependencies']/*[local-name()='DriverDependency']
/*[local-name()='Package']/*[local-name()='Dependencies']/*[local-name()='HostRuntimeDependency']
/*[local-name()='Package']/*[local-name()='Dependencies']/*[local-name()='OSPackageDependency']
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.dataProtection']/*[local-name()='DataProtection']
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.hostRuntime']
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.installedLocationVirtualization']
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.mutablePackageDirectories']/*[local-name()='MutablePackageDirectories']/*[local-name()='MutablePackageDirectory']
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.userMutablePackageDirectories']/*[local-name()='UserMutablePackageDirectories']/*[local-name()='UserMutablePackageDirectory']
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension'] | /*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension']
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension'] | /*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension'] | /*[local-name()='Package']/*[local-name()='Extensions']/mx:PackageExtension
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension'] |/*[local-name()='Package']/*[local-name()='Extensions']/mx:PackageExtension
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension']/*[local-name()='CustomInstall']
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='PackageExtension' and @Category='xbox.contentpackage']/*[local-name()='ContentPackage']
/*[local-name()='Package']/*[local-name()='Prerequisites']/*[local-name()='OSName']
/*[local-name()='Package']/*[local-name()='Properties']/*
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='AllowExternalContent' and .='true']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='AutoUpdate']/*[local-name()='AppInstaller']/@File
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='DependencyTarget' and text()='true']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='Description']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='DisplayName']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='FileSystemWriteVirtualization' and text()='disabled']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='FileSystemWriteVirtualization']/*
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='HeapPolicy' and .='win32Compatible']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='Logo']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='ModificationPackage' and text()='true']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='PackageIntegrity']/*[local-name()='Content']/@Enforcement
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='PublisherDisplayName']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='RegistryWriteVirtualization' and text()='disabled']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='RegistryWriteVirtualization']/*
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='SupportedUsers']
//*[local-name() = 'Extension' and @Category = 'windows.settingsApp']
/6}#x&j
/fU#'
/m#\.hAd
: could not check access
: could not get SDDL
: could not get security descriptor
: does not have a resources.pri file or could not create a resource manager
: owner is 
: SDDL is 
: user has access 0x
: user has no access
::GetLastError()
::RegOpenKeyExW(classesRootKey.get(), Constants::CLSID, 0 , KEY_READ, &clsidTopLevelKey)
::RegOpenKeyExW(clsidKey.get(), Constants::InprocServer32, 0 , KEY_READ, &inprocServer32Key)
::RegOpenKeyExW(clsidTopLevelKey.get(), GuidString(clsid), 0 , samDesired, key)
::RegOpenKeyExW(GetHiveKey(whichHive), GetClassesRootPathRelativeToHiveKey(whichHive), 0 , samDesired, key)
:\<SM5\
:AE`*
:memory:
:o%)7
:PKCXu
:t,fE
; Package family name: 
; Package folder doesn't exist
; Package folder exists
; Package location unknown
; Package: 
;\$8s9H
;\$xt
;] sDH
;|$@r
;|$Dr
;|$xs
;}6/2
;~ rB
;D8t$St
;D8ugu
;Eht 
-;G0mg
;L$HsNH
;L$pt
;l$Pt
;PKCXt
;t$@t
;T$`u;
;u@sKI
?%]#}Q
?_Xbad_function_call@std@@YAXXZ
?_Xlength_error@std@@YAXPEBD@Z
?_Xout_of_range@std@@YAXPEBD@Z
?7&Jg
?D9}8
?PFun=
?r8't
?rOX0
?uri=
?WilStaging_02
?X<Yb
@ !H0H
@)iS}x
@*[local-name()='%ls']
@*[local-name()='CompatMode']
@*[local-name()='CurrentDirectoryPath']
@*[local-name()='DdeExecApplication']
@*[local-name()='DdeExecCommand']
@*[local-name()='DdeExecIfExec']
@*[local-name()='DdeExecTopic']
@*[local-name()='HostId']
@*[local-name()='HoursBetweenUpdateChecks']
@*[local-name()='Parameters']
@*[local-name()='RuntimeBehavior']
@*[local-name()='Scope']
@*[local-name()='ServiceWorker']
@*[local-name()='ShowPrompt']
@*[local-name()='Subsystem']
@*[local-name()='SupportsMultipleInstances']
@*[local-name()='TrustLevel']
@*[local-name()='UpdateBlocksActivation']
@.data
@.didat
@.reloc
-@/kp
@@8}punH
@66666666[
@8!HHH
@8|$ u
@8|$@
@8|$@t9H
@8|$0
@8|$0@
@8|$8t>H
@8|$A
@8|$Ct0
@8|$H
@8|$P
@8}?t]H
@8}@t
@8}@t;@
@8}@u
@8}_t
@8}Ht
@8}Pt
@8}wt
@8}wu+
@8=$^H
@8l$pt
@8l$Xu
@8oht
@8sUt
@8t$ tR
@8t$@
@8t$@I
@8t$@t
@8t$@t1
@8t$@u4H
@8t$`
@8t$0
@8t$0tEH
@8t$2
@8t$At
@8t$Aus@
@8t$Hu
@8t$p
@8t$Pt
@8t$pt6H
@8t$PtEA
@8u t
@8u@t/A
@8u@u
@8u@uvM
@8u0t
@8u0tr
@8u0u;H
@8u4t
@8ugt
@8ugu
@8ukt
@8umt
@8untZH
@8uot
@8uPtP
@8upu)L
@8uWu*L
@A^_]
@A^_^
@A^_^[]
@A^_^][
@A^A\_
@A^A\_^]
@A_A\_^]
@A_A^]
@A_A^_
@A_A^_^]
@A_A^A\
@A_A^A\_]
@A_A^A\_^
@A_A^A\_^[]
@A_A^A]
@A_A^A]_]
@A_A^A]_^
@A_A^A]_^[]
@A_A^A]A\_^[
@A_A^A]A\_^]
@Center
@Extents
@FamilyName
@FullName
@H;w r
@heob
@HPX`hpx
@IsLOBApp
@MinDate
@MinVersion
@Name
@P!H`f
@PackageType
@ProvisionSourceIsBundle
@Qm6t
@R<R:4N8R
@StartupType
@SUVWATAUAVAWH
@SUVWAVAW
@SUVWAVAWH
@SUVWAVH
@SUVWH
@SUWAVAWH
@SVWATAUAVAWH
@SVWAUH
@SVWAVAWH
@SVWH
@Tile
@u;L9;u$E3
@UATAUAVAWH
@USVATAUAVAWH
@USVWATAUAVAWH
@USVWATAUAVH
@USVWATAVAWH
@USVWAUAVAWH
@USVWAVAWH
@USVWAVH
@USVWAWH
@USVWH
@USWATAUAVAWH
@USWATAVAWH
@USWAVH
@USWH
@UVWATAVAWH
@vMY8
[ H;X
[ UVWH
[%hs(%hs)]
[%hs]
[~k6%s
[checkstatements] #%u Database %p: Statement %p: %s SQL %s
[DatabaseCache.Add] #%u Database %p: StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu
[DatabaseCache.Get(Hit)] #%u DatabaseCache %p: Database %p: StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu: Filename %s
[DatabaseCache.Get(Miss)] #%u DatabaseCache %p: Cache Size/Hits/Misses %u/%llu/%llu: Filename %s
[io:xClose] #%u xClose() failed
[IzZG
[post-sqlite3_exec] #%u Database %p: Try %u (%llums) {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X} TID:%u : SQL %s
[post-sqlite3_finalize] #%u Database %p: Statement %p: --
[post-sqlite3_prepare] #%u Database %p: Statement -------- --: Try %u (%llums) : SQL %s
[post-sqlite3_prepare] #%u Database %p: Statement %p %s: Try %u (%llums) : SQL %s
[post-sqlite3_reset] #%u Database %p: Statement %p: %s
[post-sqlite3_step] #%u Database %p: Statement %p %s: Tries %u
[pre-DatabaseCache.Get] #%u DatabaseCache %p: Cache Size/Hits/Misses %u/%llu/%llu: Filename %s
[pre-sqlite3_exec] #%u Database %p {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X} TID:%u : SQL %s
[pre-sqlite3_finalize] #%u Database %p: Statement %p: %s
[pre-sqlite3_prepare] #%u Database %p : SQL %s
[pre-sqlite3_reset] #%u Database %p: Statement %p: %s
[pre-sqlite3_step] #%u Database %p: Statement %p %s
[pre-StatementCache.Get] #%u StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu
[rs6|
[RX{d
[sqlite3_close] #%u Database %p: %s
[sqlite3_exec] #%u Database %p: Try %u (%llums) {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}%s%s TID:%u %s : SQL %s
[sqlite3_finalize] #%u Database %p: Statement %p: --: %s
[sqlite3_open: lastErrNo:0x%X filecontrolrc:%d] #%u Database %p: %hs
[sqlite3_open: lastErrNo:0x%X filecontrolrc:%d] #%u Database %p: %s
[sqlite3_prepare] #%u Database %p: Try %u (%llums) %s : SQL %s
[sqlite3_prepare] #%u Database %p: Try %u (%llums)%s%s %s : SQL %s
[sqlite3_reset] #%u Database %p: Statement %p: %s: %s
[sqlite3_step] #%u Database %p: Statement %p %s: Try %u (%llums)%s%s %s : SQL %s
[S'rA9
[StatementCache.Add(list)] #%u StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu
[StatementCache.Add] #%u Database %p: StatementCache %p: Statement %p: Cache Size/Hits/Misses %u/%llu/%llu: SQL %s
[StatementCache.Get(Hit)] #%u Database %p: StatementCache %p: Statement %p: Cache Size/Hits/Misses %u/%llu/%llu: SQL %s
[StatementCache.Get(Miss)] #%u StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu: SQL %s
[tx6=
[vfs:xOpen] #%u sqlite3_malloc() failed
[vN.x
\$ E3
\$ UH
\$ UVW
\$ UVWATAUAVAWD
\$ UVWATAUAVAWH
\$ UVWATAVH
\$ UVWAVAWH
\$ UVWH
\$ VWAVH
\$ WH
\$(E3
\$;8]
\$@E3
\$`E3
\$`fA
\$`L;
\$`L;APs
\$`L;GPs
\$0;\$4u'D
\$0H;
\$0H90t
\$0H98t
\$0H9GhH
\$0I;
\$0L;
\$0u:H
\$0ue
\$8D8
\$8E3
\$8H;
\$8H9
\$8I;
\$8Lc
\$HA;
\$HE3
\$hH;\$p
\$HI;
\$HL;
\$HL9u0t|
\$nfA
\$P;\$0t
\$pD8d$Q
\$pD9|$0tWH
\$PfD
\$pH!EHH
\$PH;
\$pI;
\$PL90
\$TE8
\$X!D$PL
\$X;]
\$XD;
\$XD8+uh
\$xI;
\*.xml
\\.\FltMgr
\\?\%s\microsoft.system.package.metadata\%s
\\?\UNC\
\AC\#!
\AC\PackageInUseState\
\AppData
\Autogen
\ByteCodeGenerator.exe
\C:7w
\D8|$ td
\Deleted
\DeletedAllUserPackages
\JSByteCodeCache
\Kr<b$
\Local
\LocalCache
\LocalCache\Local\Microsoft
\LocalState
\Microsoft\Windows\AppxDeploymentClient
\Microsoft\Windows\CurrentVersion\AppModel\StateChange\PackageList\
\Microsoft\WindowsApps
\MutableBackup
\MutablePackageRoot
\Packages
\Packages\
\resources.pri
\roaming.lock
\RoamingState
\RPC Control
\RXRV
\Schemas
\Settings
\settings.dat
\Settings\roaming.lock
\SharedLimitedTime\
\SharedLocal
\Staging
\t4fA
\TempState
\u"fD
\u%fE
\Users\
\Volume{
\WcifsPort
\WOW6432Node
\Wow6464Node
\WowAA32Node
\WowAA64Node
\WpSystem\
]@8t$8u+H
]])qY
]|pIX
]8!]@H!]HH
]8H9^@t5H
]H;]@u
]HD8~,u
]HH!]@D
]or1G"B
]PL;iPs
]PL;oPs
]w8_,u'H
^ H9;t
^#;v1
^<vFc
^A9$z
^D9d$@M
^J>`h
^lBaaAV
^m&5t
^onecore\admin\appmodel\osim\src\winrt\lib\xmldomelement.cpp
^U~,]
_(zp{
_/j^*
_^[]H
_^6&a
__C_specific_handler
__current_exception
__current_exception_context
__CxxFrameHandler3
__CxxFrameHandler4
__std_terminate
__TlgCV__
_1.0.0.0_neutral_neutral_nopublisherid
_3E}UJ
_8wekyb3d8bbwe
_activatableClassId.Set(activatableClassId.Get())
_attributes->GetView(&(_properties.CustomAttributes.MapView))
_attributes->GetView(attributes)
_Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository\Packages
_classes->First(&iterator)
_classes->Insert(clsid, classProperties.Get(), &replaced)
_classNames.As(&classNamesIterable)
_classNames->Append(className.Get())
_combinedProperties
_combinedProperties->AddStringValueForInprocServer32CompatibilityKey( assemblyAttributeName.Get(), assembly)
_combinedProperties->AddStringValueForInprocServer32CompatibilityKey( implementationClassAttributeName.Get(), implementationClass)
_combinedProperties->AddStringValueForInprocServer32CompatibilityKey( runtimeVersionAttributeName.Get(), runtimeVersion)
_combinedProperties->SetInprocServerDllPath_arm(mscoreeDll.Get())
_combinedProperties->SetInprocServerDllPath_arm64(mscoreeDll.Get())
_combinedProperties->SetInprocServerDllPath_x64(mscoreeDll.Get())
_combinedProperties->SetInprocServerDllPath_x86(mscoreeDll.Get())
_combinedProperties->SetIsSystemInprocServerDll(true)
_combinedProperties->SetOutofprocClassIsSurrogate(true)
_combinedProperties->SetServerId(serverId)
_current == nullptr
_customAttributes->GetView(&customAttributesView)
_customAttributes->HasKey(name, &alreadyHasKey)
_customAttributes->Insert(name, propValue.Get(), &replacedIgnored)
_customAttributes->Lookup(name, &existingPropValue)
_cw5n1h2txyewy
_CxxThrowException
_dataFormats.As(&dataFormatsIterable)
_dataFormats->Append(dataFormat)
_dataFormats->IndexOf(dataFormat, &indexIgnored, &found)
_exeServers->First(&iterator)
_exeServers->HasKey(serverName, found)
_exeServers->Insert(serverName.Get(), static_cast<IExeServerRegistration*>(server), &replaced)
_exeServers->Lookup(serverName, &registration)
_HamQueryRunningApplications
_implementedCategories->GetView(&implementedCategoriesView)
_implementedCategories->Insert(Wrappers::HStringReference(categoryKey).Get(), categoryPropValue.Get(), &replacedIgnored)
_initterm
_initterm_e
_inProcessActivatableClasses->First(&iterator)
_inProcessActivatableClasses->HasKey(activatableClassId, found)
_inProcessActivatableClasses->Lookup(activatableClassId, &registration)
_interfaceRegistrations->First(&iterator)
_interfaces->Insert(interfaceId, spRegistration.Get(), &replaced)
_L$4H
_local_unwind
_miscStatusAspects->GetView(&miscStatusAspectsView)
_miscStatusAspects->HasKey(aspect, &alreadyHasKey)
_miscStatusAspects->Insert(aspect, miscStatusPropValue.Get(), &replacedIgnored)
_miscStatusAspects->Lookup(aspect, &existingMiscStatusPropValue)
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o___stdio_common_vsnprintf_s
_o___stdio_common_vsnwprintf_s
_o___stdio_common_vsprintf
_o___stdio_common_vsprintf_s
_o___stdio_common_vswprintf
_o___stdio_common_vswscanf
_o__callnewh
_o__cexit
_o__configure_narrow_argv
_o__crt_atexit
_o__errno
_o__execute_onexit_table
_o__get_errno
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__register_onexit_function
_o__seh_filter_dll
_o__set_errno
_o__stricmp
_o__ui64tow_s
_o__ultow_s
_o__wcsicmp
_o__wcslwr
_o__wcsnicmp
_o__wcstoui64
_o__wtoi
_o_abort
_o_calloc
_o_ceilf
_o_free
_o_iswspace
_o_malloc
_o_qsort
_o_strncpy_s
_o_strtol
_o_terminate
_o_wcscpy_s
_o_wcsncat_s
_o_wcsncpy_s
_o_wcstok_s
_o_wcstoul
_outOfProcessActivatableClasses->First(&iterator)
_outOfProcessActivatableClasses->HasKey(activatableClassId, found)
_outOfProcessActivatableClasses->Insert(acid.Get(), static_cast<IExeServerActivatableClassRegistration*>(activatableClass), &replaced)
_outOfProcessActivatableClasses->Lookup(activatableClassId, &registration)
_pastTheEnd
_progIds->Insert(progId, spRegistration.Get(), &replaced)
_properties.ActivatableClasses.InitializeFromStringArray(classNamesIterable.Get())
_properties.EnableOleDefaultHandler.Present
_properties.EnableVirtualizationForInprocHandler.Present
_properties.EnableVirtualizationForInprocServer.Present
_properties.ImplementedCategories.MapView.CopyTo(IID_PPV_ARGS(&implementedCategoriesIterable))
_properties.InprocHandlerHasMachineScope.Present
_properties.InprocServerHasMachineScope.Present
_properties.InsertableObject.Present
_properties.IsSystemInprocServerDll.Present
_properties.MiscStatusAspects.MapView.CopyTo( IID_PPV_ARGS(&miscStatusAspectsIterable))
_properties.OutofprocClassHasMachineScope.Present
_properties.UseUniversalMarshaler.Present
_properties.Verbs.MapView.CopyTo(IID_PPV_ARGS(&verbsIterable))
_propertyValueFactory->CreateString(miscStatus, &miscStatusPropValue)
_propertyValueFactory->CreateString(value, &propValue)
_propertyValueFactory->CreateString(verb, &verbPropValue)
_propertyValueFactory->CreateUInt32(0, &categoryPropValue)
_propertyValueFactory->CreateUInt32(value, &propValue)
_proxyStubRegistrations->First(&iterator)
_proxyStubs->Insert(proxyStubClassId, spRegistration.Get(), &replaced)
_server.CopyTo(server)
_serverCount > 0
_servers->Insert(serverId, serverRegistration.Get(), &replaced)
_spAttributesCollisionMap->HasKey(keyName, &fHasKey)
_spAttributesCollisionMap->Insert(keyName, keyName, &fReplaced)
_spAttributesCollisionMap->Remove(keyName)
_spAttributesMap->GetView(_properties.CustomProperties.MapView.ReleaseAndGetAddressOf())
_spAttributesMap->GetView(spAttributesMapView.GetAddressOf())
_spPropertyValueFactory->CreateString(value, &spPropertyValue)
_spPropertyValueFactory->CreateUInt32(value, &spPropertyValue)
_treatAsClasses->Insert(classId, spRegistration.Get(), &replaced)
_typeLibs->Insert(typeLibKey.Get(), spRegistration.Get(), &replaced)
_verbs->GetView(&verbsView)
_verbs->HasKey(verbId, &alreadyHasKey)
_verbs->Insert(verbId, verbPropValue.Get(), &replacedIgnored)
_verbs->Lookup(verbId, &existingVerbPropValue)
` AUAVAWH
` UAUAVH
` UAVAWH
`)}gD 
`.rdata
`A^_^[]
`A^_^][
`A^A]_^]
`A^A]A\_^[]
`A_A\_^]
`A_A^_^[
`A_A^_^]
`A_A^A\^]
`A_A^A\_]
`A_A^A\_^[]
`A_A^A]_^[]
`A_A^A]A\_^]
`ls->\?
`mre=%
{ ATAUAWH
{ ATAVAWH
{ AVH
{.>@&
{'>0.
{0001376b-930d-50cd-2b29-491ca938cd54}
{00020424-0000-0000-C000-000000000046}
{072665fb-8953-5a85-931d-d06aeab3d109}
{19c13211-dec8-42d5-885a-c4cfa82ea1ed}
{3C42000F-CC27-48C3-A005-48F6E38B131F}
{3F471139-ACB7-4A01-B7A7-FF5DA4BA2D43}
{5526aed1-f6e5-5896-cbf0-27d9f59b6be7}
{A89ECE52-7E8E-444F-BBD0-C68B76C2ECA4}#
{aa1b41d3-d193-4660-9b47-dd701ba55841}
{ba44067a-3c4b-459c-a8f6-18f0d3cf0870}
{BFF15E13-81BF-45EE-8B16-7CFEAD00DA86}
{cf7f94b3-08dc-5257-422f-497d7dc86ab3}
{D49918CF-9489-4BF1-9D7B-014D864CF71F}
{EB65A492-86C0-406A-BACE-9912D595BD69}
{F1EF270A-0D32-4352-BA52-DBAB41E1D859}
{fe0ab4b4-19b6-485b-89bb-60fd931fdd56}
{fe762fb1-341a-4dd4-b399-be1868b3d918}
{NoActivityID}
{T t8
|$ 0t
|$ ATAVAWH
|$ AVH
|$ D8
|$ E3
|$ M;
|$ UATAUAVAWH
|$ UATAVH
|$ UAUAVH
|$ UAUAWH
|$ UAVAWH
|$ UH
|$(A^
|$(E3
|$@A_A^A]A\
|$@E3
|$@H!D$(H
|$@H9
|$`@8
|$`E3
|$`I;w
|$0A_A^
|$0E3
|$8E3
|$h;U
|$hE3
|$HH+
|$lD;
|$PD8d$ 
|$pH;
|$PH9Y
|$Xf9t$`t
|$xL;
|$XL;(r
|$xL9
|$XL9|$PtXH
|>fa6
|16At
|D&BS3
|'D9~ w6H
|Iv96
}$ u@H
}_t H
}`D9y u6H
}`I9?
}+onecore\admin\appmodel\deploymentmanager\src\destagingstatehandler.cpp
}<.u!f
}0@8t$@
}H9Q8
}hD8q8u|H
}OO*qX,{
}p&H7
}PD8u
}Pt}H
}R Gj
}Xt-I
~  u@H
~@H9FXu
~\IcR(A
~]IcQ(A
~0H+~(H
~1LcA(H
'~9[p!b
~9|$0t
~f%8Ao_
~HD+x
~Hvgod{Y
~TIcQ(A
~VHcS(A
~wG5o
~WIcQ(A
~XIcQ(A
~ZIcQ(A
+ *Px
+D$8A;
+D$pA;
+D$PA;
+D$XA;
+D$XD
+dZrp>N
+h"a}I
+L$PA
+L$XA
+lhhS!
+T$XA
+zt\r
<!=2y|
<(SUa$aM(
<*| d
<?xml version="1.0" encoding="utf-8"?><xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://schemas.microsoft.com/appx/2013/appxprovisionpackage" xmlns="http://schemas.microsoft.com/appx/2013/appxprovisionpackage" xmlns:m="http://schemas.microsoft.com/appx/2013/appxprovisionpackage" xmlns:xs="http://www.w3.org/2001/XMLSchema"><xs:element name="AppxProvisionList">  <xs:complexType>    <xs:all>      <xs:element name="EndOfLife" type="CT_EndOfLife" minOccurs="0"/>      <xs:element name="Provisioned" type="CT_Provisioned" minOccurs="0"/>    </xs:all>  </xs:complexType>  <xs:unique name="Package_FamilyName">    <xs:selector xpath="m:EndOfLife/m:Package"/>    <xs:field xpath="@FamilyName"/>  </xs:unique>  <xs:unique name="Package_FullName">    <xs:selector xpath="m:Provisioned/m:Package"/>    <xs:field xpath="@FullName"/>  </xs:unique></xs:element><xs:complexType name="CT_EndOfLife">  <xs:sequence>    <xs:element name="Package" maxOccurs="unbounded">      <xs:complexType>        <xs:attribute name="FamilyName" type="ST_FamilyName" use="required"/>      </xs:complexType>    </xs:element>  </xs:sequence></xs:complexType><xs:complexType name="CT_Provisioned">  <xs:sequence>    <xs:element name="Package" maxOccurs="unbounded">      <xs:complexType>        <xs:attribute name="FullName" type="ST_FullName" use="required"/>        <xs:attribute name="PackageType" type="ST_PackageType"/>        <xs:attribute name="ProvisionSourceIsBundle" type="xs:boolean"/>        <xs:attribute name="IsLOBApp" type="xs:boolean"/>      </xs:complexType>    </xs:element>  </xs:sequence></xs:complexType><xs:simpleType name="ST_FamilyName">  <xs:restriction base="xs:string">    <xs:minLength value="17"/>    <xs:maxLength value="64"/>  </xs:restriction></xs:simpleType><xs:simpleType name="ST_FullName">  <xs:restriction base="xs:string">    <xs:minLength value="30"/>    <xs:maxLength value="127"/>  </xs:restriction></xs:simpleType><xs:simpleType name="ST_PackageType">  <xs:restriction base="xs:string">    <xs:enumeration value="resource"/>    <xs:enumeration value="framework"/>    <xs:enumeration value="bundle"/>  </xs:restriction></xs:simpleType></xs:schema>
<@\t/
<<<ngif
<0>@<1
<ah'n
<B\uZH
<Error 0x%X converting the user's SID to a string>
<Error 0x%X getting the user's SID from the process' token>
<Error 0x%X in GetApplicationUserModelIdFromToken>
<Error 0x%X in GetPackageFullName>
<Error 0x%X in NtQueryInformationProcess>
<Error 0x%X in OpenProcessToken>
<Error 0x%X in QueryFullProcessImageNameW>
<Error 0x%X moving command line>
<Error allocating memory>
<Error message string not found>
<error>
<J>b@NBLD0F
<K;/M
<M#Z>C~
<No commandline present>
<no-error-message>
<None>
<null>
<p]xK
<String too big>
<Task xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">            <RegistrationInfo>                <SecurityDescriptor>D:(A;;GA;;;SY)(A;;FRFX;;;LS)(A;;FA;;;BA)</SecurityDescriptor>            </RegistrationInfo>            <Principals>                <Principal id="LocalSystem">                    <UserId>S-1-5-18</UserId>                </Principal>            </Principals>            <Triggers>                <TimeTrigger>                    <Repetition>                        <Interval>PT8H</Interval>                        <StopAtDurationEnd>false</StopAtDurationEnd>                    </Repetition>                    <StartBoundary>2017-01-01T00:00:00Z</StartBoundary>                    <Enabled>true</Enabled>                    <RandomDelay>PT8H</RandomDelay>                </TimeTrigger>            </Triggers>            <Settings>                <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>                <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>                <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>                <AllowHardTerminate>false</AllowHardTerminate>                <StartWhenAvailable>true</StartWhenAvailable>                <RunOnlyIfNetworkAvailable>true</RunOnlyIfNetworkAvailable>                <AllowStartOnDemand>true</AllowStartOnDemand>                <Enabled>true</Enabled>                <Hidden>false</Hidden>                <RunOnlyIfIdle>true</RunOnlyIfIdle>                <WakeToRun>false</WakeToRun>                <Priority>8</Priority>                <UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine>            </Settings>            <Actions Context="LocalSystem">                <Exec>                    <Command>%windir%\system32\rundll32.exe</Command>                    <Arguments>%windir%\system32\AppxDeploymentClient.dll,ScheduleAppInstallerBackgroundUpdate</Arguments>                </Exec>            </Actions>        </Task>
<tock
<Unknown>
=;\$8t5
=2e/~
=D8mhu7D
>[nz8
>`onecore\admin\appmodel\common\packagestatus.cpp
>`PublisherCacheFolder
>0z65
>51"4pX
>vxRJ
0'0#b
00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899
0123456789abcdefghjkmnpqrstvwxyz
0123456789abcdefonecore\base\appmodel\common\bytebuffer.cpp
0123456789ABCDEFonecore\base\appmodel\common\sidhelper.cpp
040904B0
08@HP&
08@HPX
08@HPX`h
08@HPX`hpx
08286
'09_-+
0A^_]
0A^_^
0A^_^[]
0A^_^][
0A^A\_
0A__^
0A__^[]
0A_A]A\
0A_A^]
0A_A^_
0A_A^_^]
0A_A^A\
0A_A^A\_]
0A_A^A\_^
0A_A^A\_^[]
0A_A^A]_]
0A_A^A]_^
0A_A^A]_^[]
0A_A^A]A\]
0A_A^A]A\_
0A_A^A]A\_^[
0A_A^A]A\_^]
0D8t$Iu1H
0Ic@ I
0RP\M
0x%08lx
0xFFFFFFFFFFFF
1.3.6.1.4.1.311.10.3.21
1.3.6.1.4.1.311.10.3.6
1.3.6.1.4.1.311.76.3.1
10.0.25197.1000
10.0.25197.1000 (WinBuild.160101.0800)
1234567890abcdefghjkmnpqrstvwxyzABCDEFGHJKMNPQRSTVWXYZ
1NQ4wN{
1onecore\admin\appmodel\datasource\filedatasource\src\fileappxstreamingdatasource.cpp
1onecore\admin\appmodel\stagingmanager\src\faultinjection.cpp
1s"2aX
2<D!w
2Axi^
2h:\86:V8
2SXAY
2v7vvZ
3#-s'
3*qB:Q
3;\$8t+
3D$8%
3D$8%x
3kDPw
3m%e1`k
3-utD>
3'X>onecore\internal\sdk\inc\wil\opensource/wil/token_helpers.h
4$L9w@t5M
40$Y 
4D8}gt
4H6H4b2m
5!9>a
5$="/
5_onecore\admin\appmodel\osim\src\winrt\lib\dehpackage.cpp
5D8l$0
6`qEn5
6|2(H
66666
6c"A+7
6vIat
7@8uou
7+WBuN}aiiU(c
7B21B8BB-EE70-40DC-836C-687B6A30B642
7n\0d
8/t%H
8;'{`n4
8@8t$1
8\$@t
8\$@t$
8\$@u
8\$@uJI
8\$`t
8\$`uI
8\$<u
8\$0t
8\$0t/H
8\$8tjL
8\$Qu
8\$xu
8]gt%
8]Ht[I
8_^][
8~u f9p
84M1o
8A^_^[
8A_A^_^[]
8A_A^A]A\_^[]
8APPXu
8D$!u"H
8D$@t
8D$`uvH
8E@t|H
8E0t,H!E@H
8EAPX
8Eguh
8h2jZ0
8H9{Ht&H
8m%C1
8M~p%
8M9h(w
8NX\wL
8SRD1t
8T$`t(I
8wekyb3d8bbwe
8Y8ul
9\$@L
9\$@u
9\$Ht
9\$Pt/9\$ v)3
9\$Pt'9\$ v!H
9\$Pto
9\$Xv
9]0u0H
9]gt0v
9|$0t;
9|$Dt%
9|$ht
9|$Xt3
9=`QH
90t D
9104db00-b51f-4774-a4bb-f3f68c556cb6
92F^mO
9ARI8u
9D$ t
9D$@u
9D$Ht
9D$Pt
9D$Pt8H
9D$PtCH
9D$Xt
9D$xt.
9e}IG
9E0uIH
9G0u]D
9L$|t!
9L$Dt
9RSLC
9RSSTuFD
9s@|+3
9t$@t
9t$8t
9t$Tt
9t$xt
9TOC8uK9Q
9uotRH
9voM(~}4
9y<tjH
A framework cannot be both matching architecture and cross architecture at the same time.  Framework package architecture is %x, dependent package architecture is %x
A framework must be either matching architecture or cross architecture, it cannot be neither.  Framework package architecture is %x, dependent package architecture is %x
A H9G |
A I;A
A restored deployment request was encountered that needs rollback. Cancelling deployment request.
A resumable restored deployment request was encountered. Moving forward with operation.
A"@lfP
A%n^/
A(A;@
A;F(r
A;F@uWD
A^_^[
A^_^[]
A^_^][
A^A\]
A^A\_
A^A\_^]
A^A]]
A^A]A\_]
A^A]A\_^[]
A__^[]
A_A\]
A_A]]
A_A]A\
A_A]A\_]
A_A]A\_^[]
A_A^]
A_A^_
A_A^_^[
A_A^_^[]
A_A^_^]
A_A^_^][
A_A^A\
A_A^A\_[]
A_A^A\_]
A_A^A\_^
A_A^A\_^[]
A_A^A\_^]
A_A^A]
A_A^A]^]
A_A^A]_]
A_A^A]_^
A_A^A]_^[]
A_A^A]A\]
A_A^A]A\^[]
A_A^A]A\_
A_A^A]A\_[]
A_A^A]A\_^[
A_A^A]A\_^[]
A_A^A]A\_^]
A_A^A]A\_^][
A0H9A8u
A0L9<
A0N94
a1eRe
a7l6y+
A8|$)t$H
A89B8
A8H+A0H
A8H9C8
A8I9G
A8v)t H
A8v<t
A9<$sEA
A9<$t
A91v0
A96uyH
A99v0
A9v@vaH
aB#$3
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/%u!
Absolute Uri
access
Access: %u mask 0x%0x
AccessCheck
AccessControlFlags
AccTreeResetNamedSecurityInfo
ACFolder
AcgApi
acid.Initialize(activatableClass->get_ActivatableClassId())
AclExternalLocation
ACLKeyPath
ACLs repaired successfully for %s. Register next time should succeed.
ACLs repaired successfully for junction %s.
AcquireSRWLockExclusive
AcquireSRWLockShared
AcquireStateLock
AcquisitionCost
AcquisitionInfo
Action
action
Action
ActionDisplayName
activatableClass
activatableClass->PendingWriteToStore(packageMoniker, registrationStoreContext)
ActivatableClassIdentifier
ActivateInstance %ws
Activation::Exists
Activation::ExistsByActivationKey
Activation::Find
Activation::Get
Activation::GetByActivationKey
ActivityError
ActivityFailure
ActivityIntermediateStop
ActivityStoppedAutomatically
actualLength
Add %ws operation %u
AddAccessAllowedAce
AddAccessAllowedAceEx
AddAccessAllowedAceEx %ls %u %p
AddDeprovisionedPackageMarking
AddDirectXFeatureLevelToContext
Added module
addend
AddEndOfLifePackageMarking
AddExtensionProgId
AddImplementedCategory(CATID_Insertable)
Adding optional package to the deployment request
Adding package to the deployment request
AddingAUMIDToRelaunchList
AddingCoServicedPackageToDeploymentRequest
AddingPackageDependency
AddListAppPackage
AddListBundlePackage
AddListPackageIsUsedResult
AddOrUpdatePrimaryTileForUserAndApplication
AddOrUpdatePrimaryTilesForUserAndPackage
AddPackageList
AddPackageToPreinstalledAppsVolume
AddPackageToRegistryStore
AddPrimaryTilesForPackage
AddPrimaryTileUserRecord
AddRestrictedAppContainerPathIfNeccessary
AddSearchStringToPath
AddStagingUriAndEstimateFootprintSize() should only be called once per URI
AddStringCustomAttribute(assemblyAttributeName.Get(), assembly)
AddStringCustomAttribute(implementationClassAttributeName.Get(), implementationClass)
AddStringCustomAttribute(runtimeVersionAttributeName.Get(), runtimeVersion)
AddToPurgeList
AddUpgradePackageToPreinstalledVolume
AddUpgradePackageToRegistryStore
AddVisibilityInfoAlreadyExists
AdjustTokenPrivileges
Aeek{1
a-f7Od
afterFirstUnlock
AgeRating
ajxwn
AKw]I
ALARM_DEH_KEYWORD
Alias
aliceBlue
All applicable packages are installed for the user, so the bundle is Installed
All applicable packages are staged for the system, so the bundle is Installed
All incoming packages should be listed in the packages array.  The package %ws in updatePackageList is missing.
All incoming packages should be listed in the packages array. The package %ws in addPackageList is missing.
All Main Packages
All packages being added or updated should be listed in the packages array.  The package %ws is missing.
allLogos
Allocate
AllocateAndInitializeSid
AllowDeploymentInSpecialProfiles
AllowedProductId
AllowExecution
allowForWebOnly
AllowPreinstalledRemoval
AllPackages
AllUserPackageRemediation
AllUsers
Already encrypted %ws can't do DPL
AlreadyPendingUpdateRegistrationNotDeferred
always
Always
AlwaysUnsafe
Analyze
ANALYZE;
antiqueWhite
any publisher
aO?kg
Aonecore\admin\appmodel\packagemanager\server\deploymentoperationarguments.cpp
Apartment
api-ms-win-appmodel-identity-l1-2-0.dll
api-ms-win-appmodel-runtime-internal-l1-1-0.dll
api-ms-win-appmodel-runtime-internal-l1-1-1.dll
api-ms-win-appmodel-runtime-internal-l1-1-2.dll
api-ms-win-appmodel-runtime-internal-l1-1-3.dll
api-ms-win-appmodel-runtime-internal-l1-1-4.dll
api-ms-win-appmodel-runtime-internal-l1-1-7.dll
api-ms-win-appmodel-runtime-l1-1-0.dll
api-ms-win-appmodel-runtime-l1-1-1.dll
api-ms-win-appmodel-state-l1-2-0.dll
api-ms-win-appmodel-unlock-l1-1-0.dll
api-ms-win-containers-cmclient-l1-1-0.dll
api-ms-win-containers-cmclient-l1-2-0.dll
api-ms-win-containers-cmclient-l1-5-0.dll
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-bicltapi-l1-1-6.dll
api-ms-win-core-biplmapi-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-com-l1-1-1.dll
api-ms-win-core-com-private-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-2.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-file-l1-2-0.dll
api-ms-win-core-file-l1-2-2.dll
api-ms-win-core-file-l1-2-4.dll
api-ms-win-core-file-l2-1-0.dll
api-ms-win-core-file-l2-1-2.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-io-l1-1-0.dll
api-ms-win-core-io-l1-1-1.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
api-ms-win-core-kernel32-legacy-l1-1-1.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-libraryloader-l1-2-1.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-localregistry-l1-1-0.dll
api-ms-win-core-memory-l1-1-0.dll
api-ms-win-core-path-l1-1-0.dll
api-ms-win-core-processenvironment-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-processthreads-l1-1-3.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-psapi-l1-1-0.dll
api-ms-win-core-quirks-l1-1-0.dll
api-ms-win-core-realtime-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-registry-l1-1-1.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-shlwapi-legacy-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-string-l2-1-1.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-synch-l1-2-1.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-sysinfo-l1-2-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-url-l1-1-0.dll
api-ms-win-core-version-l1-1-0.dll
api-ms-win-core-windowserrorreporting-l1-1-1.dll
api-ms-win-core-winrt-error-l1-1-0.dll
api-ms-win-core-winrt-error-l1-1-1.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-core-wow64-l1-1-1.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
api-ms-win-eventing-controller-l1-1-0.dll
api-ms-win-eventing-legacy-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-eventing-tdh-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-security-capability-l1-1-0.dll
api-ms-win-security-lsalookup-l1-1-0.dll
api-ms-win-security-lsalookup-l2-1-0.dll
api-ms-win-security-provider-l1-1-0.dll
api-ms-win-security-sddl-l1-1-0.dll
api-ms-win-service-core-l1-1-0.dll
api-ms-win-service-core-l1-1-1.dll
api-ms-win-service-management-l1-1-0.dll
api-ms-win-service-management-l2-1-0.dll
api-ms-win-service-private-l1-1-0.dll
api-ms-win-service-winsvc-l1-1-0.dll
api-ms-win-shcore-stream-l1-1-0.dll
api-ms-win-shcore-taskpool-l1-1-0.dll
api-ms-win-shell-shellfolders-l1-1-0.dll
api-ms-win-stateseparation-helpers-l1-1-0.dll
ApiSetQueryApiSetPresence
ApN94
APN94
AppActivationManagerFailedToActivate
AppCategory
appContainer
AppContainerRegisterSid
AppData
AppDataErrorOperation
AppDataFolder
AppDataVolume
Append %ws
AppendString %ws
AppendString %ws %ws
AppendString1
AppendString1 %ws
AppendString2
AppendString2 %ws
AppExecutionAlias
AppExtension
AppExtensionHost
AppExtensionName
AppID
AppId
AppID
AppId
AppInstallerBackgroundUpdate
AppInstallerUpdater
AppInUseMovedToDeferredList
Applicability state is Installable because at least one user does not yet have the package installed
Applicability state is Installable because no users with installed packages were found, and the architecture check passed
Applicability state is Installed because some users were found, and every one of them has the package Installed
Applicability state is not installable because the current profile is special, but special deployments are disallowed by policy
Applicability state is NotInstallable
Applicability state is NotInstallable because the architecture is incompatible with the system
Applicability state is NotInstallable because the package is incompatible with the system by policy
Applicability state is RequiresReinstall because at least one user requires a reinstall
Applicability4 results
ApplicabilityBlob
applicabilityState
ApplicabilityState
applicabilityState
ApplicabilityStateEnumMap
Applicable Package is not yet indexed in package repository, so it is installable
Applicable resource package set is not a subset of Installed resource package set, so it is Installable because a package needs to be added.
Applicable resource package set is not a subset of Staged resource package set, so it is Installable because a package needs to be added.
Application
application
application/octet-stream
application/vnd.ms-appx.blockmap+xml
application/vnd.ms-appx.bundlemanifest+xml
application/vnd.ms-appx.manifest+xml
application/vnd.ms-appx.signature
application/vnd.ms-appx.streammap+xml
application/vnd.ms-pkiseccat
Application::Exists
Application::ExistsByApplicationUserModelId
Application::ExistsByEditionId
Application::ExistsByPackage
Application::ExistsByPackageAndPackageRelativeApplicationId
Application::ExistsByPackageFamilyName
Application::ExistsByPackageFullName
Application::ExistsByUserAndApplicationUserModelId
Application::ExistsByUserAndPackage
Application::ExistsByUserAndPackageFamily
Application::ExistsByUserAndPackageFamilyAndPackageType
Application::ExistsByUserAndPackageFamilyName
Application::ExistsByUserAndPackageFamilyNameAndPackageType
Application::ExistsByUserAndPackageFullName
Application::ExistsByUserOrDefaultAccountAndApplicationUserModelId
Application::ExistsByUserOrDefaultAccountAndPackageFamilyNameAndPackageType
Application::ExistsByUserOrDefaultAccountAndPackageFullName
Application::Find
Application::FindByApplicationUserModelId
Application::FindByEditionId
Application::FindByPackage
Application::FindByPackageFamilyName
Application::FindByPackageFullName
Application::FindByUser
Application::FindByUserAndAnyAppExecutionAlias
Application::FindByUserAndAppListEntry
Application::FindByUserAndPackage
Application::FindByUserAndPackageFamily
Application::FindByUserAndPackageFamilyAndPackageType
Application::FindByUserAndPackageFamilyName
Application::FindByUserAndPackageFamilyNameAndAppListEntry
Application::FindByUserAndPackageFamilyNameAndPackageType
Application::FindByUserAndPackageFullName
Application::FindByUserOrDefaultAccount
Application::FindByUserOrDefaultAccountAndApplicationID
Application::FindByUserOrDefaultAccountAndApplicationUserModelId
Application::FindByUserOrDefaultAccountAndAppListEntry
Application::FindByUserOrDefaultAccountAndHostId
Application::FindByUserOrDefaultAccountAndPackageFamilyNameAndPackageType
Application::FindByUserOrDefaultAccountAndPackageFullName
Application::Get
Application::GetApplicationTypeByUserAndApplicationUserModelId
Application::GetByPackageAndPackageRelativeApplicationId
Application::GetByUserAndApplicationId
Application::GetByUserAndApplicationUserModelId
ApplicationBackgroundTask
ApplicationContentUriRule
ApplicationContentUris
applicationCount
ApplicationCount
ApplicationExtension
ApplicationExtension::Exists
ApplicationExtension::ExistsByApplication
ApplicationExtension::ExistsByApplicationAndCategory
ApplicationExtension::ExistsByApplicationAndIndex
ApplicationExtension::ExistsByCategory
ApplicationExtension::ExistsByUserAndCategory
ApplicationExtension::Find
ApplicationExtension::FindByApplication
ApplicationExtension::FindByApplicationAndCategory
ApplicationExtension::FindByCategory
ApplicationExtension::FindByUserAndCategory
ApplicationExtension::FindByUserAndCategoryAndApplicationUserModelId
ApplicationExtension::FindByUserAndCategoryAndPackageFullName
ApplicationExtension::FindByUserOrDefaultAccountAndCategory
ApplicationExtension::FindByUserOrDefaultAccountAndPackageFullNameAndFileType
ApplicationExtension::FindByUserOrDefaultAccountAndPackageFullNameAndProtocolName
ApplicationExtension::Get
ApplicationExtension::GetByApplicationAndIndex
ApplicationExtension::GetByUserAndApplicationUserModelIdAndFileType
ApplicationExtension::GetByUserAndApplicationUserModelIdAndProtocolName
ApplicationId
ApplicationIdentity
applicationIdentity
ApplicationIdentity
ApplicationIdentityId
applicationIdentityId
ApplicationIdentityId
applicationIdentityId
ApplicationIndex
ApplicationLogo
applicationManaged
ApplicationManagement
ApplicationProperty
ApplicationProperty::Exists
ApplicationProperty::ExistsByApplication
ApplicationProperty::ExistsByApplicationAndIndex
ApplicationProperty::ExistsByApplicationAndName
ApplicationProperty::ExistsByName
ApplicationProperty::ExistsByUserAndName
ApplicationProperty::Find
ApplicationProperty::FindByApplication
ApplicationProperty::FindByApplicationAndName
ApplicationProperty::FindByName
ApplicationProperty::FindByUserAndName
ApplicationProperty::Get
ApplicationProperty::GetByApplicationAndIndex
Applications
ApplicationUser
ApplicationUserModelId
applicationUserModelId
ApplicationUserModelId
applicationUserModelId
ApplicationUserModelId
applicationUserModelId
ApplicationUserModelId
applicationUserModelId
AppliedACLs
AppListEntry
ApplyBlockCache
APPLYDATA_DEH_KEYWORD
ApplyDeltaW
ApplyExceptions %u
ApplyInPlace
ApplyInplaceUpdate
ApplyPackageDataAccessACLs %ls %ls %ls %d %d
ApplyRegistryACLs %u
ApplyRegistrySubKeyACLs
ApplyStrongProtection
ApplySystemAppDataBaseKeyACLs
ApplyUpdatePayloadFiles
appManagementSystem
APPMODEL_RUNTIME_DMR_KEYWORD
AppModelDeploymentNotifications
AppModelPackageRepository
AppModelRoot
appName
AppObject.Aliased
AppObject.EntryPoint
AppObject.RuntimeType
appOSVersion
AppPackage
AppPackagesInSameFamilyCannotBeInstalledConcurrently
AppReadiness
AppReadinessDirectory
ApprovePackage
AppService
APPSERVICE_DEH_KEYWORD
appSilo
AppsInUse
AppStateSubFolder
APPSYNC_DEH_KEYWORD
AppUriHandler
AppUriHandlerGroup
AppX Deployment Server DLL
APPX_BASE_DEH_KEYWORD
APPX_E_INVALID_MANIFEST
AppxAllUserStore
AppXAllUserStore.dll
appxapplicabilityblob.dll
AppxApplicabilityEngine.dll
AppXApplyTrustLabelToFolder
AppxBlockMap.xml
appxblockmap.xml
AppxByteCodeQueue
AppxContentGroupMap.xml
AppXdbszz9cysstkgdz6xk17sywkqb7gjj0v
AppXDeleteFile
AppXDelta
AppXDeployment.Perftrack.Task.Uninstall
AppXDeployment.Task.Server.AppxAllUserStore
AppXDeployment.Task.Server.Dependency
AppXDeployment.Task.Server.Deployment
AppXDeployment.Task.Server.Deployment.AllowReset
AppXDeployment.Task.Server.Deployment.AllowService
AppXDeployment.Task.Server.Deployment.AllowService2
AppXDeployment.Task.Server.Deployment.AllowUninstall
AppXDeployment.Task.Server.Deployment.BeginJETSession
AppXDeployment.Task.Server.Deployment.BundleProcessor
AppXDeployment.Task.Server.Deployment.CancelRequest
AppXDeployment.Task.Server.Deployment.CleanupManagerPostDeployment
AppXDeployment.Task.Server.Deployment.CleanupManagerPreDeployment
AppXDeployment.Task.Server.Deployment.ClearPackageStatus
AppXDeployment.Task.Server.Deployment.ContainerDeploymentStateHandler
AppXDeployment.Task.Server.Deployment.CreateDatabase
AppXDeployment.Task.Server.Deployment.DataFlushStateHandler
AppXDeployment.Task.Server.Deployment.DeletePackageFiles
AppXDeployment.Task.Server.Deployment.DeStagePackage
AppXDeployment.Task.Server.Deployment.DisablePackage
AppXDeployment.Task.Server.Deployment.EndJETSession
AppXDeployment.Task.Server.Deployment.EvaluateStateHandler
AppXDeployment.Task.Server.Deployment.FileCompressionStat
AppXDeployment.Task.Server.Deployment.FileStat
AppXDeployment.Task.Server.Deployment.FlushMachineRegistration
AppXDeployment.Task.Server.Deployment.FlushUserRegistration
AppXDeployment.Task.Server.Deployment.GetRequestForWNFName
AppXDeployment.Task.Server.Deployment.MRTDataStateHandler
AppXDeployment.Task.Server.Deployment.MutablePackageDirectoryStateHandler
AppXDeployment.Task.Server.Deployment.OptionalDependencyHandler
AppXDeployment.Task.Server.Deployment.OSIMActivate
AppXDeployment.Task.Server.Deployment.OSIMDeactivate
AppXDeployment.Task.Server.Deployment.PackageManagerGetPackageReader
AppXDeployment.Task.Server.Deployment.PackagesInUse
AppXDeployment.Task.Server.Deployment.PackageStateHandler
AppXDeployment.Task.Server.Deployment.PrerequisiteStateHandler
AppXDeployment.Task.Server.Deployment.QueueManagerDequeue
AppXDeployment.Task.Server.Deployment.QueueManagerEnqueue
AppXDeployment.Task.Server.Deployment.QueueManagerGetNext
AppXDeployment.Task.Server.Deployment.ReleaseJETResources
AppXDeployment.Task.Server.Deployment.RepositoryBeginTransaction
AppXDeployment.Task.Server.Deployment.RepositoryCommitTransaction
AppXDeployment.Task.Server.Deployment.RepositoryRollbackTransaction
AppXDeployment.Task.Server.Deployment.RepositoryTerminateSession
AppXDeployment.Task.Server.Deployment.Runtime
AppXDeployment.Task.Server.Deployment.SetPackageState
AppXDeployment.Task.Server.Deployment.SetPackageStatus
AppXDeployment.Task.Server.Deployment.SharedAppsRedirectHandler
AppXDeployment.Task.Server.Deployment.SharedAppsSyncHandler
AppXDeployment.Task.Server.Deployment.SISOptimization
AppXDeployment.Task.Server.Deployment.StagePackage
AppXDeployment.Task.Server.Deployment.StageUserData
AppXDeployment.Task.Server.Deployment.StateRepositoryDownlevel
AppXDeployment.Task.Server.Deployment.StateRepositoryFixIntegrity
AppXDeployment.Task.Server.Deployment.TilesStateHandler
AppXDeployment.Task.Server.Deployment.Trust
AppXDeployment.Task.Server.Deployment.UpdatePackage
AppXDeployment.Task.Server.Deployment.UpdatePackageStatus
AppXDeployment.Task.Server.Deployment.VersionSupercedenceHandler
AppXDeployment.Task.Server.Extensions
AppXDeployment.Task.Server.OSIM
AppXDeployment.Task.Server.Service
AppXDeployment.Task.Server.StagingManager
AppXDeployment.Task.Server.VolumeManager
AppXDeployment.Task.Server.VolumeRequestManager
AppXDeploymentClient.dll
AppxDeploymentFailureBlue
AppXDeploymentServer
AppXDeploymentServer version = 
AppXDeploymentServer.dll
AppxDeploymentServer.dll
AppxDeploymentServer.pdb
APPXDEPLOYMENTSERVER_KEYWORD
APPXDEPLOYMENTSERVER_PERF_KEYWORD
AppXDeploymentServer-License-MaxSideloadedPackagesCount
AppxErrorReport
AppxExtension
AppxFileRangesInventoryPopulated
AppXGetOSMaxVersionTested
AppXGetOSMaxVersionTested %ls
AppxInvestigationFile
AppxManifest
AppxManifest.xml
AppxMetadata\AppxBundleManifest.xml
AppxMetadata\CodeIntegrity.cat
appxmetadata\codeintegrity.cat
AppXMetadata\CodeIntegrity.Cat
AppxMetadata\PublisherBridging
AppxMetadata\PublisherBridging\
AppxMiniRepository
AppxMiniRepositoryAfterAclRepair
AppxMiniRepositoryBeforeAclRepair
AppxNewDeploymentOperation
AppxOSIMExtensionDLLs::Cleanup
AppxPackageOriginEnumMap
AppxPackageSidRef
AppxPackageStubStateChanged
AppxPackageVolumes
AppxPolicies
AppxProvisioning.xml
AppxProvisionList
AppxPurgeList
AppXqj98qxeaynz6dv4459ayz6bnqxbyaqcs
AppxRoot
AppXSetTrustLabelOnPackage
appxsignature.p7x
AppxSignature.p7x
AppxSignatureOriginEnumMap
AppxStagingInfo
AppxStateChange
appxsvc
aquamarine
Architecture
ArchitectureEnumMap
ArchitectureNotCompatible
Argument
ARI8A
arm64
ArrayAddString %ls
ART:OnDemandSyncGroup
Assembly
Assigned not validated origin to unsigned package
Assigned unknown origin to package with untrusted signature because device is dev unlocked
AsynchronousInterface
At beginning of OptionalDependencyHandler packages
At end of OptionalDependencyHandler packages
ATAVAWH
aTonecore\admin\appmodel\packagemanager\server\iasyncrequest.cpp
aTt#H
ATTACH DATABASE '%s' AS '%s';
Attaching data file to WER report (to be deleted after submission)
Attaching file to WER report
Attaching log file to WER report (to be deleted after submission)
Attempt to Disable AppContainer RPC interface - RpcEpUnregister returned error
Attempt to Disable AppContainer RPC interface - RpcServerUnregisterIf returned error
Attempt to Disable RPC interface - RpcEpUnregister returned error
Attempt to Disable RPC interface - RpcServerUnregisterIf returned error
Attempt to Enable AppContainer RPC interface - RpcEpRegister returned error
Attempt to Enable AppContainer RPC interface - RpcServerUnregisterIf returned error
Attempt to Enable RPC interface - calls out of sequence
Attempt to Enable RPC interface - RpcEpRegister returned error
Attempt to Enable RPC interface - RpcEpUnregister returned error
Attempt to Enable RPC interface - RpcServerInqBindings returned error
Attempt to Enable RPC interface - RpcServerRegisterIf3 returned error
Attempt to Enable RPC interface - RpcServerRegisterIfEx returned error
Attempt to Enable RPC interface - RpcServerUnregisterIf returned error
Attempt to Enable RPC interface - RpcServerUseProtseq ncacn_hvsocket returned error
Attempt to Enable RPC interface - RpcServerUseProtseq returned error
Attempt to Free Binding Vector - RpcBindingVectorFree returned error
Attempt to remove end of life package without a local manifest, but we found a related package manifest to remove instead
Attempting to add an optional package for a main package that's staged from an unsupported scheme %d.
Attempting to add an optional package for a main package that's staged from an unsupported scheme %S
Attribute
AttributeName
attributes->Insert(keyName.Get(), propValue.Get(), &replaced)
AttributesMap::Make(&_attributes)
AttributesMap::Make(&registration->_attributes)
AttributeValue
atU8P,K
AuditBoot
aumid
AUMID
aumid
AutoConvertTo
automatic index on PackageIdByAll(_PackageID)
AutomaticBackgroundTask
AutomaticDynamicFileRanges must be populated before calling PrioritizeContentGroups.
AUTOPLAY_DEH_KEYWORD
AutoRepair
AutoUpdateSettings
AuxUserType
awdK}
AXEHAXEFAXEBAXPCAXBMAXCI
AXPCAXCDAXCTAXBMAXCI
'AY>k
azure
B(D8|$1t
b-;"g
b>5F{
B09A8u
B8H;B@t
B8H9A8
b-9"=O
BACKGROUND_TASKS_DEH_KEYWORD
BackgroundColor
BackupRestoreOptOut
bad allocation
bad array new length
Bad optional access
Badge
BadgeAndTileText
BadgeLogo
BApplyUpdatePayloadFiles
baseline
baselinePackage
Battery
Battery low or critical and not charging
Bcrypt.dll
bcrypt.dll
BCryptCloseAlgorithmProvider
BCryptCreateHash
BCryptDestroyHash
BCryptFinishHash
BCryptGetProperty
BCryptHashData
BCryptOpenAlgorithmProvider
BDC_ApplyInfo
BEGIN -> COMMIT;
BEGIN -> ROLLBACK;
BEGIN EXCLUSIVE /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
beige
BfRemoveMappingEx
BfSetupFilterEx
Bh(jt
BI|Spx
BiApplicationStateTransition
BiChangeApplicationStateForPackageName
BinaryCount
BinaryDeltaCompression
BINDFLTAPI.dll
BindToObject %ul %ls
BiPackageChangeState
bisque
black
blanchedAlmond
blockCacheFileComplete
BlockcacheFileDisappeared
BlockCacheFileIsNotComplete
BlockDeploymentIfNeeded
BlockMap Validation Failed for FilePath: %ws IsEncrypted: %d EABIT: %d UncompressedSize: %I64u
BlockNonAdminUserInstall
blueViolet
BMAP<
Bool1
Bool2
brown
BrowserChoice_cw5n1h2txyewy
buffer error
BuildFilename
BuildFilename returned empty lock file path
BuildId
buildVersion
BuildVersion
Bundle
bundle
Bundle
Bundle is Installable - bundle is not installed but is most recently staged
Bundle is Installable - Main package is a re-install, but bundle wasn't installed
Bundle is not installed for the user, so it is installable
Bundle is NotInstallable - no Installable main packages.
Bundle is NotInstallable - no stub available when stub is preferred.
Bundle processing cost: %I64u ms
Bundle re-install
BundleFullName
bundleFullName
BundleInstalledPackage
BundlePackage
BundlePackageFullName
BundlePackageInstallStateMismatch
BundleResource
BundlesInSameFamilyCannotBeInstalledConcurrently
burlyWood
BusyCount
BusyDelayBetweenRetries
BusyMaxTimeout
BusyTimeout
bw4,,_E
ByteCodeGeneration
ByteCodeGeneratorDesktop
ByteCodeGeneratorWinStation
ByteCodeGeneratorWinStation\ByteCodeGeneratorDesktop
Bz)H<
C !C0
C !C0H
C H!C(H
C L9@
c UAUAVH
c&UDoN
C(H;C0u"
C(H9G(u
C:\data\SystemData\ETW
C:\Program Files\WindowsApps
C`#St
C`fD9<Ht(H
C++/WinRT version:2.0.220418.1
C09G0t
C8!CHH
CA96u
Cache.Count
Cache.Hits
Cache.Misses
cache_size
CachedEffectivePackageStatus
CacheHit
CacheMiss
CacheSpill
CacheUsed
CacheWrite
cadetBlue
CalculateBinaryCompatibilityPropertiesIfNecessary(incomingPackage)
CalculateServerPermissions(strPackageSid)
CalculateSurrogateDllPath(incomingPackage)
callContext
CallContext:[%hs] 
Caller needs to have ensured the target path begins with correct prefix
callerModule
CallerPackageFullName
callerReturnAddressOffset
Calling CleanupManager PostDeployment
Calling CleanupManager PreDeployment
Calling DataFlushingStateHandler
Calling DeploymentPipeline::StateMachine
Calling SharedPackageContainerStateMachine
Calling SpecificVolumeHelper: PrepareRemovePackagesIfNeeded
Calling SpecificVolumeHelper: PrepareSpecificVolumeForPackageFamilyIfNeeded
Calling StateHandler: BundleProcessing
Calling StateHandler: CleanAppxAllUserStore
Calling StateHandler: DependencyManager
Calling StateHandler: DeStageUserData
Calling StateHandler: DeStaging
Calling StateHandler: Evaluation
Calling StateHandler: Indexing
Calling StateHandler: MRTDataRemove
Calling StateHandler: MutablePackageDirectoryRemove
Calling StateHandler: OptionalDependencyHandler
Calling StateHandler: PostUpdateProcessing
Calling StateHandler: RestartPackagesInUse
Calling StateHandler: SharedAppsRedirect
Calling StateHandler: SharedAppsSync
Calling StateHandler: StageUserData (deferred)
CallingProcess
CallingProcessPackageFullName
callOrigin
CallOrigin
CancelDeploymentImplementation
CancelIoEx
Cancelling deployment request...
Cancelling request for package for shutdown
CancelSynchronousIo
CancelSynchronousIo failed for idle task
CancelWaitableTimer
cannot start a transaction within a transaction
CannotProvisionPackage
Capabilities
Capability
CapabilityCheck
CapabilityCount
CapabilitySids
CaptureErroPathInCallBack %ls 0x%0x
Category
CategoryName
CD$PE3
CD8}gusH
CdplGetFileProtectionLevel
CdplGetFileProtectionLevel %ws
CdplIsAppDataProtectionSupported
CdplIsAppDataProtectionSupported %ls %llu
CdplIsAppDataProtectionSupported %ws, maxVer %llu
CdplIsSupported
CdplIsSupported %ls
CdplProtectFileToLevelWithResult
CdplProtectFileToLevelWithResult %ls level %u protectResult %u %u
CdplProtectFileToLevelWithResult %ws %u
CdplProtectFileToLevelWithResult %ws %u %u
CertCloseStore
CertCreateCertificateChainEngine
CertFreeCertificateChain
CertFreeCertificateChainEngine
CertFreeCertificateContext
CertGetCertificateChain
CertGetEnhancedKeyUsage
CertGetEnhancedKeyUsage failed when sizing EKU buffer
CertGetSubjectCertificateFromStore
CERTIFICATES_DEH_KEYWORD
CertNameToStrW
CertOpenStore
CertVerifyCertificateChainPolicy
CertVerifyCertificateChainPolicy failed
cg1l/
changeid_next_value
changeid_next_value() failed
ChangeRegistration
ChangeServiceConfigW
chartreuse
Check approval cost: %I64u ms
CheckApproval
CheckDirectoryExistenceAndLogIfNeeded %ls
CheckDirectoryExistenceAndLogIfNeeded %ls %u
CheckDirectoryExistenceWithRepair %ls %u
CheckDirectoryExistenceWithRepair %ls %u %u
CheckDirectoryExistenceWithRepair %ls%u
CheckedPackageHasDependents
CheckEmbeddedAutoUpdates
CheckForFrameworkConflicts
CheckForUpdatesAndConflicts
CheckIfStateChangeNotificationExists
Checking applicability of app package
Checking if package is required due to intent or installation status.
Checkpoint
CheckPoint.VPN_cw5n1h2txyewy
CheckpointInterval
CheckpointMaxClockDelta
CheckpointMode
CheckPrerequisites
CheckRestoredState
CheckResult
CheckStateLeftFromPreviousUninstall %u
CheckTokenMembership
chocolate
CimFS
cjGa`Q
CL9CHwMI
Class
Classes\CLSID\{AA00FB1F-4EC7-4b09-BDC1-E5D88D291440}
classes->HasKey(id, &internalRegistrationExists)
classes->Insert(id, _combinedProperties.Get(), &replaced)
classes->Lookup(id, &_combinedProperties)
classic
classProperties
classRegistration->SetAppId(_appId.Value)
classRegistration->SetApplicationDisplayName( _properties.ApplicationDisplayName.Value.Get())
classRegistration->SetExeServerArguments(_properties.Arguments.Value.Get())
classRegistration->SetExeServerPath(_properties.Executable.Value.Get(), _properties.IsSystemExecutable.GetValueOrDefault(false), _properties.SystemExecutableArchitecture.GetValueOrDefault(IMAGE_FILE_MACHINE_UNKNOWN))
CleanAppxAllUserStore
Cleaning up HS_PACKAGE_HANDLE_TABLE
CleaningUpStagedPackagesInFamily
CleanupPreinstalledPackageForRemoval
CleanupSisPath failed
CleanupSpecificVolumeForPackageFamilyIfNeeded
Clear
CloseAppExecutionAliasEx
CloseDesktop
CloseHandle
ClosePackagesInUse
CloseServiceHandle
CloseState
CloseStateContainer
CloseStateLock
CloseThreadpool
CloseThreadpoolCleanupGroup
CloseThreadpoolCleanupGroupMembers
CloseThreadpoolTimer
CloseThreadpoolWork
CloseWindowStation
CLSID
CLSIDFromString
CmsCloseActivity
CmsCloseContainer
CmsCreateActivity
CmsMapFolderToContainer
CmsOpenContainer
CmsRegisterForContainerNotifications
CmsStartActivityAsync
CmsUnmapFolderFromContainer
CN=Microsoft Windows, O=Microsoft Corporation, L=Redmond, S=Washington, C=US
CoCreateFreeThreadedMarshaler
CoCreateGuid
CoCreateInstance
CoCreateInstanceFromApp
CoDisconnectContext
CoGetApartmentType
CoGetMalloc
CoGetModuleArchitecture
CoGetModuleArchitecture(_exeServerAbsolutePath.get(), reinterpret_cast<DWORD*>(&_executableArchitecture))
CoGetModuleArchitecture(_surrogateDllAbsolutePath.get(), reinterpret_cast<DWORD*>(&_surrogateDllArchitecture))
CoIncrementMTAUsage
CoInitializeEx
COLLECTOREXTENSION_DEH_KEYWORD
collectors->GetActivationCatalogCollector()->AddOutOfProcessActivatableClassRegistration(classRegistration.Get())
collectors->GetActivationCatalogCollector()->AddServerRegistration(serverRegistration.Get())
collectors->GetActivationCatalogCollector()->RetrieveInProcessActivatableClassRegistration(activatableClassId, &found, &retrievedInProcClassRegistration)
collectors->GetActivationCatalogCollector()->RetrieveOutOfProcessActivatableClassRegistration( activatableClassId, &found, &outOfProcessRegistration)
collectors->GetActivationCatalogCollector()->RetrieveOutOfProcessActivatableClassRegistration(activatableClassId, &found, &retrievedOutOfProcClassRegistration)
collectors->GetActivationCatalogCollector()->RetrieveServerRegistration( serverName, &found, &serverRegistration)
collectors->GetActivationCatalogCollector()->RetrieveServerRegistration(serverName, &found, &retrievedServerRegistration)
collectors->GetActivationCatalogCollector()->RetrieveServerRegistration(serverName, &found, &serverRegistration)
collectors->GetExtensionCatalogCollector()->CreateExtensionRegistration( contractId, activatableClassId, spExtensionRegistration.GetAddressOf())
collectors->GetExtensionCatalogCollector()->RetrieveExtensionRegistration( contractId, activatableClassId, spExtensionRegistration.GetAddressOf())
Column
ColumnNumber
Com::Catalog::Win32Registry::Details::GetStringValue
Com::Catalog::Win32Registry::GetInprocServer32Properties
Com::Catalog::Win32Registry::OpenClassesRootKey
Com::Catalog::Win32Registry::OpenClsidKey
com1.
com2.
com3.
com4.
com5.
com6.
com7.
com8.
com9.
combase.dll
CombinePaths %ws
ComClassRegistration::RuntimeClassInitialize(classes, id)
commandLine
commit
COMMIT /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
Commit failed
CommitPublisherTree
CommitPublisherTree %ls
CommitStateDirectoryStructure
CommitStateRegistryStructure
Committing deployment request to repository.
Common::Deployment::MsixvcStagingSession::CalculateUpdateRanges
Common::Deployment::MsixvcStagingSession::CopySignatureFileToMetadataDirectory
Common::Deployment::MsixvcStagingSession::CreateDataSource
Common::Deployment::MsixvcStagingSession::GetAcquisitionEstimate
Common::Deployment::MsixvcStagingSession::GetAcquisitionEstimateImpl
Common::Deployment::MsixvcStagingSession::GetManifestReader
Common::Deployment::MsixvcStagingSession::GetSignatureStream
Common::Deployment::MsixvcStagingSession::MakePackageActivatable
Common::Deployment::MsixvcStagingSession::MakePackageActivatableImpl
Common::Deployment::MsixvcStagingSession::RequestCancel
Common::Deployment::MsixvcStagingSession::RequestCancelImpl
Common::Deployment::MsixvcStagingSession::RollbackMovePackage
Common::Deployment::MsixvcStagingSession::RollbackMovePackageImpl
Common::Deployment::MsixvcStagingSession::StagePackage
Common::Deployment::MsixvcStagingSession::StagePackageDeferred
Common::Deployment::MsixvcStagingSession::StagePackageDeferredImpl
Common::Deployment::MsixvcStagingSession::StagePackageImpl
Common::Deployment::MsixvcStagingSession::UpdatePackage
Common::Deployment::MsixvcStagingSession::UpdatePackageDeferred
Common::Deployment::MsixvcStagingSession::UpdatePackageDeferredImpl
Common::Deployment::MsixvcStagingSession::UpdatePackageImpl
Common::Deployment::ShouldDelayPackageRegistrationRemoval(outgoingPackage->GetPackageMoniker(), delay)
COMMUNICATION_BLOCKING_APP_DEH_KEYWORD
ComOutofprocClassRegistration::RuntimeClassInitialize(classes, id, serverId)
CompanyName
CompareFileTime
CompareStringOrdinal
CompareStringW
Completed
CompleteDeploymentOperation
Component failure code = 0x
compress
Compress(x[,level]) error: Invalid level (%d)
Compress(x[,level]) error: Invalid type for level (%d)
CompressedSizeKB
ComServerRegistration::CreateClassRegistration<ComExeClassRegistration>(classId, &classRegistration)
ComServerRegistration::CreateClassRegistration<ComServiceClassRegistration>(classId, &classRegistration)
ComServerRegistration::CreateClassRegistration<ComSurrogateClassRegistration>(classId, &classRegistration)
ComServerRegistration::SetArguments(arguments)
ComServerRegistration::SetExecutable(executable, isSystemExecutable)
ComServerRegistration::SetServiceName(serviceName)
ComServerRegistration::SetSurrogateAppId(appId)
ComServerRegistration::SetSurrogateAppId(classId)
ComServerRegistration::SetSystemExecutableArchitecture(architecture)
ComServerRegistration::SetTrustLevel(trustLevel)
ConditionalACE
console
ConstructCommandLine(_exeServerAbsolutePath.get(), _exeServerArguments.Value.GetRawBuffer(nullptr), _exeServerCommandLine)
Container %ls user %ls
Container crashed
Container.
Content
ContentGroup
ContentGroupFile
ContentId
contentsCopy
ContentType
Context
ContinueRepairIfNeeded
ContractID
contractIdCopy.Set(contractId.Get())
Control
ControlService
ControlTraceW
Conversion
ConvertSecurityDescriptorToStringSecurityDescriptorW
ConvertSidToString
ConvertSidToString %ls
ConvertSidToString %ls %ls %p
ConvertSidToString %u
ConvertSidToStringSidW
ConvertStringSecurityDescriptorToSecurityDescriptorW
ConvertStringSidToSidW
copy.Initialize(_activatableClassId.Get())
copy.Initialize(_contractId.Get())
copy.Initialize(_permissions.Get())
copy.Initialize(_properties.AppUserModelId.Value.Get())
copy.Initialize(_properties.CommandLine.Value.Unexpanded.Get())
copy.Initialize(_properties.Description.Get())
copy.Initialize(_properties.DisplayName.Get())
copy.Initialize(_properties.ExePath.Value.Unexpanded.Get())
copy.Initialize(_properties.Icon.Get())
copy.Initialize(_properties.Vendor.Get())
copy.Initialize(_serverName.Get())
CopyDataProtectionLevelIfNeeded %ws %ws %u
CopyDirectory %ws %u %llu
CopyDirectory %ws %ws %ws %u
CopyFileExW
CopyFileW
CopySid
CopyStateFile %ws
coral
cornflowerBlue
cornsilk
CoSetProxyBlanket
CoTaskMemAlloc
CoTaskMemFree
CoTaskMemRealloc
Could not delete existing File %ws, which is to be replaced with a hardlink.
Could not delete hardlink temp file %ws, which failed to replace the existing file %ws. Ignore failure
Could not delete hardlink temp file %ws, which failed to set correct ACLs. Ignore failure.
Could not DeleteFile %ws
Could not expire other users' requests. Force flushing this request
Could not find main or optional package for source bundle id %I64d and name %ls.
Could not find package name in path
Could not find StateRepository package for package name %ls.
Could not flush HKCU
Could not flush HKLM
Could not get an instance of the queue. Aborting thread.
Could not get file size of %ws. The file will be removed.
Could not get StateRepositoryDisabled configuration
Could not impersonate for IAsyncRequest thread.
Could not initialize deployment request
Could not initialize Deployment Result Manager
Could not initialize EndOfLifeList
Could not initialize ETW logging.
Could not initialize Platform
Could not initialize queue store
Could not initialize StateRepository
Could not initialize trust helper
Could not initialize WNF publisher state name cache
Could not initialize XUpdateSessionManager
Could not link duplicate file %ws to %ws
Could not move package to %ws folder.
Could not open %ws
Could not opt-in for telemetry upload.
Could not set file attributes for %ws.
CouldMultiUserAppsBehaviorBePossibleForPackage
CouldNotDeletePackageFile
CouldNotFindDifferentVersionOfSamePackage
CoUninitialize
Count
CountFiles %ws root %ws i %u
CoWaitForMultipleHandles
CP!C`f
CpH9Gp
CpmcGetContainerIdForUser
Cpu:%d%s Mem:%d%s Io:%d%s
CpuPriority
Create File Failed: %ws
CreateACFolderIfNecessary %ls
CreateACFolderIfNecessary %ls user %ls package %ls %u
CreateActivationCatalogCollector(&activationCatalogCollector)
CreateActivationCatalogCollectorForUser(&activationCatalogCollectorForUser)
CreateAndPersistAppExecutionAliasEx
CreateAppContainerIfNecessary
CreateAppContainerProfile
CreateAppDataFolder %ls user %ls package %ls
CreateAppDataFolder %u
CreateAppHive %ls user %ls package %ls
CreateApplicabilityContext
CreateApplicabilityContextFromString
CreateAppxMetadataProfile
CreateBindCtx
CreateCanonicalPriFileImplementation
CreateCompatibilityEntries(incomingPackage)
CreateDesktopAppXLocalCacheStructure
CreateDesktopW
CreateDirectoryIfNecessary
CreateDirectoryIfNecessary %ws
CreateDirectoryIfNecessary %ws %ws
CreateDirectoryIfNecessary %ws path %ws
CreateDirectoryTree %ls
CreateDirectoryTree %ls, post-fix
CreateDirectoryW
CreateDirectoryW %ls
CreateDirectoryW %ls %ls
createDist
CreateEventExW
CreateEventW
CreateExtensionCatalogCollector(&extensionCatalogCollector)
CreateFileMappingW
CreateFileW
CreateFolderAndSetAcl %ls
CreateFromSddlLiteralString %ls 
CreateFromSddlTemplateStringWithTrusteeSidParseToken %ls
CreateFullFileName %ws count %llu
CreateFullFileName from %ws
CreateFullFileName to %ws
CreateHardLinkW
CreateInstance
CreateMutexExW
createOptions
CreatePackagedComCatalogCollector(&packagedComCatalogCollector)
CreatePackagedComCatalogCollectorForUserOrSystemRegister(userToken, &packagedComCatalogCollectorForUserOrSystemRegister)
CreatePackagesFolderForVolume %u
CreatePackagesFolderForVolume %ws %u
CreatePrimaryTileUser
CreatePrivateObjectSecurityEx
CreateProcessAsUserW
CreatePropertyValueFactoryIfNecessary()
CreatePublisherRoot %zu
CreatePublisherSubFolder Folder[%u] %ls of %zu
CreateRegistryCompatibilityCollector
CreateRegistryCompatibilityCollector(&registryCompatibilityCollector)
CreateRegistryCompatibilityCollectorForUserOrSystemRegister
CreateRegistryCompatibilityCollectorForUserOrSystemRegister(userToken, &registryCompatibilityCollectorForUserOrSystemRegister)
CreateRestrictedToken
CreateSchemaContext
CreateSecureSystemAppDataFolder
CreateSecureSystemAppDataFolder Root %ls
CreateSemaphoreExW
CreateSemaphoreW
CreateSerializedBundleManifestStatement
CreateSetting: Subkey=%ls
CreateStateContainer
CreateStateContainer %ls
CreateStateLock
CreateStateLockRegistration
CreateStateLockRegistration %u
CreateStateMountedFolders %ls user %ls package %ls
CreateStateMountedFolders Root %ls user %ls package %ls hasCentennial %u
CreateStateRootFolder %ws
CreateStateRootFolderACLs %ws
CreateStateSubcontainer
CreateStructured
CreateSubKey %ws 0x%0x
CreateSubKey 0x%0x
CreateSymbolicLinkW
CreateSystemAppDataFolder %u
CreateSystemAppDataFolder Root %ls
CreateSystemStateRootFolderIfNecessary %ls user %ls %ls
CreateTdlMigratorForUser
CreateThread
CreateThreadpool
CreateThreadpoolCleanupGroup
CreateThreadpoolTimer
CreateThreadpoolWork
CreateTilesForAllRegisteredPackages
CreateTilesForAllRegisteredPackagesForUser
CreateUnstructured
CreateUnstructuredStateSubFolder %d root %ls
CreateUnstructuredStateSubFolder LOCALCACHE
CreateUnstructuredStateSubFolder ROAMING
CreateUnstructuredStateSubFolder TEMP
CreateUri
CreateValidatedIndirectDataReader in PreApprovalHelper::GetPackageSignatureOrigin failed
CreateWaitableTimerExW
CreateWellKnownSid
CreateWellKnownSid %u
CreateWindowStationW
CreateWnfStateNameImplementation
CreateWPSystemAndSIDFolders
CreateWPSystemAndSIDFolders %ws
Creating StagingSession: appx bundle
Creating StagingSession: appx package
Creating StagingSession: encrypted package
CreatingNewStreamingDeploymentRequest
crimson
Critical
CRYPT32.dll
CryptAcquireContextW
CryptCATAdminAcquireContext
CryptCATAdminAddCatalog
CryptCATAdminReleaseCatalogContext
CryptCATAdminReleaseContext
CryptCATAdminRemoveCatalog
CryptCreateHash
CryptDestroyHash
CryptFindOIDInfo
CryptGetHashParam
CryptHashData
CryptMsgClose
CryptMsgGetParam
CryptQueryObject
CryptReleaseContext
CRYPTSP.dll
CT$0I
CT$HE3
CT$HI
currentBegin == currentEnd
currentBegin == m_text.length()
currentContextId
currentContextMessage
currentContextName
CurrentDeploymentState
CurrentFilePath
CurrentFileSize
Currently executing item
Currently Installed Related Set
CurrentlyInstalledPackages
currentlyInstalledRelatedSetPackageFamily
CurrentOperationContextRecorded
currentPackage
CurrentPackageFullName
currentPackageFullName
CurrentProjectionId
currentStatus
currentStepIndex
CurrentUserId
CurrentUserVisibility
CurVer
Custom.data
CustomCopyDirectoryIfNecessary %ws
CustomInstallWork
Cv7.<58'/
cW*q.
Cx!.:
D!D$ D
D!D$ H
D!l$8H
D!l$XM
D!t$XE3
D!u@3
D#CtA
D#CtD
D#D$0D
D#GtD
D#T$0D
D$ !D$0H
D$ 9D$Dt
d$ E;
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
D$ f9(u
D$ H!D$(
D$ H9D$(
D$ Hi
D$ SRD1E3
D$ tk
d$ UH
D$(@@!
D$(E3
d$(E3
D$(E3
d$(fI
D$(H;
D$(H+D$ H
D$(L!L$ H
D$@!\$HI
D$@!|$P!|$TH!|$XH!|$`H!|$hf
D$@;Eh
D$@;EHt$
D$@;U
D$@A;
D$@A3
D$@D8hPt{I
D$@E3
D$@fA
D$@H;
D$@H9t$htv
D$@L;
D$@L9mP
D$@L9y
D$`!D$dH!D$hf
D$`@8l$ht
D$`D8
D$`D98
D$`E3
d$`H!|$hH
D$`H!D$h
D$`H9
D$`Hcy
D$`I;w
D$`L;
D$`L;(r
D$0!\$(H!\$ 
D$0!D$@H
D$00I
D$08X
d$0D8
D$0D9r
D$0E3
d$0fD
D$0fE
D$0H;
D$0I;
D$0L;
D$0L;c8r
D$0L9
D$0u 
D$49L$8t
D$4L;
D$8!\$HI
D$8+D$P
D$8+D$PD
D$8A;
d$8E3
D$8E3
D$8H;
D$8H+D$0H
D$8L!D$0
D$8L;
D$BD8t$Gt)
D$H!D$@
D$h+D$8
D$H0u
D$HA;
D$HA+
D$HD;E
D$HE3
D$hE3
D$HE3
D$hE3
D$HE3
D$hfD
D$HH!D$PH
D$hH!t$`E3
D$hH;
d$HH;
D$hH;
d$HH;\$X
D$HH+
D$hH9u
D$hL;
D$HL;(r
D$hM;
D$hM9exw
D$lfE
D$P!\$`
D$p!D$tH!D$xf
D$p!wN
D$P@@
D$P+D$0
D$P98t
D$PA;
D$pA;
D$pA3
D$PD3
D$pD3
D$PD8|$kA
D$PD8|$lA
D$pE3
D$PE3
D$pE3
D$PE3
D$pE3
D$PE3
D$pE3
D$PE3
D$pE3
D$pH!E
D$PH;
D$pH;
D$PH+
D$PH+D$HH
D$PH9P }
D$PIc
D$PL!d$HL
D$pL;
D$PL;
d$pL9w0
D$Pu3H
D$RD9|$XA
D$T"=
D$TE3
D$X+E
D$x0u
D$XA;
D$XA3
D$XD3
D$XD8
D$XD8@
d$XD8d$0
D$XE3
D$xE3
D$XE3
D$xE3
D$XE3
D$xE3
D$XE3
D$XH;
D$XH9}ht
D$XHc
d$xI;
D$XL!t$hL
D$xL;
D$XL9
D$XM;
D%#*^
D(mgQ
D)Roa
D:(A; OICI; GA;;; SY)(A; OICI; GR;;; BU)(A; OICI; GR;;; AC)
D:(A;;CC;;;%ls)
D:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;SY)(A;;0xF0087;;;S-1-2-1406295995-2538229729-1264070048-2919177457)(A;;0xF0087;;;AC)
D:(A;;GA;;;SY)(A;;GA;;;%ls)(A;;GA;;;%ls)
D:(A;;GA;;;SY)(A;;GR;;;BU)(A;;GR;;;AC)
D:(A;CROICI;GA;;;%s)
D:(A;CROICI;GA;;;SY)(A;CROICI;GA;;;%s)(A;CROICI;GA;;;BA)
D:(A;OICI;GA;;;SY)(A;OICI;GR;;;S-1-2-1406295995-2538229729-1264070048-2919177457)(A;OICI;GR;;;AC)
D:(A;OICI;KA;;;CO)(A;OICI;KA;;;SY)(A;OICI;KA;;;%ls)(A;OICI;KA;;;BA)
D:(A;OICIIO;GA;;;SY)(A;NP;0xf037f;;;SY)(A;OICI;0x20022;;;S-1-2-1406295995-2538229729-1264070048-2919177457)(A;OICI;0x20022;;;AC)
D:AI(A;OICI;0x120089;;;AC)(A;OICI;0x120089;;;S-1-15-2-2)(A;OICI;0x120089;;;BU)S:AI
D:AI(A;OICI;0x1200A9;;;%s)(A;OICI;0x1200A9;;;BU)
D:AI(A;OICI;0x1200A9;;;AC)(A;OICI;0x1200A9;;;S-1-15-2-2)(A;OICI;0x1200A9;;;BU)
D:AI(A;OICI;0x1200A9;;;AC)(A;OICI;0x1200A9;;;S-1-15-2-2)(A;OICI;0x1200A9;;;BU)S:AI
D:AI(A;OICI;GA;;;%s)
D:AI(A;OICI;GA;;;%s)(A;OICI;FA;;;%s)
D:PAI(A;;FA;;;SY)(A;;FA;;;BA)
D:PAI(A;OICI;FA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;OI;0x120089;;;BA)(A;CI;0x120089;;;BA)(A;OICI;0x120089;;;BA)(A;OICI;0x120089;;;LS)(A;OICI;0x120089;;;NS)(A;OICI;FA;;;SY)
D:PAI(A;OICI;FA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;OI;0x1200a9;;;BA)(A;CI;0x1200a9;;;BA)(A;OICI;0x1200a9;;;BA)(A;OICI;0x1200a9;;;LS)(A;OICI;0x1200a9;;;NS)(A;OICI;FA;;;SY)
D:PAI(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;;FRFX;;;BU)(A;;FRFX;;;AU)
D:PAI(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;%s)
D:PAI(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;GA;;;%s)(XA;OICI;0x1200A9;;;BU;(WIN://SYSAPPID Contains "%s"))(A;OICI;FR;;;%s)(A;CI;FX;;;%s)(A;OICI;0x010116;;;%s)
D:PAI(A;OICI;GA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;OICI;GRGX;;;S-1-15-3-1024-3635283841-2530182609-996808640-1887759898-3848208603-3313616867-983405619-2501854204)(A;OICI;GA;;;SY)(A;OICI;GA;;;BA)(A;OICI;FRFX;;;LS)(A;OICI;FRFX;;;NS)(A;OICI;FRFX;;;RC)
d;[ty
D;|$H
D;|$P
D;|$x
D;|$X
D;e@}
D;ehsa3
D;MHt
D;t$\
D;t$0
D;t$h
D;t$H
D;t$h
D;t$P
D^7]&
D+D$pD
d2IXV
D3] D
D3] D3
D3EHD
D3EPA
D8&u`
D8(u]L
D8.uOH
D8@Pt
D8`iu-
D8{ t
D8{St<D9e
D8{Tt+H
D8|$ 
D8|$@
D8|$@t
D8|$@t!H
D8|$@t>H
D8|$@u
D8|$`
D8|$0
D8|$0@
D8|$0t
D8|$0t`H
D8|$0t>H
D8|$0tHE3
D8|$0tUD
D8|$0u
D8|$0u.
D8|$0u=H
D8|$1
D8|$1t4
D8|$1tdE89u
D8|$1tP
D8|$1tx
D8|$1tyE8:u
D8|$1u2
D8|$8
D8|$8t>H
D8|$8tOH
D8|$A
D8|$Bt
D8|$hu^3
D8|$iA
D8|$jA
D8|$P
D8} u
D8}@u\D8~*
D8}_uU
D8}`u>L
D8}gu
D8}Iu
D8}XtMD8}
D8}xuD
D8~(t
D8~htiH
D8~xteH
D8~Xu
D8>t,H
D88u-I
D8cSt:
D8d$ 
D8d$ t
D8d$ u
D8d$:
D8d$;
D8d$@
D8d$@t
D8d$@t>H
D8d$@tS
D8d$`
D8d$`H
D8d$<
D8d$0
D8d$0H
D8d$0t
D8d$0t#
D8d$0tBH
D8d$0tEH
D8d$0tFH
D8d$0u
D8d$0u%L
D8d$0uU
D8d$1
D8d$1t_L
D8d$1tDH
D8d$8
D8d$9t"H
D8d$At]3
D8d$AtM
D8d$Bu
D8d$Pt
D8d$Pt,H
D8d$Pu
D8d$Xt#I
D8d8@A
D8d8@t
D8e@I
D8e_t6D
D8e_t9H
D8e8t$3
D8egt
D8egu
D8eHt
D8eHt1
D8eHuH
D8eHuZH
D8ePu
D8ewu
D8eXu
D8eXu<
D8g t\L
D8g tUL
D8g tXL
D8g tYL
D8g(t
D8g*t
D8g|t
D8h@t
D8k<t
D8l$@
D8l$@t>H
D8l$@trH
D8l$@u;
D8l$@u>E
D8L$`
D8l$0
D8l$0t
D8l$0t4H
D8l$0tGE3
D8l$0u
D8l$0u"A
D8l$1
D8l$Au
D8l$H
D8l$Ht
D8l$P
D8l$RtXH
D8l8@
D8l8@u
D8m(t
D8m(tRD
D8m@t"
D8m@tML
D8m@u
D8m`t3H
D8mbuPI
D8mct5I
D8mdu
D8mgtTM
D8mH@
D8mot
D8myu
D8mztNH
D8pPt
D8q u
D8q!t
D8t$ 
D8t$@u
D8t$@u<
D8t$[t
D8t$0
D8t$0t
D8t$0tDH
D8t$0tdH
D8t$0tk
D8t$0tN
D8t$0u
D8t$0u A
D8t$0u#H
D8t$0u@L
D8t$A
D8t$At%
D8t$Bt#
D8t$Dt'
D8t$E
D8t$Ft\E
D8t$Hu
D8t$P
D8t$QttL
D8t$Qu'
D8t$Rt%
D8t$T
D8t$Ut$
D8t$X
D8t$Y
D8t$Z
D8t8@thD8
D8t9@tYHc^
D8u@u
D8u0t
D8ugt 
D8uHt7
D8uit2H
D8ujt>H
D8uPt
D8uwu"
D8wxt
D9&v[H
D9;}OH
D9;v,
D9\$8t>H
D9|$0
D9|$0t
D9|$0t H
D9|$0t#H
D9|$0t^H
D9|$0tSH
D9|$0u%
D9|$H
D9|$Hv.
D9|$P
D9|$t
D9}H|
D9}PuGH
D9~8u
D9~hv@A
D9+v,
D92u&H
D9aLu
D9c$u-
D9d$@
D9d$@L
D9d$@u
D9d$@u#H
D9d$`
D9d$|t
D9d$0t
D9d$0uQH
D9d$d
D9d$Hv%H
D9d$P
D9D$pt>H
D9d$Pu
D9D$Xt
D9e@t
D9eHt
D9ePt
D9ePt6D
D9ePtED8eHt?A
D9ewu
D9eWw
D9eXt4H
D9eXtoH
D9l$@
D9l$@t
D9l$@t(D
D9l$@t[D
D9l$@t+D
D9l$@tUD
D9l$@tvH
D9l$@v$
D9l$`
D9l$0vA
D9l$4
D9l$H
D9l$hu
D9l$TuI
D9l$X
D9l$Xt%L
D9m@u+
D9m`}2I
D9mPtFD
D9pxt
D9pxu
D9qxu
D9t$@
D9t$\t
D9t$|
D9t$0
D9t$h|
D9t$p
D9t$T
D9t$X
D9t$x
D9t$Xt
D9uot
D9uot4D8ugt.L
D9uot'L
D9uou7H
D9uwt7
D9uwu
D9w@t
D9x0v
DACL of %ls has duplicated package*SIDs ? %u
DACL of %ls missing package*SIDs ? %u
DACLCurrent: %p
darkBlue
darkCyan
darkGoldenrod
darkGray
darkGreen
darkKhaki
darkMagenta
darkOliveGreen
darkOrange
darkOrchid
darkRed
darkSalmon
darkSeaGreen
darkSlateBlue
darkSlateGray
darkTurquoise
darkViolet
data error
Data flush cost: %I64u ms
Database
Database.Checkpoint
DatabaseCache.Add
DatabaseCache.Get
DatabaseCache.Lifespan
DatabaseConnection
DatabaseCorruption.Detected
DatabaseCorruptionFirstDetectedUptime
DatabaseCorruptionFirstDetectedWhen
DatabaseCorruptionLastReported
DatabasePtr
DatabaseStatisticsUpdateInterval
DatabaseStatisticsUpdateMaintenanceTaskInterval
DatabaseStatisticsUpdateMaxClockDelta
DataFlush
DataFormats
DATAPACKAGEHOST_DEH_KEYWORD
DataSourceErrorCode
DataSourceErrorCount
DataSourceErrorFile
DataSourceErrorPhase
DD$HL
dD8uw
ddeexec
DebugBreak
deepPink
deepSkyBlue
default
DefaultApp_cw5n1h2txyewy
DefaultFile
DefaultIcon
DefaultSize
DefaultStartPage
DefaultTile
DefaultVolumeKey
Defer
DeferringMainPackageUpdateRegistration
DEH is applicable and will be run
DEH Name
DehName
delayedStart
Delaying removal of package folder as we are still in the window that users can uninstall the OS upgrade. Keeping the package folder in case OS downgrades.
DelayLoadFailureHook
DELETE
DELETE FROM %s WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM AppExecutionAlias WHERE _AppExecutionAliasID IN ( SELECT aea._AppExecutionAliasID FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension WHERE ae.Application=? AND aea._WorkId=0 AND ae._WorkId=0);
DELETE FROM AppExecutionAlias WHERE _AppExecutionAliasID IN ( SELECT aea._AppExecutionAliasID FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension WHERE ae.Application=?1 AND (aea._WorkId=0 OR aea._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2));
DELETE FROM AppExecutionAliasUser WHERE User=?;
DELETE FROM AppExtension WHERE _AppExtensionID IN ( SELECT ape._AppExtensionID FROM AppExtension AS ape INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=ape.Extension WHERE ae.Application=? AND ape._WorkId=0 AND ae._WorkId=0);
DELETE FROM AppExtension WHERE _AppExtensionID IN ( SELECT ape._AppExtensionID FROM AppExtension AS ape INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=ape.Extension WHERE ae.Application=?1 AND (ape._WorkId=0 OR ape._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2));
DELETE FROM AppExtensionHost WHERE _AppExtensionHostID IN ( SELECT aeh._AppExtensionHostID FROM AppExtensionHost AS aeh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aeh.Extension WHERE ae.Application=? AND aeh._WorkId=0 AND ae._WorkId=0);
DELETE FROM AppExtensionHost WHERE _AppExtensionHostID IN ( SELECT aeh._AppExtensionHostID FROM AppExtensionHost AS aeh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aeh.Extension WHERE ae.Application=?1 AND (aeh._WorkId=0 OR aeh._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2));
DELETE FROM AppInstaller WHERE _AppInstallerID IN ( SELECT ai._AppInstallerID FROM AppInstaller AS ai INNER JOIN PackageAppInstaller AS pai ON ai._AppInstallerID=pai.AppInstaller WHERE pai.Package=? AND pai._WorkId=0);
DELETE FROM AppInstaller WHERE _AppInstallerID IN ( SELECT ai._AppInstallerID FROM AppInstaller AS ai INNER JOIN PackageAppInstaller AS pai ON ai._AppInstallerID=pai.AppInstaller WHERE pai.Package=?1 AND (pai._WorkId=0 OR pai._WorkId=?2));
DELETE FROM AppInstaller WHERE _AppInstallerID=?;
DELETE FROM AppInstallerUri WHERE _AppInstallerUriID IN ( SELECT aiu._AppInstallerUriID FROM AppInstallerUri AS aiu INNER JOIN AppInstaller AS ai ON ai._AppInstallerID=aiu.AppInstaller INNER JOIN PackageAppInstaller AS pai ON ai._AppInstallerID=pai.AppInstaller WHERE pai.Package=? AND pai._WorkId=0);
DELETE FROM AppInstallerUri WHERE _AppInstallerUriID IN ( SELECT aiu._AppInstallerUriID FROM AppInstallerUri AS aiu INNER JOIN AppInstaller AS ai ON ai._AppInstallerID=aiu.AppInstaller INNER JOIN PackageAppInstaller AS pai ON ai._AppInstallerID=pai.AppInstaller WHERE pai.Package=?1 AND (pai._WorkId=0 OR pai._WorkId=?2));
DELETE FROM AppInstallerUri WHERE AppInstaller=? AND UriType & ? !=0 AND "Index"=?;
DELETE FROM Application WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM Application WHERE Package=? AND _WorkId=0;
DELETE FROM ApplicationBackgroundTask WHERE _BackgroundTaskID IN ( SELECT abt._BackgroundTaskID FROM ApplicationBackgroundTask AS abt INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=abt.Extension WHERE ae.Application=? AND abt._WorkId=0 AND ae._WorkId=0);
DELETE FROM ApplicationBackgroundTask WHERE _BackgroundTaskID IN ( SELECT abt._BackgroundTaskID FROM ApplicationBackgroundTask AS abt INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=abt.Extension WHERE ae.Application=?1 AND (abt._WorkId=0 OR abt._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2));
DELETE FROM ApplicationContentUriRule WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM ApplicationContentUriRule WHERE Application=? AND _WorkId=0;
DELETE FROM ApplicationExtension WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM ApplicationExtension WHERE Application=? AND _WorkId=0;
DELETE FROM ApplicationProperty WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM ApplicationProperty WHERE Application=? AND _WorkId=0;
DELETE FROM ApplicationUser WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM ApplicationUser WHERE Package=? AND _WorkId=0;
DELETE FROM ApplicationUser WHERE PackageUser=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM ApplicationUser WHERE PackageUser=? AND _WorkId=0;
DELETE FROM ApplicationUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM ApplicationUser WHERE User=? AND _WorkId=0;
DELETE FROM AppService WHERE _AppServiceID IN ( SELECT "as"._AppServiceID FROM AppService AS "as" INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID="as".Extension WHERE ae.Application=? AND "as"._WorkId=0 AND ae._WorkId=0);
DELETE FROM AppService WHERE _AppServiceID IN ( SELECT "as"._AppServiceID FROM AppService AS "as" INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID="as".Extension WHERE ae.Application=?1 AND ("as"._WorkId=0 OR "as"._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2));
DELETE FROM AppUriHandler WHERE _AppUriHandlerID IN ( SELECT auh._AppUriHandlerID FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension WHERE ae.Application=? AND auh._WorkId=0 AND ae._WorkId=0);
DELETE FROM AppUriHandler WHERE _AppUriHandlerID IN ( SELECT auh._AppUriHandlerID FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension WHERE ae.Application=?1 AND (auh._WorkId=0 OR auh._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2));
DELETE FROM AppUriHandlerGroup WHERE _AppUriHandlerGroupID IN ( SELECT auhg._AppUriHandlerGroupID FROM AppUriHandlerGroup AS auhg INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension WHERE ae.Application=? AND auhg._WorkId=0 AND ae._WorkId=0);
DELETE FROM AppUriHandlerGroup WHERE _AppUriHandlerGroupID IN ( SELECT auhg._AppUriHandlerGroupID FROM AppUriHandlerGroup AS auhg INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension WHERE ae.Application=?1 AND (auhg._WorkId=0 OR auhg._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2));
DELETE FROM AppxExtension WHERE _AppxExtensionID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM AppxExtension WHERE _AppxExtensionID=? AND _WorkId=0;
DELETE FROM AppxExtension WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM AppxExtension WHERE Package=? AND _WorkId=0;
DELETE FROM AppxExtension WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM AppxExtension WHERE User=? AND _WorkId=0;
DELETE FROM AppxManifest WHERE _AppxManifestID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM AppxManifest WHERE _AppxManifestID=? AND _WorkId=0;
DELETE FROM AppxManifest WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM AppxManifest WHERE Package=? AND _WorkId=0;
DELETE FROM AutoUpdatePackage WHERE _AutoUpdatePackageID IN ( SELECT aup._AutoUpdatePackageID FROM AutoUpdatePackage AS aup INNER JOIN AppInstaller AS ai ON ai._AppInstallerID=aup.AppInstaller INNER JOIN PackageAppInstaller AS pai ON ai._AppInstallerID=pai.AppInstaller WHERE pai.Package=? AND pai._WorkId=0);
DELETE FROM AutoUpdatePackage WHERE _AutoUpdatePackageID IN ( SELECT aup._AutoUpdatePackageID FROM AutoUpdatePackage AS aup INNER JOIN AppInstaller AS ai ON ai._AppInstallerID=aup.AppInstaller INNER JOIN PackageAppInstaller AS pai ON ai._AppInstallerID=pai.AppInstaller WHERE pai.Package=?1 AND (pai._WorkId=0 OR pai._WorkId=?2));
DELETE FROM AutoUpdatePackage WHERE AppInstaller=? AND PackageFamily=? AND Version=? AND Architecture=?;
DELETE FROM Bundle WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM Bundle WHERE Package=? AND _WorkId=0;
DELETE FROM BundlePackage WHERE Bundle IN (SELECT b._BundleID FROM Bundle AS b WHERE b.Package=?1 AND (_WorkId=0 OR _WorkId=?2));
DELETE FROM BundlePackage WHERE Bundle IN (SELECT b._BundleID FROM Bundle AS b WHERE b.Package=?1 AND _WorkId=0);
DELETE FROM BundleResource WHERE BundlePackage IN (SELECT bp._BundlePackageID FROM BundlePackage AS bp WHERE bp.Bundle IN (SELECT b._BundleID FROM Bundle AS b WHERE b.Package=?1 AND (_WorkId=0 OR _WorkId=?2)));
DELETE FROM BundleResource WHERE BundlePackage IN (SELECT bp._BundlePackageID FROM BundlePackage AS bp WHERE bp.Bundle IN (SELECT b._BundleID FROM Bundle AS b WHERE b.Package=?1 AND _WorkId=0));
DELETE FROM ContentGroup WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM ContentGroup WHERE Package=? AND _WorkId=0;
DELETE FROM ContentGroupFile WHERE ContentGroup IN (SELECT _ContentGroupID FROM ContentGroup WHERE Package=?) AND (_WorkId=0 OR _WorkId=?);
DELETE FROM ContentGroupFile WHERE ContentGroup IN (SELECT _ContentGroupID FROM ContentGroup WHERE Package=?) AND _WorkId=0;
DELETE FROM CustomInstallWork WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM CustomInstallWork WHERE Package=? AND _WorkId=0;
DELETE FROM CustomInstallWork WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM CustomInstallWork WHERE User=? AND _WorkId=0;
DELETE FROM DefaultTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM DefaultTile WHERE Application=? AND _WorkId=0;
DELETE FROM Dependency WHERE DependentPackage=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM Dependency WHERE DependentPackage=? AND _WorkId=0;
DELETE FROM DependencyGraph WHERE _DependencyGraphID IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=? AND _WorkId<>0);
DELETE FROM DependencyGraph WHERE _WorkId=? AND _WorkId<>0 AND _IsMarkedForDeletion<>0 AND _ShadowId<>0;
DELETE FROM DependencyGraph WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM DependencyGraph WHERE DependentPackage=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM DependencyGraph WHERE DependentPackage=? AND _WorkId=?;
DELETE FROM DependencyGraph WHERE DependentPackage=? AND _WorkId=0;
DELETE FROM DependencyGraph WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM DependencyGraph WHERE User=? AND _WorkId=0;
DELETE FROM DeploymentHistory WHERE _DeploymentHistoryID IN ( SELECT dh._DeploymentHistoryID FROM DeploymentHistory AS dh   INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=dh.PackageIdentity   INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pi.PackageFamily   WHERE dh.User=?1       AND pf.PackageFamilyName=?2       AND (dh._WorkId=0 OR dh._WorkId=?3));
DELETE FROM DeploymentHistory WHERE _DeploymentHistoryID IN ( SELECT dh._DeploymentHistoryID FROM DeploymentHistory AS dh   INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=dh.PackageIdentity   INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pi.PackageFamily   WHERE dh.User=?1       AND pf.PackageFamilyName=?2       AND dh._WorkId=0);
DELETE FROM DeploymentHistory WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM DeploymentHistory WHERE User=? AND _WorkId=0;
DELETE FROM DynamicAppUriHandler  WHERE DynamicAppUriHandlerGroup IN (SELECT dauhg._DynamicAppUriHandlerGroupID FROM DynamicAppUriHandlerGroup AS dauhg WHERE dauhg.User=?);
DELETE FROM DynamicAppUriHandlerGroup WHERE User=?;
DELETE FROM File WHERE _FileID IN (SELECT _FileID FROM File INNER JOIN (SELECT Package AS P, RelativeFilePath AS R FROM File WHERE _WorkId=? AND _WorkId<>0) WHERE _WorkId=0 AND Package=P AND RelativeFilePath=R);
DELETE FROM File WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM File WHERE Package=? AND _WorkId=0;
DELETE FROM FileTypeAssociation WHERE _FileTypeAssociationID IN ( SELECT fta._FileTypeAssociationID FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension WHERE ae.Application=? AND fta._WorkId=0 AND ae._WorkId=0);
DELETE FROM FileTypeAssociation WHERE _FileTypeAssociationID IN ( SELECT fta._FileTypeAssociationID FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension WHERE ae.Application=?1 AND (fta._WorkId=0 OR fta._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2));
DELETE FROM HostRuntime WHERE PackageExtension IN ( SELECT pe._PackageExtensionID FROM PackageExtension AS pe WHERE pe.Package=? AND (_WorkId=0 OR _WorkId=?));
DELETE FROM HostRuntime WHERE PackageExtension IN ( SELECT pe._PackageExtensionID FROM PackageExtension AS pe WHERE pe.Package=? AND _WorkId=0);
DELETE FROM MrtApplication WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM MrtApplication WHERE Application IN (SELECT _ApplicationID FROM Application WHERE Package=?) AND (_WorkId=0 OR _WorkId=?);
DELETE FROM MrtApplication WHERE Application IN (SELECT _ApplicationID FROM Application WHERE Package=?) AND _WorkId=0;
DELETE FROM MrtApplication WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM MrtApplication WHERE Application=? AND _WorkId=0;
DELETE FROM MrtDefaultTile WHERE _MrtDefaultTileID IN ( SELECT mdt._MrtDefaultTileID FROM MrtDefaultTile AS mdt INNER JOIN DefaultTile AS dt ON dt._DefaultTileID=mdt.DefaultTile WHERE dt.Application=? AND mdt._WorkId=0 AND dt._WorkId=0);
DELETE FROM MrtDefaultTile WHERE _MrtDefaultTileID IN ( SELECT mdt._MrtDefaultTileID FROM MrtDefaultTile AS mdt INNER JOIN DefaultTile AS dt ON dt._DefaultTileID=mdt.DefaultTile WHERE dt.Application=?1 AND (mdt._WorkId=0 OR mdt._WorkId=?2) AND (dt._WorkId=0 OR dt._WorkId=?2));
DELETE FROM MrtPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM MrtPackage WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM MrtPackage WHERE Package=? AND _WorkId=0;
DELETE FROM MrtSharedPri WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM MrtSharedPri WHERE Package=? AND _WorkId=0;
DELETE FROM MrtUserPri WHERE Package=? AND User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM MrtUserPri WHERE Package=? AND User=? AND _WorkId=0;
DELETE FROM MrtUserPri WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM MrtUserPri WHERE User=? AND _WorkId=0;
DELETE FROM NamedDependency WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM NamedDependency WHERE Package=? AND _WorkId=0;
DELETE FROM OptionalBundle WHERE MainBundle IN (SELECT b._BundleID FROM Bundle AS b WHERE b.Package=? AND (_WorkId=0 OR _WorkId=?));
DELETE FROM OptionalBundle WHERE MainBundle IN (SELECT b._BundleID FROM Bundle AS b WHERE b.Package=? AND _WorkId=0);
DELETE FROM OptionalBundlePackage WHERE OptionalBundle IN (SELECT ob._OptionalBundleID FROM OptionalBundle AS ob INNER JOIN Bundle AS b ON b._BundleID=ob.MainBundle WHERE b.Package=?1 AND (ob._WorkId=0 OR ob._WorkId=?2) AND (b._WorkId=0 OR b._WorkId=?2));
DELETE FROM OptionalBundlePackage WHERE OptionalBundle IN (SELECT ob._OptionalBundleID FROM OptionalBundle AS ob INNER JOIN Bundle AS b ON b._BundleID=ob.MainBundle WHERE b.Package=?1 AND ob._WorkId=0 AND b._WorkId=0);
DELETE FROM OptionalBundleResource WHERE OptionalBundlePackage IN (SELECT obp._OptionalBundlePackageID FROM OptionalBundlePackage AS obp INNER JOIN OptionalBundle AS ob ON ob._OptionalBundleID=obp.OptionalBundle INNER JOIN Bundle AS b ON b._BundleID=ob.MainBundle WHERE b.Package=?1 AND (obp._WorkId=0 OR obp._WorkId=?2) AND (ob._WorkId=0 OR ob._WorkId=?2) AND (b._WorkId=0 OR b._WorkId=?2));
DELETE FROM OptionalBundleResource WHERE OptionalBundlePackage IN (SELECT obp._OptionalBundlePackageID FROM OptionalBundlePackage AS obp INNER JOIN OptionalBundle AS ob ON ob._OptionalBundleID=obp.OptionalBundle INNER JOIN Bundle AS b ON b._BundleID=ob.MainBundle WHERE b.Package=?1 AND obp._WorkId=0 AND ob._WorkId=0 AND b._WorkId=0);
DELETE FROM Package WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM Package WHERE _PackageID=? AND _WorkId=0;
DELETE FROM PackageAppInstaller WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageAppInstaller WHERE Package=? AND _WorkId=0;
DELETE FROM PackageDependency WHERE User=?;
DELETE FROM PackageExtension WHERE _PackageExtensionID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageExtension WHERE _PackageExtensionID=? AND _WorkId=0;
DELETE FROM PackageExtension WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageExtension WHERE Package=? AND _WorkId=0;
DELETE FROM PackageExternalLocation WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageExternalLocation WHERE Package=? AND _WorkId=0;
DELETE FROM PackageExternalLocation WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageExternalLocation WHERE User=? AND _WorkId=0;
DELETE FROM PackageExternalLocation WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageExternalLocation WHERE User=? AND Package=? AND _WorkId=0;
DELETE FROM PackageFamilyPolicy WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageFamilyPolicy WHERE User=? AND _WorkId=0;
DELETE FROM PackageFamilyUser WHERE User=?;
DELETE FROM PackageFamilyUserResource WHERE PackageFamilyUser IN (SELECT pfu._PackageFamilyUserID FROM PackageFamilyUser AS pfu WHERE pfu.User=?);
DELETE FROM PackageLocation WHERE Package IN (SELECT Package FROM PackageLocation WHERE _WorkId=? AND _WorkId<>0) AND _WorkId=0;
DELETE FROM PackageLocation WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageLocation WHERE Package=? AND _WorkId=0;
DELETE FROM PackagePolicy WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackagePolicy WHERE Package=? AND _WorkId=0;
DELETE FROM PackagePolicy WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackagePolicy WHERE User=? AND _WorkId=0;
DELETE FROM PackageProperty WHERE _PackagePropertyID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageProperty WHERE _PackagePropertyID=? AND _WorkId=0;
DELETE FROM PackageProperty WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageProperty WHERE Package=? AND _WorkId=0;
DELETE FROM PackageSourceUri WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageSourceUri WHERE Package=? AND _WorkId=0;
DELETE FROM PackageSuperceded WHERE _PackageSupercededID=?;
DELETE FROM PackageSuperceded WHERE User=?;
DELETE FROM PackageUser WHERE _PackageUserID IN (SELECT _PackageUserID FROM PackageUser INNER JOIN (SELECT User AS U, Package AS P FROM PackageUser WHERE _WorkId=? AND _WorkId<>0) WHERE _WorkId=0 AND User=U AND Package=P);
DELETE FROM PackageUser WHERE _PackageUserID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageUser WHERE _PackageUserID=? AND _WorkId=0;
DELETE FROM PackageUser WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageUser WHERE Package=? AND _WorkId=0;
DELETE FROM PackageUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageUser WHERE User=? AND _WorkId=0;
DELETE FROM PackageUser WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageUser WHERE User=? AND Package=? AND _WorkId=0;
DELETE FROM PackageUserStatus AS pus WHERE User IN ( SELECT _UserID FROM User WHERE UserSid=?) AND PackageIdentity IN (SELECT _PackageIdentityID FROM PackageIdentity WHERE PackageFullName=?);
DELETE FROM PackageUserStatus WHERE PackageIdentity IN (SELECT pi._PackageIdentityID FROM PackageIdentity AS pi INNER JOIN Package AS p ON p.PackageFullName=pi.PackageFullName WHERE p._PackageID=? AND (p._WorkId=0 OR p._WorkId=?));
DELETE FROM PackageUserStatus WHERE PackageIdentity IN (SELECT pi._PackageIdentityID FROM PackageIdentity AS pi INNER JOIN Package AS p ON p.PackageFullName=pi.PackageFullName WHERE p._PackageID=? AND p._WorkId=0);
DELETE FROM PackageUserStatus WHERE User=?;
DELETE FROM PrimaryTile WHERE _PrimaryTileID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTile WHERE _PrimaryTileID=? AND _WorkId=0;
DELETE FROM PrimaryTileUser WHERE _PrimaryTileUserId IN (SELECT _PrimaryTileUserId FROM PrimaryTileUser INNER JOIN (SELECT ApplicationIdentity AS ai, User AS usr FROM PrimaryTileUser WHERE _WorkId=? AND _WorkId<>0 ) WHERE _WorkId=0 AND ApplicationIdentity=ai AND User=usr);
DELETE FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND _WorkId=0;
DELETE FROM PrimaryTileUser WHERE TileUniqueId IN (SELECT TileUniqueId FROM PrimaryTileUser WHERE _WorkId=? AND _WorkId<>0) AND _WorkId=0;
DELETE FROM PrimaryTileUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUser WHERE User=? AND _WorkId=0;
DELETE FROM PrimaryTileUserChangelog WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUserChangelog WHERE User=? AND _WorkId=0;
DELETE FROM Protocol WHERE _ProtocolID IN ( SELECT p._ProtocolID FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension WHERE ae.Application=? AND p._WorkId=0 AND ae._WorkId=0);
DELETE FROM Protocol WHERE _ProtocolID IN ( SELECT p._ProtocolID FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension WHERE ae.Application=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2));
DELETE FROM ProvisionedPackageExclude WHERE User=?;
DELETE FROM PublisherCacheFolder WHERE PackageExtension IN ( SELECT pe._PackageExtensionID FROM PackageExtension AS pe WHERE pe.Package=? AND (_WorkId=0 OR _WorkId=?));
DELETE FROM PublisherCacheFolder WHERE PackageExtension IN ( SELECT pe._PackageExtensionID FROM PackageExtension AS pe WHERE pe.Package=? AND _WorkId=0);
DELETE FROM Resource WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM Resource WHERE Package=? AND _WorkId=0;
DELETE FROM SecondaryTile WHERE _SecondaryTileID IN (SELECT SecondaryTile FROM SecondaryTileUser WHERE _WorkId=0 AND TileUniqueId IN (SELECT TileUniqueId FROM SecondaryTileUser WHERE _WorkId=? AND _WorkId<>0)) AND _WorkId=0;
DELETE FROM SecondaryTile WHERE _SecondaryTileID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTile WHERE _SecondaryTileID=? AND _WorkId=0;
DELETE FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND _WorkId=0;
DELETE FROM SecondaryTileUser WHERE TileUniqueId IN (SELECT TileUniqueId FROM SecondaryTileUser WHERE _WorkId=? AND _WorkId<>0) AND _WorkId=0;
DELETE FROM SecondaryTileUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUser WHERE User=? AND _WorkId=0;
DELETE FROM SecondaryTileUserChangelog WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUserChangelog WHERE User=? AND _WorkId=0;
DELETE FROM SharedPackageContainer WHERE _SharedPackageContainerID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SharedPackageContainer WHERE _SharedPackageContainerID=? AND _WorkId=0;
DELETE FROM SharedPackageContainer WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SharedPackageContainer WHERE User=? AND _WorkId=0;
DELETE FROM SharedPackageContainerPackageFamily WHERE _SharedPackageContainerPackageFamilyID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SharedPackageContainerPackageFamily WHERE _SharedPackageContainerPackageFamilyID=? AND _WorkId=0;
DELETE FROM SharedPackageContainerPackageFamily WHERE SharedPackageContainer IN (SELECT spc._SharedPackageContainerID FROM SharedPackageContainer AS spc WHERE spc.User=?1 AND (_WorkId=0 OR _WorkId=?2));
DELETE FROM SharedPackageContainerPackageFamily WHERE SharedPackageContainer IN (SELECT spc._SharedPackageContainerID FROM SharedPackageContainer AS spc WHERE spc.User=?1 AND _WorkId=0);
DELETE FROM SRHistory WHERE User=?;
DELETE FROM SRJournal WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SRJournal WHERE User=? AND _WorkId=0;
DELETE FROM SRJournalArchive WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SRJournalArchive WHERE User=? AND _WorkId=0;
DELETE FROM TargetDeviceFamily WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM TargetDeviceFamily WHERE Package=? AND _WorkId=0;
DELETE FROM User WHERE _UserID=?;
DELETE FROM WowDependencyGraph WHERE _WorkId=? AND _WorkId<>0 AND _IsMarkedForDeletion<>0 AND _ShadowId<>0;
DELETE FROM WowDependencyGraph WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM WowDependencyGraph WHERE _WowDependencyGraphID IN (SELECT _ShadowId FROM WowDependencyGraph WHERE _WorkId=? AND _WorkId<>0);
DELETE FROM WowDependencyGraph WHERE DependentPackage=? AND _WorkId=?;
DELETE FROM WowDependencyGraph WHERE SupplierPackage=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM WowDependencyGraph WHERE SupplierPackage=? AND _WorkId=0;
DELETE FROM WowDependencyGraph WHERE User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM WowDependencyGraph WHERE User=? AND _WorkId=0;
DELETE FROM XboxPackage WHERE EditionId IN (SELECT EditionId FROM XboxPackage WHERE _WorkId=? AND _WorkId<>0) AND _WorkId=0;
DELETE FROM XboxPackage WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM XboxPackage WHERE Package=? AND _WorkId=0;
DeleteAce
DeleteAce %ls %u %u %u 0x%0x
DeleteAllPackagesFromMainPackageArray
DeleteAllPackagesFromPackageArray
DeleteAppContainerProfile
DeleteAppxMetadataProfile
DeleteContentsInFolderError
DeleteCriticalSection
Deleted
DeletedFolder
DeletedOldPrimaryTile
DeletedUserId
DeleteFile %ls
DeleteFileError
DeleteFileW
DeletePackageInfo
DeleteStagingFolder %u
DeleteUpdatedPackageKey
Deleting expired request for
DeletingDependencyGraph
Dependency
dependency
DependencyArchitecture
DependencyGraph
DependencyGraph::Exists
DependencyGraph::ExistsByDependencyType
DependencyGraph::ExistsBySupplierPackage
DependencyGraph::ExistsByUser
DependencyGraph::ExistsByUserAndDependentPackage
DependencyGraph::ExistsByUserAndDependentPackageAndDependencyType
DependencyGraph::ExistsByUserAndDependentPackageAndDependencyTypeAnd_DependencyGraphID
DependencyGraph::ExistsByUserAndDependentPackageAndHasExternalLocation
DependencyGraph::ExistsByUserAndDependentPackageAndIndex
DependencyGraph::ExistsByUserAndDependentPackageAndSupplierPackage
DependencyGraph::ExistsByUserAndDependentPackageAndSupplierPackageFamilyName
DependencyGraph::ExistsByUserAndDependentPackageFullNameAndHasExternalLocation
DependencyGraph::ExistsByUserAndSupplierPackage
DependencyGraph::Find
DependencyGraph::FindByDependencyType
DependencyGraph::FindBySupplierPackage
DependencyGraph::FindByUser
DependencyGraph::FindByUserAndDependentPackage
DependencyGraph::FindByUserAndDependentPackage_SortedByIndex
DependencyGraph::FindByUserAndDependentPackageAndDependencyType
DependencyGraph::FindByUserAndDependentPackageAndDependencyTypeAnd_DependencyGraphID
DependencyGraph::FindByUserAndDependentPackageAndIndex
DependencyGraph::FindByUserAndSupplierPackage
DependencyGraph::Get
DependencyGraph::GetByUserAndDependentPackageAndSupplierPackage
DependencyGraph::GetMainPackageDependencyByUserAndSupplierPackage
DependencyMinVersion
DependencyName
DependencyPackageApplicabilityStateMap
DependencyPaths
DependencyProviderGuid
DependencyPublisher
DependencyResolverRequeueIgnoredError
dependencyTarget
dependent
dependentPackage
DependentPackageName
DeployInContainer
Deployment
Deployment Operation = 
Deployment operation failed.
Deployment operation has been redirected to target the DefaultAccount.
Deployment pipeline was unexpectedly invoked for operation
DeploymentContextFlags
DeploymentDatabase
DeploymentDatabaseAutoCheckpoint
DeploymentDatabaseCacheSize
DeploymentDatabaseCheckpointThreshold
DeploymentDatabaseFileChunkSize
DeploymentDatabaseJournalSizeLimit
DeploymentDatabaseOptions
DeploymentDatabasePageSize
DeploymentDatabaseStatisticsLastUpdated
DeploymentExtensionHandler
DeploymentHistory
deploymentOperation
DeploymentOperation
deploymentOperation
DeploymentOperation
DeploymentOperationEnumMap
DeploymentOptions
DeploymentOptionsBitMap
DeploymentOptionsHighBitMap
DeploymentPath
DeploymentQueueManage: Conflict comparison for next dequeueable package with operation against executing package with operation
DeploymentQueueManager is at maximum allowed thread count. Treating as conflict
DeploymentQueueManager:
DeploymentQueueManager: Dequeue for operation conflicts with all other requests
DeploymentQueueManager: Dequeue for operation hit conflict in system wide isolation
DeploymentQueueManager: Executing request is not already resolved. Conflict assumed
DeploymentQueueManager: Framework will be modified. Conflict assumed
DeploymentQueueManager: Max concurrent regular deployment request count breached. Conflict assumed
DeploymentQueueManager: Maximum amount of items executing for this user reached. Conflict assumed
DeploymentQueueManager: Maximum number of executing PreRegisterPackageOperation reached. Will not dequeue another one
DeploymentQueueManager: No non-conflicting items in queue to return
DeploymentQueueManager: Skipping because there are restored items in queue and the skipped request has priority lower than InteractiveHigh
DeploymentQueueManager: The currently executing item in conflict with operation
DeploymentQueueManager: This item should run isolated and we can't have multiple types of same per user. Conflict assumed
DeploymentQueueManager: Two non-stage operations happening simultaneously with one bringing dependencies. Conflict assumed
DeploymentQueueManager: User SID already at limit. Conflict assumed
DeploymentQueueManager: Validating deployment request from queue
DeploymentRequestRunningStart
Deployment's currentstate (%d) did progress far enough to pause. Staged state is (%d)
DeploymentServer
DeploymentState
deploymentState
DeploymentState
deploymentState
DeploymentState
DeploymentStateHandlerEnumMap
DeploymentTrace
DeploymentTrace*
deque<T> too long
Dequeable Package
Dequeuable package operation
Dequeue delay: %I64u ms
DequeuerCount
Dequeuing a request that requires flushing previously run request.
DeriveAppContainerSidFromAppContainerName
Description
desiredStatus
desktop4:Subsystem
DeStage
DeStageUserData
Destaging action for package. (Inbox packages will be skipped later.)
DeStaging for rollback: unexpected staging action: %d
DeStaging skipped for inbox app uninstall
DeStaging: : unexpected staging action: %d
Destination Path
DestinationFolderPath
DestinationMediaID
DestinationPath
DestroyAllExcept
DestroyPrivateObjectSecurity
DETACH DATABASE '%s';
DetailedMessageInfo
Details
Details::GetStringValueExpanded(inprocServer32Key.get(), L"", dllPath)
DetectAndFixPrimaryTileUserConstraintUniqueErrors
DetermineDataProtectionLevel %ls
Determining whether to remove package from related set
Developer mode registration package uri is not uri of manifest file.
DevelopmentMode
DEVICEACCESS_DEH_KEYWORD
DeviceAccessVetoReasonMap
DeviceCapabilityHandlerCLSID
DeviceCapabilityName
deviceFamilyName
DeviceId
DeviceIoControl
DeviceName
DevModeResolvedToNotInstalledFramework
DIALPROTOCOL_DEH_KEYWORD
didRead
dimGray
DirectlyServicedPackage
directlyServicedPackagesList
directory
Directory %ws doesn't even exist, so the deployment has not progressed enough to pause
DirectoryExists %ls
DirectoryExists %ls 0x%0x
DirectoryExists %ws
DirtyPackages
Disable
DisableAdminRequirement
DisableBackgroundAutoUpdates
DisableBackgroundAutoUpdates policy enabled
disabled
DisableExternalLocation
DisableMeteredNetworkBackgroundAutoUpdates
DisableThreadLibraryCalls
DisableTraceLoggingSession
DisplayName
DisregardingAUMIDForRelaunchList
DllCanUnloadNow
DllGetActivationFactory
DllSurrogate
Dn~p=8E8
dodgerBlue
Donecore\admin\appmodel\packagerepository\staterepository\repository.cpp
DoNotServicePackageReason
DontMigrateSecondaryTiles
DownlevelInstalled
DownlevelInstalledKeyAlreadyExists
downlevelInstalledPackage
DownlevelMachineDatabase
DownlevelMachineDatabaseAutoCheckpoint
DownlevelMachineDatabaseCacheSize
DownlevelMachineDatabaseCheckpointThreshold
DownlevelMachineDatabaseFileChunkSize
DownlevelMachineDatabaseJournalSizeLimit
DownlevelMachineDatabaseOptions
DownlevelMachineDatabasePageSize
DownlevelMachineDatabaseStatisticsLastUpdated
DOWNLOAD_DEH_KEYWORD
downloadFileCount
DownloadSize
Dq>qn
dR3k[
DropImpersonation
DropImpersonation %ls
DSM_DEH_KEYWORD
dTts*
Duplicate file was not fully streamed. So, it is not available for hard-linking.
DuplicateChannelName
DuplicateHandle
DuplicateTileUniqueId
DuplicateToken
DuplicateTokenEx
DurationMS
DVROptOut
DynamicDependencies: %u packages in use
DynamicDependencies: Update(outdated=%ls, updating=%ls) outdated in use. Moving to actionList.Add(updating)
DynamicDependenciesInUse
E'!E/H
E(A9}
E/!E/
E;H!E?
E@!]@H
e@8t$0
E@H;}
E\$`L
E_NOTIMPL
E_OUTOFMEMORY
E_UNEXPECTED
e`A_A^A]A\]
e<L9eX
E08E tLH
E0H;}
E0H9E
E7!E7f
E8:u(I
E8<$t8L
E89A0u
E8A9A0
E8gPt
E8xPt:
E9)v0
E9c0t H
ED$`H
EDGEHTML.dll
EditFlags
EditionId
EfsOpenFileRawFailed
EfsOpenFileRawFailedAttemptingRetry
EfsOpenFileRawFailedAttemptingRetryForWrite
EfsOpenFileRawInternal
EG!EGf
Egl@&<*
E'H!E'
EHfD;0tlA
EhH9D$8tUL
EHH9E
EHH9G(t*H
ehM;t$
eJX(|J
EkbId
EL@GN@
Elapsed
Element
ElementName
EmbeddedAutoUpdatesStateHandler::Execute()
empty
empty distance tree with lengths
EmX^b
EnableAppAttach
enabled
EnabledFeatureUsage
EnableExternalLocation
EnableExternalVolumes
EnableFileOrFolderEncryption %ws %u
EnablePackageStatusSkipped
EnableTraceEx2
encrypted
Encrypted FileName: %ws
EncryptedFilePreallocationFailedIgnoringError
encryptionAlgorithm
EncryptPackagesFolder %ws %u
EncryptPackagesFolderForVolume %ws %u
EndOfLife
EndOfLife list
EndOfLifePackageList
endswith
EndsWith(*string*,suffix) error: Invalid type (%d)
EndsWith(string,*suffix*) error: Invalid type (%d)
Enqueue cost: %I64u ms
EnqueueSeparateRemoveOperationForUnusedOptionalPackage
EnsureACLOnVolumeAppRoot failed
EnsureRootFolderInheritAclsAreSet
EnsureStoreLicenseForPackageActivation
EnsureStoreLicenseForPackageActivation isn't present, store license check is skipped!
EnterCriticalSection
EnterpriseModernAppManagementAppUpdateSettings
EnterpriseUninstallBlockList
entry.Length
entry.Offset
entry.Tag
entry.Version
EntryPoint
EnumDependentServicesW
EnumDisplayMonitors
EnumerateExtensionNames
EnumPackagesByUserSidInternal
EnumPackagesByUserSidNamePublisherInternal
EnumPackagesByUserSidPackageFamilyNameInternal
EnumProvisionedPackagesInternal
EnumValue %u
EnumVisibilityByPackageFullNameInternal
en-US
EP!8H
epA_A^A]A\]
EqualSid
eraproxyapp.exe
EraVersion
Error
error
Error
error
Error
error
Error
Error in QueryServiceConfig
ERROR_BAD_ARGUMENTS
ERROR_INVALID_DATA
ErrorCode
errorCode
ErrorCode
ErrorCodeDescription
ErrorContext
ErrorContext1
ErrorContext2
ErrorCount
ErrorDescription
ErrorFileInfo
ErrorMessage
errorString
ErrorString
errorString
ErrorText
ETW Event ID = 
EtwEventID
etwEventId
EtwEventRegister
EtwEventUnregister
EtwEventWrite
Evaluate
evaluate
Evaluate Handler failed to figure if a package is an all-user package. Ignoring the error.
EvaluatedPackageStagingAction
Evaluation cost: %I64u ms
EventActivityIdControl
EventData
EventlogDllFamilyPath
EventRegister
EventSetInformation
EventUnregister
EventWriteTransfer
EVNT$
EvtClose
EvtExportLog
EvtGetChannelConfigProperty
EvtOpenChannelConfig
EW@tSD
EwD80
Exception
ExceptionCode
EXCLUSIVE
Executable
ExecutableName
Executing Package
Executing package operation
Executing request operation
execution_flags
ExeHost
ExeServerRegistration
ExeServerRegistration_Impl::Create(serverName, &serverRegistration)
exFAT
existingMiscStatusPropValue->GetString(existingMiscStatus.GetAddressOf())
existingPackage
ExistingPackageEntry
ExistingProjectionId
existingProjectionId
existingPropValue->GetString(existingValue.GetAddressOf())
existingPropValue->GetUInt32(&existingValue)
ExistingRequestState
existingVerbPropValue->GetString(existingVerb.GetAddressOf())
ExitCode
ExitingPackageFullname
ExitProcess
EXL9s`H
ExpandedSQL
ExpandedSQL=%hs
ExpandEnvironmentStringsW
expectedFileSize
expectedLength
ExtendedData
ExtendedErrorCode
Extension DLLs previously loaded.
extensionCatalogContext->CreateExtensionEntry( _contractId.Get(), packageMoniker, _activatableClassId.Get(), _properties)
extensionCatalogContext->RemoveExtensionEntriesForPackage(packageMoniker.Get(), deploymentOperation)
ExtensionHandler
extensionHandler
ExtensionName
extensionRegistration->PendingWriteToStore( packageMoniker.Get(), extensionCatalogContext.Get())
ExtensionsCategoryNames
externalDirectory
ExternalLocation
ExternalMutableDirectory
ext-ms-onecore-appmodel-staterepository-cache-l1-1-0.dll
ext-ms-onecore-appmodel-staterepository-cache-l1-1-3.dll
ext-ms-onecore-appmodel-staterepository-cache-l1-1-4.dll
ext-ms-onecore-appmodel-staterepository-internal-l1-1-3.dll
ext-ms-onecore-appmodel-staterepository-internal-l1-1-6.dll
ext-ms-onecore-appmodel-tdlmigration-l1-1-0
ext-ms-onecore-appmodel-tdlmigration-l1-1-1
ext-ms-onecore-appmodel-tdlmigration-l1-1-1.dll
ext-ms-win32-subsystem-query-l1-1-0
ext-ms-win32-subsystem-query-l1-1-0.dll
ext-ms-win-advapi32-ntmarta-l1-1-0
ext-ms-win-advapi32-ntmarta-l1-1-0.dll
ext-ms-win-appmodel-appexecutionalias-l1-1-0.dll
ext-ms-win-appmodel-appexecutionalias-l1-1-1.dll
ext-ms-win-appmodel-appexecutionalias-l1-1-4.dll
ext-ms-win-appmodel-deployment-l1-1-0
ext-ms-win-appmodel-deployment-l1-1-0.dll
ext-ms-win-appmodel-deployment-l1-1-1
ext-ms-win-appmodel-deployment-l1-1-1.dll
ext-ms-win-appmodel-deploymentvolumes-l1-1-0
ext-ms-win-appmodel-deploymentvolumes-l1-1-0.dll
ext-ms-win-appmodel-deploymentvolumes-l1-1-1
ext-ms-win-appmodel-deploymentvolumes-l1-1-1.dll
ext-ms-win-appmodel-registrycompatibility-l1-1-0
ext-ms-win-appmodel-registrycompatibility-l1-1-0.dll
ext-ms-win-com-ole32-l1-1-0
ext-ms-win-com-ole32-l1-1-1
ext-ms-win-com-ole32-l1-1-1.dll
ext-ms-win-com-ole32-l1-1-2
ext-ms-win-com-ole32-l1-1-3
ext-ms-win-com-ole32-l1-1-4
ext-ms-win-com-ole32-l1-1-5
ext-ms-win-com-ole32-l1-3-0
ext-ms-win-com-ole32-l1-4-0
ext-ms-win-containers-policymanagercli-l1-1-0
ext-ms-win-containers-policymanagercli-l1-1-0.dll
ext-ms-win-containers-policymanagercli-l1-1-1
ext-ms-win-core-app-package-registration-l1-1-0
ext-ms-win-core-app-package-registration-l1-1-1
ext-ms-win-core-app-package-registration-l1-1-1.dll
ext-ms-win-core-storelicensing-l1-1-0
ext-ms-win-core-storelicensing-l1-1-0.dll
ext-ms-win-core-storelicensing-l1-2-0
ext-ms-win-desktopappx-l1-1-0
ext-ms-win-desktopappx-l1-1-0.dll
ext-ms-win-desktopappx-l1-1-1
ext-ms-win-desktopappx-l1-1-2
ext-ms-win-desktopappx-l1-1-3
ext-ms-win-desktopappx-l1-1-4
ext-ms-win-desktopappx-l1-1-4.dll
ext-ms-win-desktopappx-l1-1-5
ext-ms-win-desktopappx-l1-1-6
ext-ms-win-desktopappx-l1-1-7
ext-ms-win-desktopappx-l1-2-0
ext-ms-win-desktopappx-l1-2-1
ext-ms-win-devmgmt-policy-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-0.dll
ext-ms-win-devmgmt-policy-l1-1-1
ext-ms-win-devmgmt-policy-l1-1-2
ext-ms-win-devmgmt-policy-l1-1-3
ext-ms-win-ntuser-windowstation-l1-1-0
ext-ms-win-ntuser-windowstation-l1-1-0.dll
ext-ms-win-ntuser-windowstation-l1-1-1
ext-ms-win-ntuser-windowstation-l1-1-2
ext-ms-win-ole32-bindctx-l1-1-0.dll
ext-ms-win-resources-deployment-l1-1-0.dll
ext-ms-win-resources-languageoverlay-l1-1-0
ext-ms-win-resources-languageoverlay-l1-1-0.dll
ext-ms-win-resources-languageoverlay-l1-1-1
ext-ms-win-resources-languageoverlay-l1-1-2
ext-ms-win-resources-languageoverlay-l1-1-3
ext-ms-win-resources-languageoverlay-l1-1-4
ext-ms-win-resources-languageoverlay-l1-1-5
ext-ms-win-resources-languageoverlay-l1-1-6
ext-ms-win-resources-languageoverlay-l1-1-6.dll
ext-ms-win-resources-languageoverlay-l1-1-7
ext-ms-win-security-efswrt-l1-1-0
ext-ms-win-security-efswrt-l1-1-1
ext-ms-win-security-efswrt-l1-1-2
ext-ms-win-security-efswrt-l1-1-2.dll
ext-ms-win-security-efswrt-l1-1-3
ext-ms-win-security-efswrt-l1-1-4
ext-ms-win-session-usermgr-l1-1-0
ext-ms-win-session-usermgr-l1-1-0.dll
ext-ms-win-session-usermgr-l1-2-0
ext-ms-win-session-usertoken-l1-1-0
ext-ms-win-session-usertoken-l1-1-0.dll
ext-ms-win-session-wtsapi32-l1-1-0
ext-ms-win-session-wtsapi32-l1-1-0.dll
ext-ms-win-session-wtsapi32-l1-1-1
ext-ms-win-shell-shell32-l1-2-0
ext-ms-win-shell-shell32-l1-2-1
ext-ms-win-shell-shell32-l1-2-2
ext-ms-win-shell-shell32-l1-2-3
ext-ms-win-shell-shell32-l1-5-0
ext-ms-win-storage-sense-l1-1-0
ext-ms-win-storage-sense-l1-1-0.dll
ext-ms-win-storage-sense-l1-2-0
ext-ms-win-storage-sense-l1-2-1
ext-ms-win-storage-sense-l1-2-2
ext-ms-win-storage-sense-l1-2-3
ext-ms-win-storage-sense-l1-2-4
ext-ms-win-storage-sense-l1-2-5
ext-ms-win-sysmain-pfapi-l1-1-0.dll
ext-ms-win-wer-reporting-l1-1-0
ext-ms-win-wer-reporting-l1-1-0.dll
ext-ms-win-wer-reporting-l1-1-1
ext-ms-win-wer-reporting-l1-1-2
ext-ms-win-wer-reporting-l1-1-3
ext-ms-win-wevtapi-eventlog-l1-1-0
ext-ms-win-wevtapi-eventlog-l1-1-0.dll
ext-ms-win-wevtapi-eventlog-l1-1-1
ext-ms-win-wevtapi-eventlog-l1-1-2
ext-ms-win-wevtapi-eventlog-l1-1-3
EXTRA
F G`G
f%9,X|
F(D9h,u
F(H;X
F(H9G0wc
F(H9X
f(item.Get())
f;D$ t
f;D$ u
F@H9G8
F<}lf-#X
F0H9F8u)
f5.vpn.client_cw5n1h2txyewy
F8@88t
F89G0u`I;v
F8A!FHI
F8I+F0H
f9*tzH
f9,~u
f9,Au
f9,Hu
f9,Nu
f9,Pu
f9,Qu
f9,Su
f9,Vu
f9,Wu
f9,Yu
f9,zu
f9+tHH
f9<Au
f9<Bu
f9<Cu
f9<Ju
f9<Ku
f9<Pu
f9<pu
f92u#H
f92u,H
f93trH
f94Au
f94Bu
f94Cu
f94Gu
f94Ju
f94Ku
f94Ou
f94Qu
f94Su
f94yu
f99toM
f9T$(t
f9T$(u6@
fa7oP
fA9\M
fA9<Au
fA9<Bu
fA9<Cu
fA9<Hu
fA9<Iu
fA9<Ju
fA9<Ku
fA91t
fA91u
fA94@u
fA94Hu
fA94Iu
fA94Ku
fA96u
fA99t
fA9Z*v#A
Fail to get package from State Repository for ManifestPath %ws
Failed add key to string array for deletion %ws
Failed applying DACL from ApplyPackageDataAccessACLs %ls %ls %ls %d %d
Failed applying SACL from ApplyPackageDataAccessSACL %ls %ls %ls %d %d
Failed applying SACL from ApplyPackageDataAccessSACL taken ownership %ls %ls %ls %d %d
Failed call to GetSystemDirectory/GetSystemWow64Directory2. imageFileMachine=%u
Failed component name = 
Failed in RemoveDirectoryTreeSafelyByHandle for folder %ws
Failed in VerifyIfSecureSystemAppDataFolderAlreadyExists()
Failed loading module at path %ws
Failed performing action on key %ws
Failed Remove of package because it did not contain an optional or a resource package.
Failed to ACL packageroot
Failed to apply ACLs for a hardlink from %ws to %ws
Failed to clean up MovedPackage folder on Rollback cleanup. Ignore failure.
Failed to compare file paths %ls, %ls
Failed to compare payload hashes in UpdateAgentGetDownloadPackageReturnValue
Failed to compute file hash for baseline file: %ls
Failed to convert SID to string
Failed to copy error message from GetAppXError.
Failed to copy error message from GetErrorInfo.
Failed to create a hardlink from %ws to %ws
Failed to create full file name for file %ls
Failed to create full file name for folder %ls
Failed to create full file name for folder search path %ls
Failed to create full name for %ws and %ws
Failed to create full name for folder %ws
Failed to create handle for %ws
Failed to create hardlink from %ws to %ws
Failed to delete hard linked file %ws
Failed to delete key %ws
Failed to delete partially created hardlink target placeholder file %ws
Failed to delete stale indicator file %ws
Failed to delete the file %ws
Failed to enumerate reg key %ws
Failed to Expire and Remove Conflicting Lazy Flush Requests on a dequeueable request. Ignored the failure.
Failed to find resume offset by block hash validation for %ws. Ignore the error and download the whole file instead.
Failed to FindNextFile
Failed to get current timestamp
Failed to get current timestamp due to
Failed to get Error Description
Failed to get file attributes from handle for %ws
Failed to get file attributes from handle for folder %ls
Failed to get file attributes from handle for folder %ws
Failed to get file final path for folder %ls
Failed to get file final path for folder %ws
Failed to get file handle for %ws
Failed to get file handle for file %ls
Failed to get file handle for folder %ls
Failed to get file handle for folder %ws
Failed to get file hardlink information for file %ls
Failed to get file info from State Repository for package: %ws, file: %ws
Failed to get final path for folder %ws
Failed to get handle for %ws
Failed to get handle for folder %ls
Failed to get resume offset for baseline file %ws
Failed to get the VAIL container ID for user from Container Policy Manager.
Failed to initialize ResumeFileInfo for file: %ws
Failed to install catalog file for package %ls, error: 0x%x
Failed to map %ws
Failed to open file %ws with read and write EA permission. Will not set EA.
Failed to open valid baseline file %ws from old package path %ws. Skip BDC update for this file.
Failed to remove existing folder %ws, before creating a new mounted folder of the same name
Failed to remove mounted folder %ws. Ignore failure.
Failed to rename hardlink temp file %ws to %ws
Failed to repair ACLs for  package folder %ws
Failed to repair ACLs for junction %ws
Failed to reset machine register state in the State Repository database for package %ws
Failed to set file delete disposition for file %ls
Failed to set file delete disposition for file %ws
Failed to set file delete disposition for folder %ls
Failed to set file delete disposition for folder %ws
Failed to set file valid ending for file %ws
Failed to set foldingBundleId for package %ws because parent bundle not yet processed. Parent bundle either does not appear in expandedPackageUris list or appears in the list after this child package
Failed to take ownership of %ws
Failed to update existing mounted folder %ws to point to target folder %ws
Failed to update package status. Set online = %d.
Failed to update State Repository Cache
Failed: CheckFileIntegrity failed for file %ws.  Skip hard linking to this file.
Failed: FileExists failed for file %ws. Skip hard linking to this file.
FailedComponentName
FailedGettingTileUniqueIdFromTDL
FailedMigratingSecondaryTilesFromTDL
FailedOpeningBaselineForceCopy
FailedOSIMState
FailedToAddPrimaryTileUser
FailedToApplyInPlaceUpdateDuringRegisterDueToBlockcacheIncomplete
FailedToCreatePrimaryTiles
FailedToDeleteOldTiles
FailedToQIIApplicationActivationClient2
FailedToRegisterTile
FailedToSetUserActivationInfo
FailFast
FailFastBusySnapshot.StatementInProgress: #%u Index=%u Database=%p Statement=%p SQL=%s
FailFastBusySnapshot: Statements Total=%u Busy=%u Database=%p FirstBusySQL=%hs
FailIfNeedsRemediation
Failure
failureCount
FailureHresult
failureId
failureType
FallbackError
false
familiesRootKey.EnumKey failed, %ls, %u.
familiesRootKey.Open failed, %ls
Family Names not found in related set: %ws
FamilyMonikerStringToSid %ls
FamilyName
FAT32
FaultInjection is terminating the process
FaultInjection notify, released notification semaphore
FaultInjection paused, signalled pause event
FaultInjection waiting for restart event finished
FaultInjection->ReadAllConfigurationsFromRegistry
FB&_W
fB9,Bu
fB9,Fu
fB9,Ju
fB9<@u
fB9<Bu
fB9<Hu
fB94{u
fB94au
fB94Cu
fB94Hu
fB94Ku
fB94pu
fC9<Gu
fC94Hu
fD;:A
fD;0u
fD;L$0
fD9!u
fD9"u
fD9#t
fD9$^u
fD9$~u
fD9$Au
fD9$Cu
fD9$Fu
fD9$Gu
fD9$Hu
fD9$Ku
fD9$Nu
fD9$Ou
fD9$qu
fD9$Vu
fD9$Wu
fD9$xu
fD9$zu
fD9,^u
fD9,Au
fD9,Hu
fD9,hu
fD9,Hu
fD9,qu
fD9,Qu
fD9,Vu
fD9:A
fD9:u
fD9?u
fD9|]
fD9}0uIH
fD9}0uLH
fD9<{u
fD9<~u
fD9<Au
fD9<Bu
fD9<Fu
fD9<Gt
fD9<Gu
fD9<Ht0H
fD9<Hu
fD9<Ju
fD9<Ou
fD9<Qu
fD9<Su
fD9<Vu
fD9<Wu
fD9<xu
fD9<Xu
fD9<Yu
fD90t
fD90u8
fD91t(f
fD94_u
fD94Au
fD94Cu
fD94Fu
fD94Hu
fD94Ju
fD94Nu
fD94nu
fD94Qu
fD94Wu
fD94Yu
fD94Zu
fD97u
fD98t
fD98t1f
fD99A
fD99u
fD9d]
fD9DB
fD9dt.t
fD9dU
fD9m@
fD9tE
fD9'u
fD9u@u
fE0R\^
fE9 u
fE9!u
fE9$@u
fE9$F
fE9$Gu
fE9$Iu
fE9$Ju
fE9$Ku
fE9$Nu
fE9$Ou
fE9$Pu
fE9$Wu
fE9,$
fE9,@u
fE9,Du
fE9<@u
fE9<~u
fE9<Au
fE9<Fu
fE9<vu
fE9>L
fE94Hu
fE94Pu
fE98t
fE9TE
featureBaseVersion
FeatureError
featureId
featureStage
FeatureUsage
FeatureVariantUsage
featureVersion
FEbjGb/
FetchDataFromPolicyCache %ls
fF9$@u
fF9$Bu
fF9$Nu
fF9<Au
fF9<Iu
fF9<ru
fF94Bu
fF94Fu
fG|WZ
fG9$^u
fG9,qu
fG9du
fI`G"5*
file error
File hardlink identified in files %ls
File hash does not match the record. File name: %ws
File redirection found for %ws and %ws
File redirection identified in files %ls and %ls
File size does not match the record. File name: %ws, expected file size: %I64d, actual file size: %I64d
File: %ws
file://
file:///
fileAccess
FileCreationTime(UTC): %04hu-%02hu-%02hu %02hu:%02hu:%02hu, LastFileWriteTime(UTC): %04hu-%02hu-%02hu %02hu:%02hu:%02hu, FileSize: %I64u, Attributes: 0x%08lx
FileDescription
FileExists %ls
FileIntegrityStateLessThanFull
FileInUse
FileInUse PFun: %ws, ImageName: %ws, Cmd: %ws, UserSid: %ws, SessionId: %d, PID: %d
FileManager_cw5n1h2txyewy
fileName
FileName
fileName
FileName
fileName
FileName
fileName
filename
fileName
FileName
fileName
FileName
fileName
filename
FileName
fileName
FileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
filename
Filename
fileName
Filename
fileName
Filename
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
Filename: %ws
Filename:%s, SQL:%s, TxCallerId:%hs %ls
FilePath
filePath
FilePath
filePath
FilePath
filePath
FilePath
FilePath: %ws
fileRelativePath
Files
FileSize
Filesize
FileSize
fileSize
Filesize
fileSizeValid
FileSystemEntryExists %ls
FileSystemEntryExists %ls succeeded %u
FileSystemType
FileTimeToSystemTime
FILETYPE_DEH_KEYWORD
FileTypeAssociation
FileVersion
FilterAttach
FilterConnectCommunicationPort
FilterSendMessage
Finalize
FinalizeDeploymentPath
FindByPackageAndCategory
FindByPackageExtension
FindClose
FindFirstFile
FindFirstFile %ws
FindFirstFileExW
FindFirstFileNameW
FindFirstFileW
FindFullNameForFamilyNameInAppxAllUserStore
FindNextFile %llu
FindNextFile %ws
FindNextFileNameW
FindNextFileW
FindPackageByUserSidPackageFullNameInternal
FindPackagesByPackageFamily
firebrick
FirstBusySQL
FirstLine
FirstReportedUptime
FirstReportedWhen
FixAppHiveIfNeeded
FixImpersonationIfNecessary skipped
FixStateLocationsAccess
FixSubFolderAccess %ls
FJgn5
Flags
flags
FLAGS
Flags
FlagsHigh
FlBpTl"rT
floralWhite
FLTLIB.DLL
FlushFileBuffers
Flushing and closing files cost: %I64u ms
Flushing request for packager due to an overlapping force-flush operation.
Folder
folder
Folder %ls
Folder %ls isFullTrust %u hasCentennial %u
Folder %ls user %ls package %ls publisher %ls
Folder %ls user %ls package %ls publisher %ls isFullTrust %u
Folder %ls.
FolderPath
Fonecore\admin\appmodel\common\impersonateself.cpp
Fonecore\admin\appmodel\dependencymanager\dependencymanager.cpp
Fonecore\admin\appmodel\packagemanager\server\appxdownloadprogresshandler.cpp
For PackageFullName
ForceCopyFileResult
Forced flush has been done for a request in lazy flush queue. Deleting from the list.
ForceUpdateFromAnyVersion
ForciblyTerminatedProcess
ForEachExtensionRegistration(extensionRegistrationMap.Get(), [&](Internal::CExtensionRegistration* extensionRegistration) { StringReference packageMoniker(incomingPackage->GetPackageMoniker()); RETURN_HR(extensionRegistration->PendingWriteToStore( packageMoniker.Get(), extensionCatalogContext.Get())); })
ForegroundText
forestGreen
forInPlaceUpdate
FormatApplicationUserModelId
FormatMessageW
ForMove
found
Found a request from a different user that requires force flushing.
Found an expired request in lazy flush queue. Deleting from the list.
Found Embedded AutoUpdate AppInstaller File
Found existing request in queue to attach to for the new request
Found package in related set
Found running app
FoundApplicationForPrimaryTileRemoval
FoundApplicationForSecondaryTileRemoval
FoundConstraintViolationApplicationIdentity
FoundConstraintViolationTileUniqueIdDifferentUser
FoundConstraintViolationTileUniqueIdSameUser
FoundDifferentVersionOfSamePackage
FoundPackageInCoservicedSet
FoundRemovedApplicationIdentity
FoundState
FoundUnmatchingOptionalBundleVersion
fox0K/
FPa.:
fq\7~
framework
Framework
framework
Framework
FrameworkCannotUpdateOtherPackageDueToFullName
FrameworkPackage
FrD'wCrU
FreeApplicabilityContext
FreeApplicablePackages
FreeLibrary
FreeSid
FreeUserTokensForMultiUserSession
fuchsia
FullFilePath
FullName
FullTrust
fullValidation
function
FunctionType
Fw]Ue
G H9G
G L9e
G()p(H
G,A_A^A]A\_^][
G@H9D$ t
G@H9GP
G@H9GPt
g]7i8
G~&$,9&
G09C0t
G6?lYi
G8H9E
gainsboro
gamecoreproxyapp.exe
Gap: %I64u ms
GCChangelogsInterval
GCTimeToLiveExpiredInterval
GD$HI
gD8t$St 
GenerateBytecodeForPackageImplementation
GenerateBytecodeForPackagesImplementation
GEOLOCATION_DEH_KEYWORD
get_attributes
get_nodeValue
GetAccess
GetAccess %ls
GetAce
GetAce %ls %u
GetAce %ls %u %u
GetACFolderPath
GetActivationFactory( Wrappers::HStringReference(RuntimeClass_Windows_Foundation_PropertyValue).Get(), &_propertyValueFactory)
GetActivationFactory((Windows::Internal::String&)propertyValueId, &_propertyValueFactory)
GetActivationFactory((Windows::Internal::String&)propertyValueId, &registration->_propertyValueFactory)
GetActivationStoreFolderPath
GetAddPublisherArray
GetAgeRating
GetAllInboxPackages
GetAllNonInboxPackagesFromRegistryStore
GetAllPackagesToBeInstalledForSetupPhase
GetAllUpdatedPackages
GetAppDataFolderPath
GetAppExecutionAliasApplicationType
GetAppExecutionAliasExecutableEx
GetApplicability called for bundle
GetApplicability5 called
GetApplicability5Implementation
GetApplicabilityEx called
GetApplicabilityFactory
GetApplicabilityForPackageImplementation
GetApplicabilityForSpecificVersion called
GetApplicabilityImplementation
GetApplicablePackages
GetApplicablePackagesForUserWithAppChosenResources
GetApplicationUserModelIdFromToken
GetAppModelVersion
GetAppxDataRootPath
GetAppXError failed with error
GetAppXError reports there is no error; checking COM error info
GetAppXLogMessageFromDataFailure
GetByPackageFullName %ls
GetByteCodeCachePath
GetCanonicalMergedPriFileNameForPackages
GetCategories
GetCategoryIsGame
GetChanges() called but !db.IsOpen()
GetCurrentProcess
GetCurrentProcessId
GetCurrentThread
GetCurrentThreadId
GetCurrentUserSid %u
GetDeltaInfoW
GetDeploymentError
GetDeploymentVolumeFlagsForPackageRoot
GetDownlevelInstalledPackageForUser
GetDriveTypeW
GetEffectivePackageStatusForUser
GetEffectivePackageStatusForUserSid
GetEffectiveToken %ls
GetEncryptedStreamingReader
GetErrorInfo
GetErrorInfo failed with undocumented error
GetErrorInfo reports there is no error object to return
GetExitCodeProcess
GetExtensionProperty
GetFileAttributesExW
GetFileAttributesW
GetFileInformationByHandle
GetFileInformationByHandleEx
GetFileSecurity %u
GetFileSecurityW
GetFileSizeEx
GetFileTime
GetFileType
GetFileVersionInfoExW
GetFileVersionInfoSizeExW
GetFinalPathNameByHandleW
GetGenericKeyEncryptionHeader
GetHasAnyClasses(&hasAnyClasses)
GetHasCentennial
GetHasCentennial %ls user %ls package %ls
GetHasCentennial Root %ls
GetHivePath
GetHivePath %u
GetHivePath %u size %u
GetInprocServer32Properties(WhichHive::LocalMachine, __uuidof(PackagedInprocClassVirtualizationManager), &g_virtualizationManagerDllPath)
GetLastError
GetLastInsertRowID() called but !db.IsOpen()
GetLegacyTargetPlatformInfo
GetLengthSid
GetLocalTime
GetManifestReaderFromPath %ls
GetMergedSystemPriEx
GetModuleFileNameA
GetModuleFileNameW
GetModuleHandleExA
GetModuleHandleExW
GetModuleHandleW
getNamedItem
GetNamedSecurityInfo %ls
GetNamedSecurityInfo %ls returned null dacl.
GetNamedSecurityInfoW
GetNativeSystemInfo
GetNonExactManifestReader
GetOptOutOfBackupRestore
GetOptOutOfDVR
GetOptOutOfSD
GetOrCreatePriFileForAvailablePackages
GetOverlappedResult
GetPackagedFileAbsolutePath(incomingPackage, _exeServerPath.Value.GetRawBuffer(nullptr), _exeServerAbsolutePath)
GetPackagedFileAbsolutePath(incomingPackage, _properties.DefaultIcon.Value.GetRawBuffer(nullptr), _defaultIconAbsolutePath)
GetPackagedFileAbsolutePath(incomingPackage, _properties.DllPath.Value.GetRawBuffer(nullptr), _surrogateDllAbsolutePath)
GetPackagedFileAbsolutePath(incomingPackage, _properties.ToolboxBitmap32.Value.GetRawBuffer(nullptr), _toolboxBitmap32AbsolutePath)
GetPackagedFileAbsolutePath(incomingPackage, GetInprocHandlerDllForArchitecture(architecture).GetRawBuffer(nullptr), _inprocHandlerAbsolutePaths.*(architecture.PerArchitectureDllPath))
GetPackagedFileAbsolutePath(incomingPackage, GetInprocServerDllForArchitecture(architecture).GetRawBuffer(nullptr), _inprocServerAbsolutePaths.*(architecture.PerArchitectureDllPath))
GetPackageFamilyNameFromFullName %ls
GetPackageFilesDiskUsageImplementation
GetPackageFilesDiskUsagePerVolumeImplementation
GetPackageFullName
GetPackageFullNameFromToken
GetPackagesByPackageFamily
GetPackageSetupPhase
GetPackagesRootLocationFromStateRoot
GetPackageStatus
GetPackageStatusForUser
GetPackageStatusForUserSid
GetPackagesThatMayNeedPreinstallPackageStatusMarked
GetPackageVolumeSisPath
GetPersistedRegistryLocationW
GetProcAddress
GetProcessHeap
GetProcessMitigationPolicy
GetProcessTimes
GetProcessWindowStation
GetProfileType
GetProtectionLevelForPackage %ls
GetPublisher %ls
GetPublisherFolders
GetPublisherFolders %ls
GetPublisherRoot %ls
GetPublisherRootFolder
GetPublisherRootFolder %u
GetRealStateRootPath
GetRealStateRootPath %ws
GetScaleFactorForMonitor
GetSchemaContext
GetSchemaContext %ls
GetSecureSystemAppDataFolder
GetSecureSystemAppDataFolderPath
GetSecurityDescriptorDacl
GetSecurityDescriptorDacl %ls
GetSecurityDescriptorOwner
GetSecurityDescriptorSacl
GetSecurityInfo
GetSessionIdsOwnedByUser
GetSessionUserSidQueryTokenFailed
GetSet
GetSettingName %ls %u
GetSettingValue %ls %u
GetSharedLocalFolder
GetSidSubAuthority
GetSidSubAuthorityCount
GetStagedPackageOrigin
GetStagedPackagePathByFullName
GetStateFolder
GetStateFolderPath %ls persist %u
GetStateFolderPath %u
GetStateRepositoryPackageInformation
GetStateRootFolder
GetStateRootFolder %u
GetStateRootPath %ws i %u
GetStateRootPath %ws size %u
GetStateRootPathInternal
GetStateRootSubfolderPath SETTINGS
GetStateSettingsFolder
GetStateSettingsFolderPath
GetStateSettingsFolderPath %ls
GetStorageDeviceInfo
GetStorageInstanceCount
GetStringValue %ws
GetSubfolderPath %ws size %u
GetSystemAppDataFolder
GetSystemAppDataFolder %u
GetSystemAppDataFolderPath
GetSystemAppDataKey
GetSystemAppDataKey %ls
GetSystemDirectoryW
GetSystemFileAbsolutePath(_executableArchitecture, _exeServerPath.Value.GetRawBuffer(nullptr), _exeServerAbsolutePath)
GetSystemInfo
GetSystemMetadataPathForPackage
GetSystemMetadataPathForPackageFamily
GetSystemPowerStatus
GetSystemPreferredUILanguages
GetSystemSisManifestPathFromPackageFullName %ls
GetSystemStateRoot %ls
GetSystemTimeAsFileTime
GetSystemWow64Directory2W
GetSystemWow64DirectoryW
GetTarget %ls
GetTarget %ls persist %u
GetTempFileNameW
GetTempPath2W
GetTempPathW
GetThirdPartyAppRating
GetThirdPartyAppRatingCount
GetThreadInformation
GetTickCount64
GetTileUniqueIdFromTDL
Getting family name for package %ws failed. Continuing to next package.
Getting Main Package indexed row failed
Getting related set
Getting UserSidString for package %ws failed Continuing to next package.
GetTokenInformation
GetTotalChanges() called but !db.IsOpen()
GetUpgradePackageVolumeKey
GetUserProfileFolderPath
GetUserProfileFolderPath %u
GetUserTokenAndCheckDirectoryExistence %ls %ls %ls %ls %ls
GetUserTokenAndCheckDirectoryExistence %ls %u
GetUserTokensForMultiUserSession
getValueResult
GetVersionExW
GetVirtualizationManagerDllFilename(&virtualizationManagerDllFilename)
GetVolumeFromSubpath
GetVolumeInformationByHandleW
GetVolumeInformationW
GetVolumeMediaId
GetVolumeMountPointForVolume
GetVolumeNameForVolumeMountPointW
GetVolumePathNamesForVolumeNameW
GetVolumePathNameW
GetWindowsDirectoryW
gfffA
gffffff
ghostWhite
gIkL_D
Global\
GlobalMemoryStatusEx
GNHcK(A
goldenrod
gonecore\admin\appmodel\PackageManager\Server\ArgumentHelpers.hpp
Got error message from GetAppXError
GPL9<
GpL9<
gq[88NW
green
greenYellow
group
Gt f9U
GT9CTt;
GuidString::GuidString
GXL9GPt
H !X M
H .}.
H ATAUAWH
h h"h$
H SVWH
H UATAUAVAWH
h UAVAWH
H UAVAWH
h UAVAWH
H UWAVH
h VWAVH
H WATAUAVAWH
H WAVAWH
H!\$(L
H!\$0
H!\$0!\$(
H!\$03
H!\$0H!\$(H!\$ 3
H!\$83
H!\$HH
H!]@H
H!]@L
H!]0L
H!]HL
H!]pH
H!]PL
H!|$ E3
H!|$(!|$ E3
H!|$8H!|$0H!|$(H!|$ 3
H!|$PH
H!} I
H!}@E3
H!}0H
H!}HH
H!}PH
H!C(H
H!D$(H!D$ L
H!D$@
H!E8I
H!E'H
H!EwH
H!h(H
H!L$03
H!t$ E3
H!t$(E3
H!t$(L
H!t$@H
H!t$8H!t$0H!t$(H!t$ 3
H!t$XA
H!X L
H!y H
H#EX@
H#L$`H
H#T$`H
H#U8H
H$060
H(/:/
h*u8\%
H;\$@s8H
H;\$`r
H;\$Hs[H
H;\$hu
H;\$p
H;\$ps
H;\$X
H;\$Xs7M
H;]0r
H;]Pt|L
H;^(r
H;^`sF
H;_`I
H;_`r
H;_8r
H;_Pr
H;_pr
H;_Pr
H;_ps!H
H;{ r
H;{0r
H;{8r
H;|$@
H;|$@r
H;|$`
H;|$`r
H;~ r
H;~`r
H;~`sy
H;=qn
H;D$@u 3
H;D$`t'H
H;D$0s
H;D$pt'H
H;D$xs
H;D$Xt
H;D$Xw
H;E`w
H;E0r
H;E8t
H;G u
H;Ghr
H;H(r
H;H(r0I
H;Hhr
H;Hhr0I
H;Hhr2I
H;hpr
H;Jhr
H;L$ 
H;n`r
H;npr
H;OhsE
H;OhsR
H;Q0s
H;S(v
H;s`r
H;sps<H
H;t$@w=A
H;T$`r
H;t$hwGA
H;t$x
H;w r
H;w(r
H;w0r
H;w0s
H;wpr
H;wpsMH;spsGH
H;X(r
H;x(r
H;XHr
H;xHr
H;XHr
H;xHr
H;xHs
H@/R/
H\!U4
H_^[]
H+\$x
H+1H+
H+CXH
H+D$ u
H+D$(H
H+D$(u
H+D$0H
H+D$0u
H+D$8H
H+EPH;
H+L$(H
H+L$hH;
H+M H;
H+P0H
H<0N0
H09O0t
h5!wE
H89L$Pu
H8H9K8
H9)t0H
H9/sDH
H9;s!
H9;u9H
H9\$`u H
H9\$xu
H9]xw
H9^0tGH
H9_8v>H;_8r
H9_ht^
H9_Pv
H9_Pv-H;_Pr
H9_pv-H;_pr
H9{ v
H9{0v
H9{8v
H9|$`
H9|$`tQ
H9} t|
H9}(tl
H9}@t
H9}@u>L
H9}@uDL
H9}@uFL
H9}@uJL
H9}0v#D
H9}hu
H9}Hu
H9}hu
H9}Xt
H9}Xu<L
H9}XuDL
H9}XuFL
H9}XuJL
H9~(w
H9~`u<@8
H9>t4H
H90t-L
H97t*H
H97u%H
H98u%H
H98uiH
H98ujH
H99t$H
H9A A
H9C0s,
H9D$`
H9D$`u
H9D$p
H9D$x
H9D$Xu
H9E0t}
H9Egr
H9H8rHI
H9L$pt!L
H9L$pt$L
H9n`v
H9o`v
H9p(w
H9q(v
H9q`v
H9s(w
H9t$@
H9t$Ht
H9t$ps
H9u t
H9u u5
H9uwu"
H9wPu
H9wXu
H9X(t6H
H9X(v
H9x(vpH;x(r
H9X(w
H9XHvYH
H9y v
HA^_[]
HA^_^[
hA_A^_^[]
HA_A^A]A\_^[]
hA_A^A]A\_^[]
hA_A^A]A\_^][
HA_A^A]A\_^][
HamConnectForServicing
HamDisconnectForServicing
hamHandle
HamServicingClosePackageHandle
HamServicingEnableServicing
HamServicingOpenPackageHandle
HamServicingQueryActiveAppsInPackage
HamServicingTerminatePackage
hardlinkCost
HardlinkData File: %ws Hardlink: %ws
HardLinkedCount
HardLinkedSizeKB
Hardlinking evaluation cost: %I64u ms
hasAnyClasses
hasBlockCacheFile
HasCentennial
hasDependents
HasExternalLocation
HasFullTrust
hash_base32
hash_base32() doesn't support double (%d)
HashDigestLength
Hasher.GetDigestAsBase32(text) failed
Hasher.Start() failed
Hasher.Update(integer) failed
Hasher.Update(text) failed
HasSwitchedToStub
HasWin32alacarte
hasWindowsRTEKU
HB7Xzz
Hc\$@
Hc\$@E
HcA$H
HcD$@
HcF D8d8H
HcG H
HcI(H
HcK(A
HcK(H
HcM H
HcQ(H
HcT$ HcL$$H
hD8l$0
HeaderAddr
HeapAlloc
heapBuffer
HeapFree
Helium
Helium\Cache
HELPDIR
HHH;^
hhH;w0r
Hl0~0
hMZ7y
honeydew
HostingModel
HostRuntime
HostRuntimePackageFullName
hotPink
HoursBetweenUpdateChecks
Hp<LHv<
hplf9
HR DelayUntilReboot
HR MoveFile
hrDuplicateString
hresult
HResult
hresult
HRESULT
hresult
HResult
hresult
HResult
hresult
HResult
hresult
HResult
hresult
HResult
hresult
HResult
hresult
HResult
hresult
HResult
hresult
HRESULT
hresult
HResult
hresult
HResult
hresult
HRESULT
hresult
HRESULT
hresult
HResult
hresult
HRESULT
hresult
HRESULT
hresult
HResult
hresult
HResult
hresult
HResult
hresult
HRESULT_FROM_WIN32(13L)
HRESULT_FROM_WIN32(160L)
HresultCode
hrInsert
hrLookup
hrPendingWrite
hrput_AppUserModelId
hrReadEntry
hrRemove
hrRuntimeClassInitialize
hrSetCommandLine
hrSetExePath
HS"1?
HS_PACKAGE_HANDLE_ENTRY destructor
HS_PACKAGE_HANDLE_ENTRY::Create
HS_PACKAGE_HANDLE_TABLE created
HS_PACKAGE_HANDLE_TABLE::Cleanup
HS_PACKAGE_HANDLE_TABLE::Create
HS}Z<
HsPkgEntryChangeBiPackageState
HT0f0
http://schemas.microsoft.com/appx/2013/appxprovisionpackage
http://schemas.microsoft.com/appx/manifest/desktop/windows10/6
http://schemas.microsoft.com/appx/manifest/desktop/windows10/8
http://www.w3.org/2001/04/xmlenc#sha256
Hu2fD9
HV@k>
HX/j/
Hx?)r
i#Ked
I#u0H
I*VwZ
I;^0r
I;~`r
I;w`r
I;w8r
I;w8sW
I\$PH
I_QueryTagInformation
i{Mt.
i8\$Hta
I9}hu%
I9>t$H
I94$u=H
I96txI
I98v(H
IcI(H
IcJ(H
IcK(f
IcQ(fA
ID#V(
ID$`H
ID$XH
ID8egu"3
IdentifyUserNameInPath %ls
IdentifyUserNameInPath %ws
IdleTaskInProgress
ifexec
Ignore RegistrationStateHandler Error In UserProfileDeletionScenario
ignoredPackageFullName
Ignoring bundle package without main or optional
Ignoring destaged package
Ignoring error from BiPackageChangeState
Ignoring failure in CoCreateInstanceInSession because session has been terminated
Ignoring failure in CoCreateInstanceInSession--this failure indicates sihost.exe and PLM are not accessible at this time
Ignoring failure in CoCreateInstance-this failure indicates CLM is not accessible at this time
Ignoring failure in MigrateCustomData as either outdated package or updating package is attached.
Ignoring failure to delete OSRollback packages registry
Ignoring failure to delete the recovery file for package %ws
Ignoring failure to delete the stale bytecode cache file %ws.
Ignoring failure to DisablePackageForReset for %ws
Ignoring failure to get file size for %ws
Ignoring failure to Inform PLM of Reset for %ws
Ignoring failure: CleanupSpecificVolumeForPackageFamilyIfNeeded
Ignoring optional package - did not find an indexed package row
Ignoring optional package - failed to get package row
Ignoring optional package -- unable to get optional package row
Ignoring package because of invalid related set update, picking another package instead
Ignoring paused optional package
Ignoring paused package
Ignoring protection level %u for %ls.
Ignoring unsupported protection level %u for %ls.
IgnoringPLMErrorBecauseUserClosedSession
IgnoringSkippableFramework
iHH;u
IIDFromString
Image
imageName
ImagePath
Impersonate %ls %ls
Impersonate %ws
ImpersonateLoggedOnUser
ImpersonateSelf
Implemented Categories
implementedCategoryKeyValuePair->get_Key(&implementedCategory)
ImplementsContentRestrictions
Inbox package %ws not set to Paused as Deployment does not stage these files
InboxApplications
InboxPackageFullNameDoesNotMatchManifest
include
IncomingPackage
incomingPackage
incomingPackage->GetMainPackageFamilyMoniker(executionPackageFamily)
incomingPackageFullName
IncomingPackageInstallOrder
IncomingPackageIsUpdate
IncomingPackageName
incompatible version
incomplete distance tree
incomplete dynamic bit lengths tree
incomplete literal/length tree
incorrect data check
incorrect header check
IncrementCurrentTicks %llu
IncrementPackageStatusVersion
Index
Index %u %u
INDEXEDDB_DEH_KEYWORD
Indexing cost: %I64u ms
indianRed
indigo
Indirections
IndirectlyServicedPackage
indirectlyServicedPackagesList
ineID
Information
InfoTip
Ingoring error for CdplProtectFileToLevelWithResult(%ls)
InitialInstallTime
Initialize
InitializeAcl
InitializeCriticalSectionEx
InitializeFromString %ws path %ws
InitializeProcThreadAttributeList
InitializeSecurityDescriptor
InitializeSListHead
InitializeSRWLock
InitOnceBeginInitialize
InitOnceComplete
InPlaceFileInfo
InPlaceUpdate
InPlaceUpdatePendingForPackagedService
InPlaceUpdateStatus
inProcessMediaExtension
InprocHandler32
InprocServer32
InputPackageFullName
INSERT INTO Activation (_Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?);
INSERT INTO AppExecutionAlias (_Revision, _WorkId, Alias, Extension, Flags, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO AppExtension (_Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO AppExtensionHost (_Revision, _WorkId, Extension, Name, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO AppInstaller (_Revision, PackageFamily, Uri, Version, LastChecked, CheckUpdateInterval, Flags, PauseUntil, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO AppInstallerUri (_Revision, AppInstaller, UriType, "Index", Uri, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO Application (_Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO ApplicationBackgroundTask (_Revision, _WorkId, Type, Extension, "Index", _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO ApplicationContentUriRule (_Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO ApplicationExtension (_Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO ApplicationProperty (_Revision, _WorkId, Application, "Index", Name, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO ApplicationUser (_Revision, _WorkId, User, ApplicationIdentity, Application, Package, PackageUser)SELECT 1, ?2, pu.User, ai._ApplicationIdentityID, a._ApplicationID, pu.Package, pu._PackageUserID FROM PackageUser AS pu INNER JOIN Application AS a ON a.Package=pu.Package INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId WHERE pu._PackageUserID=?1   AND (pu._WorkId=0 OR pu._WorkId=?2) AND (a._WorkId=0 OR a._WorkId=?2);
INSERT INTO ApplicationUser (_Revision, _WorkId, User, ApplicationIdentity, Application, Package, PackageUser)SELECT 1, ?2, pu.User, ai._ApplicationIdentityID, a._ApplicationID, pu.Package, pu._PackageUserID FROM PackageUser AS pu INNER JOIN Application AS a ON a.Package=pu.Package INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId WHERE pu.Package=?1   AND (pu._WorkId=0 OR pu._WorkId=?2) AND (a._WorkId=0 OR a._WorkId=?2);
INSERT INTO AppService (_Revision, _WorkId, Name, Extension, "Index", _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO AppUriHandler (_Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO AppUriHandlerGroup (_Revision, _WorkId, Name, Extension, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO AppxExtension (_Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO AppxManifest (_Revision, _WorkId, Package, Xml, _Dictionary) VALUES(?,?,?,compress(?),?);
INSERT INTO AutoUpdatePackage (_Revision, PackageFamily, Architecture, Version, PackageType, Flags, Uri, AppInstaller, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO Bundle (_Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary) VALUES(?,?,?,?,?,?,?);
INSERT INTO BundlePackage (_Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO BundleResource (_Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary) VALUES(?,?,?,?,?,?,?);
INSERT INTO ContentGroup (_Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO ContentGroupFile (_Revision, _WorkId, ContentGroup, File, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO DefaultTile (_Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO Dependency (_Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO DependencyGraph (_Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary) SELECT _Revision, ?2, ?1, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE _DependencyGraphID=?1 AND _ShadowId=0 AND NOT EXISTS(SELECT 1 FROM DependencyGraph WHERE _ShadowId=?1 AND _WorkId<>0 LIMIT 1);
INSERT INTO DependencyGraph (_Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary) VALUES(?1,?2,?3,?4,?5,?6,?7,?8,?9,?10);
INSERT INTO DeploymentHistory (_Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary) VALUES(?,?,?,?,?,?,?);
INSERT INTO File (_Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO FileTypeAssociation (_Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO HostRuntime (_Revision, _WorkId, HostId, PackageExtension, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO MrtApplication (_Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO MrtPackage (_Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO NamedDependency (_Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO OptionalBundle (_Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO OptionalBundlePackage (_Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO OptionalBundleResource (_Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary) VALUES(?,?,?,?,?,?,?);
INSERT INTO Package (_Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO PackageExtension (_Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO PackageExternalLocation (_Revision, _WorkId, User, Package, Path, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO PackageFamily (_Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary) VALUES(?,?,?,?,?,?,?);
INSERT INTO PackageIdentity (_Revision, PackageFamily, PackageFullName, _Dictionary) VALUES(?,?,?,?);
INSERT INTO PackageLocation (_Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO PackagePolicy (_Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO PackageProperty (_Revision, _WorkId, Package, "Index", Name, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO PackageSourceUri (_Revision, _WorkId, Package, Uri, Kind, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO PackageSuperceded (_Revision, PackageIdentity, User, _Dictionary) VALUES(?,?,?,?);
INSERT INTO PackageUser (_Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO PackageUserStatus (_Revision, PackageIdentity, User, Status, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO PrimaryTile (_Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?);
INSERT INTO PrimaryTileUser (_Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO Protocol (_Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO PublisherCacheFolder (_Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO Resource (_Revision, _WorkId, Package, "Index", Language, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO SecondaryTile (_Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO SecondaryTileUser (_Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?);
INSERT INTO Sequence (Id, LastValue) VALUES(?,?);
INSERT INTO SharedPackageContainer (_Revision, _WorkId, Id, Name, User, Status, _Dictionary) VALUES(?,?,?,?,?,?,?);
INSERT INTO SharedPackageContainerPackageFamily (_Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO SRHistory (_Revision, "Action", Flags, PackageIdentity, User, ActivityId, HResult, WhenOccurred, SequenceId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?);
INSERT INTO SRJournal (_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 14 /*ApplicationUser*/, 1 /*Add*/, pu._PackageUserID, pu.User, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), ?1 AS SequenceId FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName INNER JOIN Application AS a ON a.Package=p._PackageID INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId WHERE a._ApplicationID=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3);
INSERT INTO SRJournal (_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 14 /*ApplicationUser*/, 1 /*Add*/, pu._PackageUserID, pu.User, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), ?1 AS SequenceId FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName INNER JOIN Application AS a ON a.Package=p._PackageID INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId WHERE a._ApplicationID=?2 AND pu._WorkId=0 AND p._WorkId=0 AND a._WorkId=0;
INSERT INTO TargetDeviceFamily (_Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO User (_Revision, UserSid, _Dictionary) VALUES(?,?,?);
INSERT INTO WowDependencyGraph (_Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary) SELECT _Revision, ?2, ?1, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE _WowDependencyGraphID=?1 AND _ShadowId=0 AND NOT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE _ShadowId=?1 AND _WorkId<>0 LIMIT 1);
INSERT INTO WowDependencyGraph (_Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary) VALUES(?1,?2,?3,?4,?5,?6,?7,?8,?9,?10);
INSERT INTO XboxPackage (_Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
INSERT OR IGNORE INTO ApplicationUser (_Revision, _WorkId, User, ApplicationIdentity, Application, Package, PackageUser)SELECT 1, ?2, pu.User, ai._ApplicationIdentityID, a._ApplicationID, pu.Package, pu._PackageUserID FROM PackageUser AS pu INNER JOIN Application AS a ON a.Package=pu.Package INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId WHERE pu._PackageUserID=?1   AND (pu._WorkId=0 OR pu._WorkId=?2) AND (a._WorkId=0 OR a._WorkId=?2);
Insertable
InsertPackageToDestagePackageList
Installed main package found, bundle is reinstall
Installed resource package set is not a subset of the combined user and system applicable resource package sets, so it is Installable because a package needs to be removed.
InstalledLocation
InstalledPackagedAppsRevision
installedPackageFullName
InstallPackageList
insufficient memory
IntegrityLevel
integrityResult
integrityState
intentPackageFamilyOrFullName
IntentPackageFamilyOrFullName
intentPackageFullName
Interactive User
Interface
InterfaceIdentifier
InterlockedFlushSList
InterlockedPopEntrySList
InterlockedPushEntrySList
Internal::GetPackagedFileAbsolutePath(incomingPackage, _properties.Executable.Value.GetRawBuffer(nullptr), surrogateExecutableAbsolutePath)
Internal::GetPackagedFileAbsolutePath(incomingPackage, _properties.HelpDirectory.Value.GetRawBuffer(nullptr), absolutePath)
Internal::GetPackagedFileAbsolutePath(incomingPackage, _properties.Win32Path.Value.GetRawBuffer(nullptr), absolutePath)
Internal::GetPackagedFileAbsolutePath(incomingPackage, _properties.Win64Path.Value.GetRawBuffer(nullptr), absolutePath)
Internal::GetPackagedFileAbsolutePath(incomingPackage, GetDllPathForArchitecture(architecture).GetRawBuffer(nullptr), dllAbsolutePath)
Internal::GetSystemFileAbsolutePath( _properties.SystemExecutableArchitecture.Value, _properties.Executable.Value.GetRawBuffer(nullptr), surrogateExecutableAbsolutePath)
InternalName
Intersecting directories (%ws and %ws) are not supported
invalid bit length repeat
invalid block type
invalid distance code
invalid hash bucket count
invalid literal/length code
invalid stored block lengths
invalid vector subscript
invalid window size
invalidPackage
IoPriority
iot2:Subsystem
is_srjournal_enabled
is_triggers_enabled
IsAppx
isCacheFileTailBlockResult
IsCentennial
IsCleanupTaskComplete
isCoServicedSet
IsDebuggerPresent
IsDeveloperModeEnabled
IsDevMode
isDiffusionEnabled
isEncrypted
IsEncrypted %ws
IsErrorFatal 0x%0x %ls
IsEvtExportLogPresent = 
isForSpecificUser
IsImpersonating
IsInAutoCommitMode() called but !db.IsOpen()
IsInbox
IsInboxPackage
IsInboxPackageAndPath
IsInPlaceUpdate
IsInRelatedSet
isInRelatedSetFamily
IsInstalled
IsLOBApp
IsLocalExperiencePackReadyForRemoval
IsMain
isMigration
IsMounted %ls
IsMounted %ls persist %u
IsNonInboxAllUserPackage
IsNonInboxAllUserPackageSpecificPackage
isOnSystemVolume
IsOptional
IsPackageDowngrade
IsPackageEncrypted
IsPackageEndOfLife
IsPackageInDownlevelInstalledKey
IsPackageInEndOfLifeKey
IsPackageInStagedKey
IsPackageInstalledInternal
IsPackageInUpgradeKey
IsPackageOnPreinstalledVolume
isPackageRequired
IsPackageUsingBDC
IsPreThresholdDesktop
IsPreThresholdPhone
IsProcessorFeaturePresent
IsQueueEmpty
isRequired
isSessionLocked
IsSideloadingEnabled
IsStreamingPackage
IsStubApp
IsTest
IsValidSid
IsWellKnownSid
IsWPTestEkuSigningAllowed
IsXAP
It$XH
iterator->get_Current(&item)
iterator->get_HasCurrent(&hasCurrent)
iterator->MoveNext(&hasCurrent)
ivory
J#%0>
J(I9H(r
JD9e@t
JJ``4o
journal_mode
journal_size_limit
Jp<,J%
JuniperNetworks.JunosPulseVpn_cw5n1h2txyewy
k VWAVH
K32EnumProcesses
Keeping package from related set because this is a repair operation.
Keeping package in related set because it is the main package and hasn't been installed yet.
Keeping package in related set because the user has the package family installed.
Keeping package in related set due to non-OK package status
Keeping package in related set due to not-installed deployment state
KeepingOptionalPackageBecauseMainStillInstalled
kEH<A
kernelbase.dll
Kernel-OneCore-VailGuest
Key %ls index %u
KeyID
keyId
keyIdSize
KeyName
keyValuePair->get_Key(clsid.ReleaseAndGetAddressOf())
keyValuePair->get_Key(iid.ReleaseAndGetAddressOf())
keyValuePair->get_Value(&classInterface)
keyValuePair->get_Value(&itf)
keyValuePair->get_Value(&proxyStub)
keyValuePair->get_Value(&serverInterface)
khaki
kMHYz[
kMHYzn
'ku9QUg
KYV}^
L!d$0E3
L!d$0H
L!L$ 3
L!t$xD!
L#s0M
L#u0M
L#v0M
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
L$ H;
L$ H+L$PH
L$ H3
L$ Ic
L$ SH
L$ SUVWH
L$ SVWAVH
L$ SVWH
L$ SWH
L$ UAVAWH
L$ UH
L$ USVWATAUAVAWH
L$ USVWAVH
L$ UVATAVAWH
L$ UVWATAUAVAWH
L$ UVWAUAVH
L$ UVWH
L$ UWATAVAWH
L$ UWAVH
l$ VWATAUAVAW
l$ VWATAVAWH
l$ VWAUAVAWH
L$ VWAUAVAWH
l$ VWAUAVAWH
L$ VWAVH
l$ VWAVH
L$ VWAVH
l$ VWAVH
L$ VWAVH
l$ VWAVH
L$ VWAVH
l$ VWAVH
L$ VWAVH
l$ VWAVH
L$ VWAVH
l$ VWAVH
L$ VWAVH
l$ VWAVH
L$ VWAVH
l$ VWAVH
L$ WH
L$(!E
l$(E3
L$(E3
L$(H+
L$(L;
L$@9E
L$@9L$ t
L$@A;
L$@E3
l$@E3
L$@E3
l$@fD
L$@H;
L$@H;_
L$@H;L$@
L$@H3
L$@H9u
L$@I;
L$@I+
L$@L;
l$@M9h(w
L$`!\$(H
L$`!L$`
L$`E3
L$`H;
l$`H;_
L$`H3
L$`M;
L$<E3
L$0@8|$ 
l$0E3
L$0E3
L$0H;
L$0H3
L$0H9;t
L$0IcIT
l$4D!l$pL
L$4E3
L$8A+
L$8E2
L$8E3
L$8H;
l$8H;
L$8H;
L$8H;L$8
L$8H3
L$8Hi
L$8I;
L$8L+
l$a@8t$`t
L$DHi
L$H!L$H
L$hD;
l$HD;E
L$HD8d$Ct1D
L$HE3
L$hE3
L$HE3
L$hE3
L$HE3
L$hE3
L$HE3
L$hE3
L$HE3
L$hE3
L$HE3
l$HH;
L$HH;
L$hH;
L$HH;_
L$hH;L$h
L$hH;L$hr H
L$hH;L$hrIH
L$HH3
L$hH3
L$HH3
L$hH3
L$HH3
L$hH3
L$HH3
L$hH3
L$HH3
L$hH3
L$HH3
L$hH3
L$HH3
L$hH3
L$HH3
L$hH3
L$hI;
L$HI;
L$HL;
L$HL+
l$hL9
L$HM;
l$LE3
L$p!t$hH
L$P;L$@
L$PA;
l$PA_A^A]A\_^
L$pD3
L$PD8aPt
l$pD9m
L$PE3
L$pE3
L$PE3
L$pE3
L$PE3
l$Pf9.s
L$pH!E
L$pH!t$pH
L$PH;
L$pH;
L$PH;
L$pH;
L$PH;L$P
L$PH;L$Pr
L$PH;L$Pr L
L$PH;L$PrHH
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$pH9]
L$PI#
l$pL;
l$pL;OPs
L$PL+
L$TD;
L$TE3
L$x!L$x
L$x+D$8H
L$XA3
L$XD;
l$xD8
L$XE3
L$xE3
L$XE3
L$xE3
l$XE3
l$xE3
L$XE3
L$xE3
L$XE3
L$xH;
L$XH+
L$XH3
L$xH3
L$XH3
L$xH3
L$XH3
L$xH9
L$xI;
L$xLi
L$XM;
L$Xt~H
L)t$hu
L,+"c
L;`(r
L;c8sV
L;d$huvH
L;l$X
L;oHu$H
L;t$h
L;t$Hw
L;v`r
L;wPr
L@n?"
L+C0L;
l+ejJ
l+xbt
L9%2+?
L9/u:H
L9/u4H
L9;u0
L9{Hu
L9|$(
L9|$8
L9|$xt eH
L9~ u
L9~(u
L9~0u
L96t!I
L97uAE
L9a u"H
L9a8u%H
L9B0u
L9d$ u
L9e(t
L9epu
L9eXt
L9eXtXH
L9eXu
L9fpw
L9G t
L9ghv&D
L9ipu
L9l$@s
L9l$@t
L9l$@ufH
L9l$`v
L9l$`v#H
L9l$8t
L9l$h
L9l$hu
L9l$Pu*H
L9l$Pu;I
L9l$xt
L9l$Xw
L9m u5L
L9m u6L
L9m(u
L9m@tZH
L9m@u
L9m8t
L9m8u
L9mXu3H
L9oPv&
L9q(v
L9q(w5D8
L9q(weD8
L9t$ 
L9t$(
L9t$X
L9u8u
L9w0u'H
L9x(@
L9x(v)H;
L9x(v)H;Y A
L9x(v:I
L9x(v<H;Y@I
L9x(vtI
L9x(w
L9xHv2H;XHr
L9xHvBH;XHr
L9xhveI
L9xHvsH;XHr
L9xhvsI
L9y vS;Y }N
L9y(w
lambda(spExtensionRegistration.Get())
Landscape
LandscapeFlipped
lastError
LastLine
LastOrphanBackupManifestCleanupTime
LastOrphanPackageCleanupTime
LastOrphanSystemMetadataCleanupTime
lastState
LaunchPermission
lavender
lavenderBlush
lawnGreen
LazyFlushQueueLength
LC-;b
LCkkhI
LcL$@L
LCMapStringEx
lE89u I
LeaveCriticalSection
LegalCopyright
lemonChiffon
length
Level %u for %ls.
LICENSING_DEH_KEYWORD
lightBlue
lightCoral
lightCyan
lightGoldenrodYellow
lightGray
lightGreen
lightPink
lightSalmon
lightSeaGreen
lightSkyBlue
lightSlateGray
lightSteelBlue
lightYellow
limeGreen
linen
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
LinkDestinationPath
linkTarget
LinkTargetIsPartOfAutomaticContentGroup
LmW_Q
LoadCategoryNameTable
LoadExtensionRegistrationTable
LoadLibraryExW
LoadLibraryW
Local AppData
Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository\Packages
Local\SM0:%lu:%lu:%hs
LocalAlloc
LocalExperiencePackage
LocalFree
Locality %u
Locality %u path %ls
Locality %u size %u copiedSize %u fromPath %ls toPath %ls
Locality %u size %u copiedSize %u path %ls
Locality %u size %u path %ls
LocalServer32
LocalService
LocalStateFolder
LocalTermInfo.Add
Location
locking_mode
LockTheStateLock %u
Log(*error*,message) error: Invalid type for error (%d)
Log(error,*message*) error: Invalid type for message (%d)
LogFileInfoAlongPath %ls %p 0x%0x
LogFileInfoAlongPath %ls 0x%0x
LogFileInfoAlongPath %ws
LogFileInUse Telemetry failed: No valid tag.
Logging data because access was denied for file: 
LogHr
LogIfAccessDenied
LogMissingAppPackageInfo
LogMissingAppPackageSisDir
LogNt
logoOnly
LogStagedFeatureUsage
LookasideHitPeak
LookasideMissFullPeak
LookasideMissSizePeak
LookasideUsed
LookasideUsedPeak
lookingFor
LookupAccountSidW
lpacAppExperience
lpt1.
lpt2.
lpt3.
lpt4.
lpt5.
lpt6.
lpt7.
lpt8.
lpt9.
ls:\9
LsaLookupClose
LsaLookupFreeMemory
LsaLookupGetDomainInfo
LsaLookupOpenLocalPolicy
lstd::exception: %hs
lUonecore\admin\appmodel\StagingManager\Inc\StagingSession.hpp
lX*\P
LXP_DEH_KEYWORD
LyncMXE2ETool-0ee8b9d7-73ed-477e-9624-4c7f903dec5b_t84ne4vpwezv8
M H1E
M/!M/
m:AppxProvisionList
m:AppxProvisionList/m:EndOfLife/m:Package/@FamilyName
m:AppxProvisionList/m:Provisioned/m:Package/@FullName
m:EndOfLife
m:EndOfLife/m:Package
m:Package
m:Provisioned
m:Provisioned/m:Package
m:VisualElements/@Logo | *[local-name()='VisualElements']/@Square150x150Logo
m:VisualElements/@SmallLogo | m2:VisualElements/@Square30x30Logo | *[local-name()='VisualElements']/@Square44x44Logo
m:VisualElements/m:DefaultTile/@WideLogo | *[local-name()='VisualElements']/*[local-name()='DefaultTile']/@Wide310x150Logo
m:XboxLive | mx:XboxLive
M;w8r
m@A8M
m@H;{
m_text.find(L'\\') != std::wstring::npos
m_text.length() < minLength
m_text.length() == 0
m_text.length() > maxLength
m_text.length() > UNICODE_STRING_MAX_CHARS
M`H9}hu
m~"D}\
M0H;}
m2:VisualElements/m2:DefaultTile/@Square70x70Logo | *[local-name()='VisualElements']/*[local-name()='DefaultTile']/@Square71x71Logo
m4H+L$(H
M8;MH
M8I9v
M9.ubI
M9/u]L
M9q v%M;A s
M9q`v!M;A`s
M9't_D9&tZD
M9u(w
Machine
machine
Machine register cost: %I64u ms
MACHINE\
MachineArchitecture
MachineDatabase
MachineDatabaseAutoCheckpoint
MachineDatabaseCacheSize
MachineDatabaseCheckpointThreshold
MachineDatabaseFileChunkSize
MachineDatabaseJournalSizeLimit
MachineDatabaseOptions
MachineDatabasePageSize
MachineDatabaseStatisticsLastUpdated
MachineRegisterAdd
MachineRegisterRemove
magenta
Main or Optional Package could not be found!
Main or Optional Package is installed and in a good package status
main package
Main package is already installed.  Applicability blob contains bundle payload information so it's not necessary to update the bundle.
MainOrOptionalPackageFullName1
MainOrOptionalPackageFullName2
MainOrOptionalPausedPackage
mainPackage
MainPackageFamilyName
MainPackageFoundForOptional
MainPackageFullName
MainPackageIgnoredBecauseItHasAlreadyBeenAdded
MainPackageMoniker
MainParameter
MaintainProcessorArchitectureOnUpdate
MaintenanceInterval
MaintenanceMaxClockDelta
Make %u
make_bstr_nothrow AttributeName
make_bstr_nothrow xpath
make_unique_nothrow
MakeAndInitialize<ActivationCatalogCollector>(collector)
MakeAndInitialize<ActivationCatalogCollectorForUser>(collector)
MakeAndInitialize<ClassRegistrationType>(&classRegistration, _classes.get(), classId, _id)
MakeAndInitialize<ComInprocHandlerClassDllRegistration>(&classRegistration, _classes.Get(), classId)
MakeAndInitialize<ComInprocServerClassDllRegistration>(&classRegistration, _classes.Get(), classId)
MakeAndInitialize<ComManagedInprocServerClassRegistration>(&classRegistration, _classes.Get(), classId)
MakeAndInitialize<ExtensionCatalogCollector>(collector)
MakeAndInitialize<PackagedComCatalogCollector>(collector)
MakeAndInitialize<PackagedComCatalogCollectorForUserOrSystemRegister>(collector, userToken)
MakeSelfRelativeSD
MallocCount
MallocCountPeak
MallocSizePeak
Managed.App.Settings
Manifest not found
ManifestCacheOptions
ManifestLogo
manifestPackage
ManifestPath
ManifestPath %ws
ManifestReaderFound
ManifestSmallLogo
ManifestWideLogo
manual
map/set too long
MAPS|
MapViewOfFile
MarkStatusOfMainPackageForUser
maroon
Match
MaxConcurrentStageCountForCoServicingPackages
MaxCount
MaxDynamicBatchSize
MaxInstallOrder
MaxVersion
MBhvC
McC(A
MD$XH
MediaID
MediaId
mediumAquamarine
mediumBlue
mediumIL
mediumOrchid
mediumPurple
mediumSeaGreen
mediumSlateBlue
mediumSpringGreen
mediumTurquoise
mediumVioletRed
memcmp
memcpy
memmove
MEMORY
MemoryPriority
MemoryUsed
MemoryUsedPeak
memset
Merge package in order
Merged
MergedDirectory
MergedPriFileCreationError
MergeRelatedPriFiles
MergeSystemResourceFilesImplementation
message
Message
message
Message
message
Message
message
Message
message
Message
message
Message
message
metadataStageCost
Metered network being used and DisableMeteredNetworkBackgroundAutoUpdates policy enabled
Method
MethodName
Mf!ocHu
MG!MGf
MgD9iDu
MHH!}
MHL;oHu!H
Microsoft
Microsoft Corporation
Microsoft Enhanced RSA and AES Cryptographic Provider
Microsoft.GameOS
Microsoft.LyncMX_8wekyb3d8bbwe
microsoft.microsoftedge.canary_8wekyb3d8bbwe
microsoft.microsoftedge.dev_8wekyb3d8bbwe
microsoft.microsoftedge.internal_8wekyb3d8bbwe
microsoft.microsoftedge.stable_8wekyb3d8bbwe
Microsoft.MicrosoftEdge_8wekyb3d8bbwe
Microsoft.MicrosoftEdgeBeta_8wekyb3d8bbwe
Microsoft.MicrosoftEdgeDevToolsClient_8wekyb3d8bbwe
Microsoft.MoCamera_cw5n1h2txyewy
Microsoft.Office.OneNote
microsoft.system.package.metadata
microsoft.system.package.metadata\
microsoft.system.package.metadata\blockcache
Microsoft.UI.Xaml.CBS_8wekyb3d8bbwe
Microsoft.VCLibs.110.00.Debug_8wekyb3d8bbwe
Microsoft.VCLibs.110.00_8wekyb3d8bbwe
Microsoft.VCLibs.120.00.Debug_8wekyb3d8bbwe
Microsoft.VCLibs.120.00_8wekyb3d8bbwe
Microsoft.VCLibs.140.00.CP_8wekyb3d8bbwe
Microsoft.VCLibs.140.00.Debug.CP_8wekyb3d8bbwe
Microsoft.VCLibs.140.00.Debug.Preview_8wekyb3d8bbwe
Microsoft.VCLibs.140.00.Preview_8wekyb3d8bbwe
Microsoft.Windows.ApplicationModel.DesktopAppx
Microsoft.Windows.AppModel.Tiles
Microsoft.Windows.AppXDeploymentExtensions
Microsoft.Windows.AppxDeploymentFallback
Microsoft.Windows.AppXDeploymentServer
Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy!App
Microsoft.Windows.Cortana_cw5n1h2txyewy!CortanaUI
Microsoft.Windows.Photos
Microsoft.Windows.ShellExperienceHost_cw5n1h2txyewy!App
Microsoft.Windows.StateRepository.Service
Microsoft.Windows.Wil.FeatureLogging
Microsoft.WindowsAppRuntime.1.0_8wekyb3d8bbwe
Microsoft.WindowsStore_8wekyb3d8bbwe
Microsoft.WinJS.2.0_8wekyb3d8bbwe
Microsoft.XboxIdentityProvider_8wekyb3d8bbwe
Microsoft.ZDebugMenu_wmyngzxja4wtg
Microsoft.zMicrosoftEdge_8wekyb3d8bbwe
Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\
MicrosoftTelemetryAssertTriggeredUM
MicrosoftWindows.WCOSCDG.Proto_cw5n1h2txyewy
Microsoft-Windows-AppModel-State
Microsoft-Windows-AppReadiness/Admin
Microsoft-Windows-AppReadiness/Operational
Microsoft-Windows-AppXDeployment-Server
Microsoft-Windows-AppXDeploymentServer/Debug
Microsoft-Windows-AppXDeploymentServer/Diagnostic
Microsoft-Windows-AppXDeploymentServer/Operational
Microsoft-Windows-AppXDeploymentServer/Restricted
Microsoft-Windows-AppXPackaging/Operational
Microsoft-Windows-SettingSync/Debug
Microsoft-Windows-SettingSync/Operational
Microsoft-Windows-StateRepository/Operational
Microsoft-Windows-Store/Operational
Microsoft-Windows-WindowsUpdateClient/Operational
midnightBlue
MigratedSecondaryTilesFromTDL
MigrateSecondaryTile
MigrateSecondaryTilesFromTdl
MigrateSecondaryTilesFromTDL
MigrateSecondaryTilesFromTdl
MigrateSecondaryTilesFromTDL
MigrateSecondaryTilesFromTdl
MigrateSecondaryTilesFromTDL
MigrationRequired
MigratorPatch
MinimumDaysBeforeForceUpdate
mintCream
MinWidth
MiscStatus
miscStatus != existingMiscStatus
miscStatusAspectFlagsPropertyValue->GetString( &miscStatusAspectFlagsString)
miscStatusAspectKeyValuePair->get_Key(&miscStatusAspect)
miscStatusAspectKeyValuePair->get_Value( &miscStatusAspectFlagsInspectable)
MissingManifestDebugLog
MissingPackageFamily
MissingParameter
mistyRose
MitigatedAppDataVolume
MkParseDisplayName
moccasin
MOCOM_HELPER_KEYWORD
modern
ModifiedFile
modifiedReason
module
Module already loaded
moduleCount
MofFile
Moq3w:
MountedAppStateFolderTarget
MountedSettingsFolderTarget
MountPoint
MoveAndShrink
MovedPackages
MoveEndOfLifePackageToDeletedStoreExternal
MoveFile %ls %ls
MoveFileEx failed
MoveFileExW
MoveFileW
MovePackageFilesToDeletedAllUserPackages
MoveStateData %ws root %ws i %u
Moving Application Data for package %ws failed. Continuing to next package.
MovingFrameworkFromUpdateToAddList
MovingPackageToDeferredRegistrationList
Mp@8}
mPD8a$t
mpI!]
MrmCoreR.dll
mrmdeploy.dll
MRT_DEH_KEYWORD
MrtApplication
MRTDataHandlerPopulate
MRTDataHandlerRemove
MrtDefaultTile
MrtPackage
MrtSharedPri
MrtUserPri
ms:CriticalData
ms:Measures
ms:ReservedKeyword44
ms:Telemetry
MSAC_SIGNOUT_DEH_KEYWORD
mscoree.dll
msdelta.dll
Msg:[%ws] 
msixauth=
MSIXInBundle
MsixvcSignature.p7
msvcp_win.dll
ms-xbl-%08x
MultiByteToWideChar
multiple
Multiple frameworks with same version found, choosing not yet installed package
Multiple intent package full names not supported.
MultiString::InitializeFromStringArray
MultiStringIterator::operator *
MultiStringIterator::operator ++
MultiStringIterator::operator ==
Mutable
MutableBackup
MutablePackageDirectory
mutablePackageDirectory
MutablePackageDirectory
MutablePackageDirectory Target does not start with accepted roots %S
MutablePackageDirectory targetting mutable root cannot be shared--only those targetting volume root can be shared
MutablePackageDirectoryAddProcessing
MutablePackageDirectoryEnabled
MutablePackageDirectoryLength is longer than MAX_PATH
MutablePackageDirectoryMoveProcessing
MutablePackageDirectoryProcessAdd
MutablePackageDirectoryRemoveProcessing
MutablePackageDirectoryRepairProcessing
MutablePackageDirectoryStateHandler
MutablePackageDirectoryUpdateProcessing
MutablePackageRoot
MutablePackagesOnline
m'w8Z
mwD;uo
mwt3H
mx:Rating
MyForEach
MyForEach(iterator, [&packageMoniker, &registrationStoreContext] ( IKeyValuePair< HSTRING, IDllServerActivatableClassRegistration* > * keyValuePair ) -> HRESULT { ComPtr< IDllServerActivatableClassRegistration > classInterface; RETURN_IF_FAILED(keyValuePair->get_Value(&classInterface)); RETURN_IF_FAILED(static_cast< InProcessActivatableClassRegistration_Impl* >(classInterface.Get())-> PendingWriteToStore(packageMoniker, registrationStoreContext)); return S_OK; })
MyForEach(iterator, [&packageMoniker, &registrationStoreContext] ( IKeyValuePair< HSTRING, IExeServerActivatableClassRegistration* > *keyValuePair ) -> HRESULT { ComPtr< IExeServerActivatableClassRegistration > classInterface; RETURN_IF_FAILED(keyValuePair->get_Value(&classInterface)); OutOfProcessActivatableClassRegistration_Impl *activatableClass = static_cast< OutOfProcessActivatableClassRegistration_Impl* >(classInterface.Get()); RETURN_IF_FAILED(activatableClass->PendingWriteToStore(packageMoniker, registrationStoreContext)); return S_OK; })
MyForEach(iterator, [&packageMoniker, &registrationStoreContext]( IKeyValuePair< HSTRING, IInspectable* > *keyValuePair ) -> HRESULT { ComPtr< IInspectable > itf; Windows::Internal::String iid; RETURN_IF_FAILED(keyValuePair->get_Key(iid.ReleaseAndGetAddressOf())); RETURN_IF_FAILED(keyValuePair->get_Value(&itf)); RETURN_IF_FAILED(registrationStoreContext->CreateInterfaceEntry( packageMoniker.Get(), iid.Get(), *static_cast<InterfaceRegistration_Impl*>(itf.Get()))); return S_OK; })
MyForEach(iterator, [&packageMoniker, &registrationStoreContext]( IKeyValuePair< HSTRING, IInspectable* > *keyValuePair ) -> HRESULT { ComPtr< IInspectable > proxyStub; Windows::Internal::String clsid; RETURN_IF_FAILED(keyValuePair->get_Key(clsid.ReleaseAndGetAddressOf())); RETURN_IF_FAILED(keyValuePair->get_Value(&proxyStub)); RETURN_IF_FAILED(registrationStoreContext->CreateProxyStubEntry( packageMoniker.Get(), clsid.Get(), *static_cast<ProxyStubRegistration_Impl*>(proxyStub.Get()))); return S_OK; })
MyForEach(iterator, [this, incomingPackage, &registrationStoreContext] ( IKeyValuePair< HSTRING, IExeServerRegistration* > *keyValuePair ) -> HRESULT { ComPtr< IExeServerRegistration > serverInterface; RETURN_IF_FAILED(keyValuePair->get_Value(&serverInterface)); RETURN_IF_FAILED(static_cast<ExeServerRegistration_Impl*>(serverInterface.Get())-> PendingWriteToStore(incomingPackage, registrationStoreContext)); return S_OK; })
N!&$a
N,A8v<t
N[PjO
N{?YV
N0H;_
n3fj@r
N6Eh0
n6QXF
n8\$@t
n8\$A
NameCollisionMap::Make(&_nameCollisionMap)
NameCollisionMap::Make(&registration->_nameCollisionMap)
nameCollisionMap->HasKey(keyName, &fHasKey)
nameCollisionMap->Insert(keyName, keyName, &replaced)
nameCollisionMap->Remove(keyName)
NamedDependency
nan(ind)
nan(snan)
navajoWhite
NavigateTo
ncacn_hvsocket
ncalrpc
nD9e@tDH
Ndr64AsyncServerCallAll
NdrAsyncServerCall
NdrClientCall3
NdrServerCall2
NdrServerCallAll
need dictionary
needsTrimming
neutral
Neutral
neutral
new %u
New %u
New request enqueued
newFilePointer
NewMainPackageFullName
newMutablePackageDirectory
newPackage
newPackageFullName
newPackageRoot
NewParser
NextCleanupTime
NextDeploymentState
NextUpdateTime
NextVolumeIndex
nl@B4
No Applicable TargetPlatform
No Extension DLLs previously loaded
No main packages found to reset
No manifest could be found in the local manifest path for End of Life package. This may fail later if no other manifest could be found.
No manifest could be found in the local manifest path. This may fail later if no other manifest could be found.
No matching main package found, bundle is not reinstall
No package exists in family and no stub can be installed, falling back to full package
No token handle
NoContentGroupMapForPackage
Non-Encrypted FileName: %ws
Non-fatal, webplat storage server fails to detach databases.
NoReRegisterOnUpgrade
NORMAL
not empty
Not found reason: %d
not in
Not merging package because it's not in the related set
Not roaming but NetworkCostType_Fixed and over data limit
Not roaming but NetworkCostType_Variable
Notification
NotificationSemaphoreName
NotificationSemaphores
Notified ARS of package changes to DefaultAccount.
notifyBi
NotifyObject
NotifyPrelaunchServce
NotifyServiceStatusChangeW
NoUIEntryPoints
NoUIEntryPoints-DesignMode
nOx^l
NPHcS 
Nqq4?s
NtAccessCheck
NtAdjustPrivilegesToken
NtClose
NtCompareSigningLevels
NtCreateFile
NtCreateSection
NtCreateWnfStateName
NtDelayExecution
NtDeleteWnfStateName
NtDeviceIoControlFile
ntdll.dll
ntelA
NtFsControlFile
NtGetCachedSigningLevel
NtMapViewOfSection
NTMARTA.dll
NtOpenDirectoryObject
NtOpenFile
NtOpenThreadToken
NtQueryInformationFile
NtQueryInformationProcess
NtQueryInformationThread
NtQueryInformationToken
NtQueryLicenseValue
NtQueryObject
NtQuerySecurityObject
NtQuerySystemInformation
NtQueryWnfStateData
NtSetCachedSigningLevel2
NtSetInformationFile
NtSetInformationThread
NtSetInformationVirtualMemory
NtSetSecurityObject
NTStatus
NtUnmapViewOfSection
NtUpdateWnfStateData
NtWaitForSingleObject
numActiveApps
numAttempts
NumberOfFiles
NumberOfPagesCheckpointed
numDirectlyServicedPackages
numIndirectlyServicedPackages
numPackages
numTerminatedApps
numTotalSteps
nUY|d
NYU;*
O D8|$Ht
o#%b:8
o:[cJw>
O:BAG:BAD:(A;;0x1;;;SY)(A;;0x1;;;BA)
O:BAG:BAD:(A;;0x1;;;SY)(A;;0x1;;;BA)(A;;0x1;;;LS)
O:PSG:BAD:(A;;0xB;;;BU)(A;;0xB;;;AC)
O:PSG:BAD:(A;;0xB;;;SY)(A;;0xB;;;BA)(A;;0xB;;;BU)
O:PSG:BAD:(A;;0xB;;;SY)(A;;0xB;;;IU)(A;;0xB;;;BA)(A;;0xB;;;BU)
O:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464D:PAI(A;OICI;GA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;OICI;GRGX;;;S-1-15-3-1024-3635283841-2530182609-996808640-1887759898-3848208603-3313616867-983405619-2501854204)(A;OICI;GA;;;SY)(A;OICI;FRFX;;;LS)(A;OICI;FRFX;;;NS)(A;OICI;FRFX;;;RC)
O:SYD:(A;OICI;GA;;;BA)
O:SYG:SYD:P(A;OICI;KA;;;SY)(A;OICI;KRKX;;;BA)(A;OICI;KRKX;;;%s)
o@3x:
O@H9OPt
o\$PH
o]n]BY
o`H;_ps
O~=+}<|
ObjectLength
ObjectNum
ObtainedTileUniqueIdFromTDL
oD$ f
offlineSoftwareHive
Offloaded package family is due for update
Offloaded package without tile is eligible for update
OffloadedPackageUpdateIntervalDays
Offset
OKl!2)sZu=
oL$0f
OldApplicationId
oldLace
OldMainPackageFullName
oldMutablePackageDirectory
oldPackage
oldPackageFullName
oldPackageRoot
OldPrimaryTileNotFound
oldRoot
OldRoot %ws
OldRoot %ws user %ws newRoot %ws
ole32.dll
OLEAUT32.dll
olive
oliveDrab
oLmU7e
OnDemandRegisterPackageFound
OnDemandRegisterPackageNotFound
onecore\admin\appmodel\applicability\applicabilitybundlemanifestreader.cpp
onecore\admin\appmodel\applicability\applicabilitybundlepackageid.cpp
onecore\admin\appmodel\applicability\applicabilitybundlepackageinfo.cpp
onecore\admin\appmodel\applicability\ApplicabilityEnumerator.hpp
onecore\admin\appmodel\appxsignatureorigin\appxsignatureorigin.cpp
onecore\admin\appmodel\cleanupmanager\cleanupmanager.cpp
onecore\admin\appmodel\common\accesshelpers.cpp
onecore\admin\appmodel\common\actionlist.cpp
onecore\admin\appmodel\common\admincheck.cpp
onecore\admin\appmodel\common\alluserstorepaths.cpp
onecore\admin\appmodel\common\applicabilityhelper.cpp
onecore\admin\appmodel\common\appxdeletefile.cpp
onecore\admin\appmodel\common\bundleutilities.cpp
onecore\admin\appmodel\common\centennial.cpp
onecore\admin\appmodel\common\configuration.cpp
onecore\admin\appmodel\common\container.cpp
onecore\admin\appmodel\Common\ContainerUserToken.hpp
onecore\admin\appmodel\common\contentgrouphelpers.cpp
onecore\admin\appmodel\common\cryptcatalogutil.cpp
onecore\admin\appmodel\common\deferappdataacquisition.cpp
onecore\admin\appmodel\common\deploymentoperation.cpp
onecore\admin\appmodel\common\directoryacls.cpp
onecore\admin\appmodel\common\directorypaths.cpp
onecore\admin\appmodel\common\downlevelhelper.cpp
onecore\admin\appmodel\common\encryption.cpp
onecore\admin\appmodel\common\expecteddigestsmap.cpp
onecore\admin\appmodel\common\FileInUseTelemetry.hpp
onecore\admin\appmodel\common\fspolicy.cpp
onecore\admin\appmodel\common\fulltrust.cpp
onecore\admin\appmodel\common\hardlinkdirectorytree.cpp
onecore\admin\appmodel\common\hardlinkingacls.cpp
onecore\admin\appmodel\common\HardLinkingACLs.hpp
onecore\admin\appmodel\common\HardlinkingACLs.hpp
onecore\admin\appmodel\common\logfileinformation.cpp
onecore\admin\appmodel\common\ManifestCache.hpp
onecore\admin\appmodel\common\manifestreader.cpp
onecore\admin\appmodel\common\mergedpricreator.cpp
onecore\admin\appmodel\common\metadata.cpp
onecore\admin\appmodel\common\mountedfolder.cpp
onecore\admin\appmodel\common\mrthelper.cpp
onecore\admin\appmodel\common\mutabledirectoryhelper.cpp
onecore\admin\appmodel\common\MutableDirectoryHelper.hpp
onecore\admin\appmodel\common\optionalpackagehelper.cpp
onecore\admin\appmodel\common\packagefullnameutilities.cpp
onecore\admin\appmodel\common\packageid.cpp
onecore\admin\appmodel\Common\PackageID.inl
onecore\admin\appmodel\common\packageinfo.cpp
onecore\admin\appmodel\common\packageprocess.cpp
onecore\admin\appmodel\common\prefetchfile.cpp
onecore\admin\appmodel\common\privilege.cpp
onecore\admin\appmodel\Common\ProgID.hpp
onecore\admin\appmodel\common\randomaccessstreamdatasourceurihelper.cpp
onecore\admin\appmodel\common\removeregistrytree.cpp
onecore\admin\appmodel\common\scheduledtaskhelper.cpp
onecore\admin\appmodel\common\securitydescriptorbuilder.cpp
onecore\admin\appmodel\common\sessionutilities.cpp
onecore\admin\appmodel\common\shellrefresh.cpp
onecore\admin\appmodel\common\signaturetools.cpp
onecore\admin\appmodel\common\stagingpaths.cpp
onecore\admin\appmodel\common\statepaths.cpp
onecore\admin\appmodel\Common\StateRepository.hpp
onecore\admin\appmodel\common\stubpreference.cpp
onecore\admin\appmodel\common\takeownership.cpp
onecore\admin\appmodel\common\targetplatformutilities.cpp
onecore\admin\appmodel\common\urihelper.cpp
onecore\admin\appmodel\common\utilities.cpp
onecore\admin\appmodel\Common\Utilities.hpp
onecore\admin\appmodel\common\Utilities.hpp
onecore\admin\appmodel\common\volume.cpp
onecore\admin\appmodel\common\volumemanager.cpp
onecore\admin\appmodel\common\win32alacarte.cpp
onecore\admin\appmodel\common\xmltools.cpp
onecore\admin\appmodel\common\xpath.cpp
onecore\admin\appmodel\datasource\filedatasource\src\fileappxrangerequestjob.cpp
onecore\admin\appmodel\dependencymanager\bundleactionlists.cpp
onecore\admin\appmodel\dependencymanager\deferredregistrationsresolver.cpp
onecore\admin\appmodel\dependencymanager\dependencylist.cpp
onecore\admin\appmodel\dependencymanager\dependencyresolver.cpp
onecore\admin\appmodel\dependencymanager\dependencyrules.cpp
onecore\admin\appmodel\dependencymanager\dependencyutilities.cpp
onecore\admin\appmodel\DeploymentManager\Inc\DynamicDependenciesStateHandler.hpp
onecore\admin\appmodel\DeploymentManager\Inc\ExceptionAwareHelpers.hpp
onecore\admin\appmodel\deploymentmanager\src\aclexternallocationstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\actionlistutilities.cpp
onecore\admin\appmodel\deploymentmanager\src\approvalstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\bundledataloader.cpp
onecore\admin\appmodel\deploymentmanager\src\bundleprocessor.cpp
onecore\admin\appmodel\deploymentmanager\src\cleanappxalluserstorestatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\commonregistration.cpp
onecore\admin\appmodel\deploymentmanager\src\containerdeploymentstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\dataflushingstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\deindexingstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\deploymentmanager.cpp
onecore\admin\appmodel\deploymentmanager\src\deploymentoptionsconverter.cpp
onecore\admin\appmodel\deploymentmanager\src\destageuserdatastatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\dynamicdependenciesstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\embeddedautoupdatesstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\evaluatestatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\exceptionawarehelpers.cpp
onecore\admin\appmodel\deploymentmanager\src\hostruntimestatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\indexingstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\ipackagepolicydataparameters.cpp
onecore\admin\appmodel\deploymentmanager\src\machineregistrationstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\mrtdatastatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\mutablepackagedirectorystatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\ondemandregisterhandler.cpp
onecore\admin\appmodel\deploymentmanager\src\optionaldependencyhandler.cpp
onecore\admin\appmodel\deploymentmanager\src\packagepolicydataparametersviaapplicability.cpp
onecore\admin\appmodel\deploymentmanager\src\packagepolicydataparametersviastaterepository.cpp
onecore\admin\appmodel\deploymentmanager\src\packagepolicyhelpers.cpp
onecore\admin\appmodel\deploymentmanager\src\packagesinusehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\pipeline.cpp
onecore\admin\appmodel\deploymentmanager\src\plmsessioninfo.cpp
onecore\admin\appmodel\deploymentmanager\src\plmsessionlist.cpp
onecore\admin\appmodel\deploymentmanager\src\preapprovalhelper.cpp
onecore\admin\appmodel\deploymentmanager\src\prerequisitestatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\registerpackageonlogonhandler.cpp
onecore\admin\appmodel\deploymentmanager\src\registrationstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\restartpackagesinusehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\sessionutil.cpp
onecore\admin\appmodel\deploymentmanager\src\sharedappsredirecthandler.cpp
onecore\admin\appmodel\deploymentmanager\src\sharedappssynchandler.cpp
onecore\admin\appmodel\deploymentmanager\src\sharedpackagecontainerclosepackagesinusestatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\sharedpackagecontainerevaluatestatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\sharedpackagecontainerfinalizestatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\sharedpackagecontainerhelpers.cpp
onecore\admin\appmodel\deploymentmanager\src\sharedpackagecontainerindexingstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\sharedpackagecontainerpackagerootaclstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\sharedpackagecontainerstatecreationstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\singletonregistrationstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\stageuserdatastatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\stagingstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\systemregistrationstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\tilesstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\undockeddehstatehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\versionsupercedencehandler.cpp
onecore\admin\appmodel\deploymentmanager\src\xboxdatastatehandler.cpp
onecore\admin\AppModel\EnterpriseModernAppManagement\Inc\MaintainProcessorArchitectureOnUpdate.h
onecore\admin\appmodel\lifetimemanagers\hspackagehandletable.cpp
onecore\admin\appmodel\lifetimemanagers\plmutil.cpp
onecore\admin\appmodel\lifetimemanagers\processlifetimemanagerimpl.cpp
onecore\admin\appmodel\lifetimemanagers\servicelifetimemanager.cpp
onecore\admin\appmodel\loosefilestreaming\appxloosefile.cpp
onecore\admin\appmodel\loosefilestreaming\appxloosefilebundlestreamingreader.cpp
onecore\admin\appmodel\loosefilestreaming\appxloosefilehelper.cpp
onecore\admin\appmodel\loosefilestreaming\appxloosefilepackagestreamingreader.cpp
onecore\admin\appmodel\loosefilestreaming\appxloosefilepublisherbridgingartifactsenumerator.cpp
onecore\admin\appmodel\loosefilestreaming\appxloosefilerawdatareceiver.cpp
onecore\admin\appmodel\loosefilestreaming\appxloosefilesenumerator.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\dehrequest.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\extensionbundle.cpp
onecore\admin\appmodel\OSIM\Src\DEH\Appx\Common\LongfilePath.hpp
onecore\admin\appmodel\osim\src\deh\appx\common\mocomhelper.cpp
onecore\admin\appmodel\OSIM\src\deh\appx\common\mocomhelper.hpp
onecore\admin\appmodel\osim\src\deh\appx\common\MoCOMHelper.hpp
onecore\admin\appmodel\osim\src\deh\appx\common\package.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\tools.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\usertoken.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\activatableclassregistration.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\activationcatalogverifier.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\collectors.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\extensioncatalogcollector.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\ExtensionCatalogCollector.hpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\packagedcomregistration.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\RegistryCompatibilityTypes.hpp
onecore\admin\appmodel\OSIM\src\deh\WinRT\Inc\Uint32String.hpp
onecore\admin\appmodel\osim\src\host\appxosimextensiondlls.cpp
onecore\admin\appmodel\osim\src\host\host.cpp
onecore\admin\appmodel\osim\src\host\host.hpp
onecore\admin\appmodel\osim\src\host\osimrequest.cpp
onecore\admin\appmodel\osim\src\winrt\lib\appxmanifestreader.cpp
onecore\admin\appmodel\osim\src\winrt\lib\comhelper.cpp
onecore\admin\appmodel\osim\src\winrt\lib\dehrequest.cpp
onecore\admin\appmodel\packagemanager\logging\appxlog.cpp
onecore\admin\appmodel\packagemanager\rpcinterface\packagemanagerrpc.cpp
onecore\admin\appmodel\packagemanager\server\addparameterprocessor.cpp
onecore\admin\appmodel\packagemanager\server\addvolumerequest.cpp
onecore\admin\appmodel\packagemanager\server\appinstallerprocessor.cpp
onecore\admin\appmodel\packagemanager\server\argumenthelpers.cpp
onecore\admin\appmodel\packagemanager\server\commandprocessor.cpp
onecore\admin\appmodel\packagemanager\server\deletepackagefilesparameterprocessor.cpp
onecore\admin\appmodel\packagemanager\server\deletevolumerequest.cpp
onecore\admin\appmodel\packagemanager\server\dependentrequesttracker.cpp
onecore\admin\appmodel\packagemanager\server\deploymentnotification.cpp
onecore\admin\appmodel\packagemanager\server\deploymentoperationparameterprocessor.cpp
onecore\admin\appmodel\packagemanager\server\deploymentqueuemanager.cpp
onecore\admin\appmodel\packagemanager\server\deploymentqueuestore.cpp
onecore\admin\appmodel\PackageManager\Server\DeploymentQueueStore.inl
onecore\admin\appmodel\packagemanager\server\deploymentqueuestorereader.cpp
onecore\admin\appmodel\packagemanager\server\deploymentqueuestorewriter.cpp
onecore\admin\appmodel\PackageManager\Server\DeploymentQueueStoreWriter.inl
onecore\admin\appmodel\packagemanager\server\deploymentrequest.cpp
onecore\admin\appmodel\PackageManager\Server\DeploymentRequest.hpp
onecore\admin\appmodel\packagemanager\server\endoflifelist.cpp
onecore\admin\appmodel\packagemanager\server\enumpackagesbypackagevolumekey.cpp
onecore\admin\appmodel\packagemanager\server\enumpackagesbyusersidfilter.cpp
onecore\admin\appmodel\packagemanager\server\enumpackagesbyusersidnamepublisherfilter.cpp
onecore\admin\appmodel\packagemanager\server\enumprovisionedpackagesfilter.cpp
onecore\admin\appmodel\packagemanager\server\errorhelpers.cpp
onecore\admin\appmodel\packagemanager\server\faultinjection.cpp
onecore\admin\appmodel\packagemanager\server\generatepreinstalledprifiles.cpp
onecore\admin\appmodel\packagemanager\server\helpers.cpp
onecore\admin\appmodel\PackageManager\Server\IEnumPackagesFilter.hpp
onecore\admin\appmodel\packagemanager\server\inventoryhelpers.cpp
onecore\admin\appmodel\packagemanager\server\module.cpp
onecore\admin\appmodel\packagemanager\server\moveparameterprocessor.cpp
onecore\admin\appmodel\packagemanager\server\mutablemsixvcrequest.cpp
onecore\admin\appmodel\packagemanager\server\ondemandregisterparameterprocessor.cpp
onecore\admin\appmodel\packagemanager\server\packageapplicability.cpp
onecore\admin\appmodel\packagemanager\server\packageinventory.cpp
onecore\admin\appmodel\packagemanager\server\packageoperation.cpp
onecore\admin\appmodel\packagemanager\server\packagestatemachine.cpp
onecore\admin\appmodel\packagemanager\server\prioritypolicy.cpp
onecore\admin\appmodel\packagemanager\server\provisionpackageparameterprocessor.cpp
onecore\admin\appmodel\packagemanager\server\removeparameterprocessor.cpp
onecore\admin\appmodel\packagemanager\server\repairrequest.cpp
onecore\admin\appmodel\packagemanager\server\resetparameterprocessor.cpp
onecore\admin\appmodel\packagemanager\server\resetsingleparameterprocessor.cpp
onecore\admin\appmodel\PackageManager\Server\RpcMemoryManagement.inl
onecore\admin\appmodel\packagemanager\server\serversidediskusage.cpp
onecore\admin\appmodel\packagemanager\server\serversiderpc.cpp
onecore\admin\appmodel\packagemanager\server\service.cpp
onecore\admin\appmodel\packagemanager\server\setvolumestaterequest.cpp
onecore\admin\appmodel\packagemanager\server\specificvolumehelper.cpp
onecore\admin\appmodel\packagemanager\server\stageuserdataparameterprocessor.cpp
onecore\admin\appmodel\packagemanager\server\statelocations.cpp
onecore\admin\appmodel\packagemanager\server\syncvolumerequest.cpp
onecore\admin\appmodel\packagemanager\server\tilesrequest.cpp
onecore\admin\appmodel\packagemanager\server\tilesstorepreviewtile.cpp
onecore\admin\appmodel\packagemanager\server\volumerequestbase.cpp
onecore\admin\appmodel\packagemanager\server\volumerequestmanager.cpp
onecore\admin\appmodel\packagemanager\server\wnfpublisherstatename.cpp
onecore\admin\appmodel\packagemanager\server\wnfpublisherstatenamecache.cpp
onecore\admin\appmodel\packagemanager\server\xupdatesessionmanager.cpp
onecore\admin\appmodel\packagemanager\server\xupdatesessionmanagerrpc.cpp
onecore\admin\appmodel\packagerepository\common\applicationextras.cpp
onecore\admin\appmodel\packagerepository\common\extensionrow.cpp
onecore\admin\appmodel\packagerepository\common\extensions.cpp
onecore\admin\appmodel\packagerepository\common\localizationdictionary.cpp
onecore\admin\appmodel\packagerepository\common\packageextras.cpp
onecore\admin\appmodel\packagerepository\common\packagerow.cpp
onecore\admin\appmodel\packagerepository\common\tools.cpp
onecore\admin\appmodel\PackageRepository\Inc\External\DependencyGraphRow.hpp
onecore\admin\appmodel\PackageRepository\Inc\External\ITable.hpp
onecore\admin\appmodel\PackageRepository\Inc\External\PackageRow.hpp
onecore\admin\appmodel\PackageRepository\Inc\External\VisibilityRow.hpp
onecore\admin\appmodel\packagerepository\staterepository\dependencygraphtable.cpp
onecore\admin\appmodel\packagerepository\staterepository\extensiontable.cpp
onecore\admin\appmodel\packagerepository\staterepository\packagetable.cpp
onecore\admin\appmodel\packagerepository\staterepository\repositorysession.cpp
onecore\admin\appmodel\packagerepository\staterepository\staterepositoryhelper.cpp
onecore\admin\appmodel\packagerepository\staterepository\tablehelper.cpp
onecore\admin\appmodel\packagerepository\staterepository\visibilitytable.cpp
onecore\admin\appmodel\packagerepository\staterepository\wowdependencygraphtable.cpp
onecore\admin\appmodel\precompilation\bytecodequeuemanager\bytecodequeuemanager.cpp
onecore\admin\appmodel\precompilation\client\bytecodegenerationengine.cpp
onecore\admin\appmodel\precompilation\client\bytecodegenerationrequest.cpp
onecore\admin\appmodel\precompilation\client\rpcserverhelper.cpp
onecore\admin\appmodel\recovery\recovery.cpp
onecore\admin\appmodel\sharedpackagecontainer\lib\sharedpackagecontainer.acls.cpp
onecore\admin\appmodel\sharedpackagecontainer\lib\sharedpackagecontainer.statecreation.cpp
onecore\admin\appmodel\StagingManager\Inc\MsixvcStagingSession.hpp
onecore\admin\appmodel\StagingManager\Inc\StagingManagerFaultInjection.hpp
onecore\admin\appmodel\stagingmanager\src\applyinplaceupdate.cpp
onecore\admin\appmodel\stagingmanager\src\appxbundlestagingsession.cpp
onecore\admin\appmodel\stagingmanager\src\appxcustominstallhandler.cpp
onecore\admin\appmodel\stagingmanager\src\appxdatareceiver.cpp
onecore\admin\appmodel\stagingmanager\src\appxdeltahandler.cpp
onecore\admin\appmodel\stagingmanager\src\appxdynamicfilerangecollection.cpp
onecore\admin\appmodel\stagingmanager\src\appxloosefilebundlestagingsession.cpp
onecore\admin\appmodel\stagingmanager\src\appxloosefilepackagestagingsession.cpp
onecore\admin\appmodel\stagingmanager\src\appxmountedfolderconfiguration.cpp
onecore\admin\appmodel\stagingmanager\src\appxpackagestagingsession.cpp
onecore\admin\appmodel\stagingmanager\src\appxpayloadduplicatefinder.cpp
onecore\admin\appmodel\stagingmanager\src\appxpayloadfilehasher.cpp
onecore\admin\appmodel\stagingmanager\src\appxrequestfilerangesinventory.cpp
onecore\admin\appmodel\stagingmanager\src\contentgroupstaginghelpers.cpp
onecore\admin\appmodel\stagingmanager\src\destagingsession.cpp
onecore\admin\appmodel\stagingmanager\src\encryptionstaginghelpers.cpp
onecore\admin\appmodel\stagingmanager\src\fileinfo.cpp
onecore\admin\appmodel\stagingmanager\src\managedinstallers.cpp
onecore\admin\appmodel\stagingmanager\src\mountedfolderhelper.cpp
onecore\admin\appmodel\stagingmanager\src\msixvcstagingsession.cpp
onecore\admin\appmodel\stagingmanager\src\resumefileinfo.cpp
onecore\admin\appmodel\stagingmanager\src\staginghelpers.cpp
onecore\admin\appmodel\stagingmanager\src\stagingmanager.cpp
onecore\admin\appmodel\stagingmanager\src\stagingsession.cpp
onecore\admin\appmodel\statecreation\lib\statecreation.cpp
onecore\admin\appmodel\statecreation\lib\statecreationhelpers.cpp
onecore\admin\appmodel\telemetry\deploymentsession.cpp
onecore\admin\appmodel\Telemetry\DeploymentSession.hpp
onecore\admin\appmodel\telemetry\sqmhelpers.cpp
onecore\admin\appmodel\telemetry\traceloggingsession.cpp
onecore\admin\appmodel\trust\filevalidationhelper.cpp
onecore\admin\appmodel\trust\trusthelper.cpp
onecore\admin\appmodel\trust\walktreetrusthelpers.cpp
onecore\base\appmodel\appxminirepository\lib\appxminirepository.cpp
onecore\base\appmodel\appxprovisionpackage\src\appxprovisionpackage.cpp
onecore\base\appmodel\appxprovisionpackage\src\appxprovisionpackageenumerator.cpp
onecore\base\appmodel\appxprovisionpackage\src\appxprovisionreader.cpp
onecore\base\appmodel\appxprovisionpackage\src\appxprovisionwriter.cpp
onecore\base\appmodel\appxprovisionpackage\src\commonhelpers.cpp
onecore\base\appmodel\common\appxuninstallblocklist.cpp
onecore\base\appmodel\common\autocotaskmemstring.cpp
onecore\base\appmodel\common\base32encoding.cpp
onecore\base\appmodel\common\cryptoprovider.cpp
onecore\base\appmodel\common\fileutils.cpp
onecore\base\appmodel\common\guid.cpp
onecore\base\appmodel\common\impersonationcontext.cpp
onecore\base\appmodel\common\pathhelpers.cpp
onecore\base\appmodel\common\registrykey.cpp
onecore\base\appmodel\common\sid.cpp
onecore\base\appmodel\common\stateschema.cpp
onecore\base\appmodel\common\stateseparation.cpp
onecore\base\appmodel\common\stringbuilder.cpp
onecore\base\appmodel\common\stringset.cpp
onecore\base\appmodel\common\userprofile.cpp
onecore\base\appmodel\common\widestring.cpp
onecore\base\appmodel\package\packagesid.cpp
onecore\base\appmodel\packageacquisitioninfo\packageacquisitioninfo.cpp
onecore\base\appmodel\packageinuse\packageinusehelper.cpp
onecore\base\appmodel\runtime\src\monikerinternal.cpp
onecore\base\appmodel\runtime\src\packagestatusinternal.cpp
onecore\base\appmodel\StateManager\ApiSet\Inc\StateHeap.hpp
onecore\base\appmodel\statemanager\apiset\lib\statespace.cpp
onecore\base\appmodel\StateRepository\Common\Inc\Security.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\blob.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\changetracking.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\database.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\databasecache.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\DatabaseCache.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\databasecachesingleton.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\datatype-hasher.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\datatype-progid.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionaryreader.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionaryserialization.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionarywinrtreader.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionarywinrtwriter.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionarywriter.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionaryxmlwriter.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entities-partitions.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-activation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-activation-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionalias.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionalias-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionaliasuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionaliasuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextensionhost.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextensionhost-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appinstaller.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appinstaller-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appinstalleruri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appinstalleruri-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-application.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationbackgroundtask.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationbackgroundtask-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationcontenturirule.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationcontenturirule-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-application-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationidentity.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationidentity-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationproperty.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationproperty-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appservice.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appservice-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandler.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandler-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandlergroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandlergroup-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appxextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appxextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appxmanifest.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appxmanifest-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-autoupdatepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-autoupdatepackage-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundle.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundle-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundlepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundlepackage-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundleresource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundleresource-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-contentgroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-contentgroup-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-contentgroupfile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-contentgroupfile-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-custominstallwork.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-custominstallwork-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-defaulttile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-defaulttile-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependency.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependency-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependencygraph.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependencygraph-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-deploymenthistory.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-deploymenthistory-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandler.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandler-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandlergroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandlergroup-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-file.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-file-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-filetypeassociation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-filetypeassociation-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-hostruntime.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-hostruntime-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtapplication.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtapplication-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtdefaulttile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtdefaulttile-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtpackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtpackage-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtsharedpri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtsharedpri-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtuserpri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtuserpri-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-nameddependency.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-nameddependency-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundle.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundle-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundlepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundlepackage-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundleresource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundleresource-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-package.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageappinstaller.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageappinstaller-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-package-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagedependency.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagedependency-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageexternallocation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageexternallocation-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamily-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilypolicy.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilypolicy-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilyuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilyuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilyuserresource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilyuserresource-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageidentity.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageidentity-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagelocation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagelocation-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagepolicy.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagepolicy-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageproperty.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageproperty-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagesourceuri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagesourceuri-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagesuperceded.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagesuperceded-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuserstatus.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuserstatus-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuserchangelog.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuserchangelog-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-protocol.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-protocol-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-provisionedpackageexclude.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-provisionedpackageexclude-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-publishercachefolder.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-publishercachefolder-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-resource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-resource-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuserchangelog.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuserchangelog-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileview.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sequence.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sequence-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sharedpackagecontainer.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sharedpackagecontainer-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sharedpackagecontainerpackagefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sharedpackagecontainerpackagefamily-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srhistory.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srhistory-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournal.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournalarchive.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournalarchive-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournal-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-targetdevicefamily-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-tilechangelogview-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-tileview-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-user.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-user-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-workinprogress.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-workinprogress-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-wowdependencygraph.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-wowdependencygraph-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-xboxpackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-xboxpackage-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\globals.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\logging.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\longrunningtransaction.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\macros.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\macrosevaluators.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\MultiUser.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\repository.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\resourcepriority.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\ResourcePriority.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\statement.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\Statement.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\statementcache.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\StatementCache.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\statementexecution.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\text.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\texta.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\Utf16String.hpp
onecore\base\appmodel\StateRepository\DataAccessLayer\Utf8String.hpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\activation.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\application.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\applicationextension.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\applicationproperty.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\database.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\dependencygraph.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\localize.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\package.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\packageextension.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\packagefamily.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\packageproperty.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\packageuser.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\user.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\WinRT.h
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\winrt-dictionary.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\winrt-results.cpp
onecore\base\appmodel\staterepository\winrt\inproc\dataaccesslayer\lib\winrt-string.cpp
onecore\base\appmodel\trust\trustlabelacehelpers.cpp
onecore\base\appmodel\trust\trustlabelhelpersbase.cpp
onecore\internal\base\inc\appmodel\appxminirepository\AppXMiniRepository.h
onecore\internal\base\inc\appmodel\common\RegistryKey.hpp
onecore\internal\base\inc\appmodel\package\ProcessorArchitecture.hpp
onecore\internal\base\inc\containerpolicymanagerclient.h
onecore\internal\com\inc\combase\ComGuid.hpp
onecore\internal\sdk\inc\wil/Staging.h
onecore\internal\sdk\inc\wil\opensource/wil/resource.h
onecore\internal\sdk\inc\wil\opensource/wil/result.h
onecore\internal\sdk\inc\wil\opensource/wil/result_macros.h
onecore\internal\sdk\inc\wil\opensource/wil/winrt.h
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
onecore\internal\sdk\inc\wil\opensource\wil\winrt.h
onecore\printscan\AppxPackaging\lib\Core\src\StreamHelper.hpp
onecore\printscan\appxpackaging\lib\crypto\src\appxindirectdatareader.cpp
onecore\printscan\appxpackaging\lib\crypto\src\appxsignatureorigininternal.cpp
onecore\printscan\appxpackaging\lib\crypto\src\hashengine.cpp
onecore\printscan\appxpackaging\lib\crypto\src\hashprovider.cpp
onecore\printscan\appxpackaging\lib\crypto\src\signaturecheckhelper.cpp
onecore\private\base\inc\appmodel\common\FileInUse.hpp
onecore\private\base\inc\appmodel\package\PackageMoniker.hpp
onecore\private\base\inc\Appmodel\Runtime\DependencyMiniRepositoryWriter.inl
onecore\private\base\inc\appmodel\statemanager\statelock.hpp
onecore\private\base\inc\appmodel\staterepository\cache\SRCache-Context.hpp
onecore\private\base\inc\appmodel\staterepository\cache\srcache-entity-package.hpp
onecore\private\base\inc\appmodel\staterepository\cache\SRCache-Key.hpp
onecore\private\base\inc\appmodel\staterepository\cache\SRCache-Manager.hpp
onecore\private\base\inc\appmodel\staterepository\dal/Database.hpp
onecore\private\base\inc\appmodel\staterepository\dal/ResourcePriority.hpp
onecore\private\base\inc\appmodel\staterepository\dal/Statement.hpp
onecore\private\com\inc\combase\ComRegistryCatalogFunctions.hpp
onecore\private\com\inc\deployment\RegistrationStore.hpp
onecore\private\com\inc\deployment\RegistrationStoreApiTypes.hpp
onecoreuap\admin\appmodel\enterprisemodernappmanagement\lib\autoupdatesettingspersistence\autoupdatesettingspersistence.cpp
onecoreuap\admin\appmodel\enterprisemodernappmanagement\lib\storeapputil\appmodelstorepersistencelayer.cpp
onecoreuap\base\appmodel\statemanager\helpers\policycache.cpp
onecoreuap\base\appmodel\tiledatarepository\tilesstorehandler\src\appxtileshandler.cpp
onecoreuap\base\appmodel\tiledatarepository\tilesstorehandler\src\appxvisualelementsparser.cpp
onecoreuap\base\appmodel\tiledatarepository\tilesstorehandler\src\staterepositoryutils.cpp
onecoreuap\base\appmodel\tiledatarepository\tilesstorehandler\src\tdlmigrationhelper.cpp
onecoreuap\base\appmodel\tiledatarepository\tilesstorehandler\src\tilesstorehandler.cpp
onecoreuap\base\appmodel\tiledatarepository\tilesstorehandler\src\tilestorepackageinfo.cpp
onecoreuap\base\appmodel\tiledatarepository\tilesstorehandler\src\xmlqueryhelper.cpp
onecoreuap\inetcore\Wwa\AppModelCommon\AutoPtr.hpp
onecoreuap\inetcore\Wwa\AppModelCommon\GenericMap.hpp
onecoreuap\inetcore\wwa\bytecode\lib\automapviewoffilehandle.cpp
onecoreuap\inetcore\wwa\bytecode\lib\bytecodecache.cpp
onecoreuap\internal\base\inc\TdlMigration.h
onf2Kv
OnLaunchUpdateCheck
Online
Only Stage and PreRegister Operations can be paused
Only validated %d files, but was expecting %d from the blockmap.
OOBEApp_cw5n1h2txyewy
OPCOx
Open %ws
OpenAppExecutionAliasForUserEx
OpenClassesRootKey(whichHive, KEY_READ, &classesRootKey)
OpenClsidKey(whichHive, clsid, KEY_READ, &clsidKey)
OpenCurrentUserLocalSettings
OpenDatabaseFromCache
openError
OpenEventW
OpenIsSafe
OpenProcess
OpenProcess() failed on %u of %u for %hs
OpenProcessToken
OpenRootKey
OpenSCManagerW
OpenSemaphoreW
OpenServiceW
OpenSetting: Subkey=%ls
OpenStateExplicit
OpenStateExplicitForUserSid
OpenStateExplicitForUserSidString
OpenStateExplicitForUserSidString %ls
OpenSubKey
OpenThread
OpenThread failed for idle task
OpenThreadToken
Operation
operation
Operation
operation
Operation %d
Operations
Optional
Optional Package %ws not found in related set for %ws .
optionalBundle
OptionalBundle
OptionalBundlePackage
OptionalBundleResource
optionalPackage
optionalPackageFamilyName
OptionalPackageIsSpecificVersionInRelatedSet
OptionalPackageSubtype
optionalPackageVersion
options
Options
options
orange
orangeRed
orchid
OriginalEOLPackage
OriginalFilename
OriginalUser
OriginalUserSid
originatingContextId
originatingContextMessage
originatingContextName
originCallerModule
originCallerReturnAddressOffset
originFile
originLineNumber
originModule
originName
OrphanedAppDataVolume
OSDATA\PackageRegistration\
OSDATA\Software\
OSDATA\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\AppModel\FamiliesAllowedForSYSTEM
OSDATA\UWAKeyIds\
OSIM failed deactivating prior to reactivation
OSIM failed deactivating prior to reactivation.
OSIM failed processing a request
OSIM Host
OSIM state = 
OSIM_KEYWORD
OSIMListTypeEnumMap
OsimState
osimState
OSIntegration.DEH.ActivationCatalogCollector
OSIntegration.DEH.ActivationCatalogCollectorForUser
OSIntegration.DEH.Collectors
OSIntegration.DEH.ComExeClassRegistration
OSIntegration.DEH.ComExeServerRegistration
OSIntegration.DEH.ComInprocHandlerClassDllRegistration
OSIntegration.DEH.ComInprocServerClassDllRegistration
OSIntegration.DEH.ComInterfaceRegistration
OSIntegration.DEH.ComManagedInprocServerClassRegistration
OSIntegration.DEH.ComProgIdRegistration
OSIntegration.DEH.ComProxyStubRegistration
OSIntegration.DEH.ComServiceClassRegistration
OSIntegration.DEH.ComServiceServerRegistration
OSIntegration.DEH.ComSurrogateClassRegistration
OSIntegration.DEH.ComSurrogateServerRegistration
OSIntegration.DEH.ComTreatAsClassRegistration
OSIntegration.DEH.ComTypeLibRegistration
OSIntegration.DEH.ExtensionCatalogCollector
OSIntegration.DEH.ExtensionRegistration
OSIntegration.DEH.Internal.ComClassRegistrationCombinedProperties
OSIntegration.DEH.PackagedComCatalogCollector
OSIntegration.DEH.PackagedComCatalogCollectorForUserOrSystemRegister
OSIntegration::DEH::ActivationCatalogCollector::AddOutOfProcessActivatableClassRegistration
OSIntegration::DEH::ActivationCatalogCollector::AddServerRegistration
OSIntegration::DEH::ActivationCatalogCollector::PendingRemove
OSIntegration::DEH::ActivationCatalogCollector::PendingWrite
OSIntegration::DEH::ActivationCatalogCollector::PendingWrite::<lambda_a3ade90a58a229906f7e7a75aa5dade1>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteExeSevers
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteExeSevers::<lambda_50680f91ddb1efb9c907403b6647db1f>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteInProcActivatableClasses
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteInProcActivatableClasses::<lambda_a52fdd8f16fa16e6a6f5586ca94f09ee>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteInterfaces
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteInterfaces::<lambda_28a9aeffadb68b7f065bb2f0a358cd34>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteOutOfProcActivatableClasses
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteOutOfProcActivatableClasses::<lambda_b57fa2ee1ba22931affa6b7580ba9323>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteProxyStubs
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteProxyStubs::<lambda_56bda67f51b15a3b51f835b51edb7ef9>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::RetrieveInProcessActivatableClassRegistration
OSIntegration::DEH::ActivationCatalogCollector::RetrieveOutOfProcessActivatableClassRegistration
OSIntegration::DEH::ActivationCatalogCollector::RetrieveServerRegistration
OSIntegration::DEH::ActivationCatalogCollectorForUser::PendingRemove
OSIntegration::DEH::Collectors::RuntimeClassInitialize
OSIntegration::DEH::ComClassRegistration::RuntimeClassInitialize
OSIntegration::DEH::ComExeServerRegistration::CreateClassRegistration
OSIntegration::DEH::ComExeServerRegistration::SetArguments
OSIntegration::DEH::ComExeServerRegistration::SetExecutable
OSIntegration::DEH::ComExeServerRegistration::SetSystemExecutableArchitecture
OSIntegration::DEH::ComInterfaceRegistration::CreateCompatibilityEntries
OSIntegration::DEH::ComInterfaceRegistration::PendingWriteRegistration
OSIntegration::DEH::ComInterfaceRegistration::SetAsynchronousInterface
OSIntegration::DEH::ComInterfaceRegistration::SetHasMachineScope
OSIntegration::DEH::ComInterfaceRegistration::SetProxyStubClsidWithSupportedArchitectures
OSIntegration::DEH::ComInterfaceRegistration::SetSynchronousInterface
OSIntegration::DEH::ComInterfaceRegistration::SetTypeLib
OSIntegration::DEH::ComInterfaceRegistration::SetUniversalMarshaler
OSIntegration::DEH::ComManagedInprocServerClassRegistration::SetAssembly
OSIntegration::DEH::ComManagedInprocServerClassRegistration::SetImplementationClass
OSIntegration::DEH::ComManagedInprocServerClassRegistration::SetRuntimeVersion
OSIntegration::DEH::ComOutofprocClassRegistration::RuntimeClassInitialize
OSIntegration::DEH::ComProgIdRegistration::CreateCompatibilityEntries
OSIntegration::DEH::ComProgIdRegistration::PendingWriteRegistration
OSIntegration::DEH::ComProgIdRegistration::SetClsidWithIsInsertableObject
OSIntegration::DEH::ComProgIdRegistration::SetCurrentVersion
OSIntegration::DEH::ComProgIdRegistration::SetDisplayName
OSIntegration::DEH::ComProgIdRegistration::SetHasMachineScope
OSIntegration::DEH::ComProxyStubRegistration::CreateCompatibilityEntries
OSIntegration::DEH::ComProxyStubRegistration::PendingCopyFiles
OSIntegration::DEH::ComProxyStubRegistration::PendingWriteRegistration
OSIntegration::DEH::ComProxyStubRegistration::SetDisplayName
OSIntegration::DEH::ComProxyStubRegistration::SetHasMachineScope
OSIntegration::DEH::ComProxyStubRegistration::SetPath
OSIntegration::DEH::ComProxyStubRegistration::SetPath_arm
OSIntegration::DEH::ComProxyStubRegistration::SetPath_arm64
OSIntegration::DEH::ComProxyStubRegistration::SetPath_x64
OSIntegration::DEH::ComProxyStubRegistration::SetPath_x86
OSIntegration::DEH::ComServerRegistration::CreateClassRegistration
OSIntegration::DEH::ComServerRegistration::CreateCompatibilityEntries
OSIntegration::DEH::ComServerRegistration::PendingWriteRegistration
OSIntegration::DEH::ComServerRegistration::SetApplicationDisplayName
OSIntegration::DEH::ComServerRegistration::SetApplicationId
OSIntegration::DEH::ComServerRegistration::SetArguments
OSIntegration::DEH::ComServerRegistration::SetCalculatedRegistrationProperties
OSIntegration::DEH::ComServerRegistration::SetDisplayName
OSIntegration::DEH::ComServerRegistration::SetExecutable
OSIntegration::DEH::ComServerRegistration::SetLaunchAndActivationPermission
OSIntegration::DEH::ComServerRegistration::SetServiceName
OSIntegration::DEH::ComServerRegistration::SetSurrogateAppId
OSIntegration::DEH::ComServerRegistration::SetSystemExecutableArchitecture
OSIntegration::DEH::ComServerRegistration::SetTrustLevel
OSIntegration::DEH::ComServiceServerRegistration::CreateClassRegistration
OSIntegration::DEH::ComServiceServerRegistration::SetArguments
OSIntegration::DEH::ComServiceServerRegistration::SetServiceName
OSIntegration::DEH::ComServiceServerRegistration::SetTrustLevel
OSIntegration::DEH::ComSurrogateClassRegistration::RuntimeClassInitialize
OSIntegration::DEH::ComSurrogateServerRegistration::CreateClassRegistration
OSIntegration::DEH::ComSurrogateServerRegistration::SetAppId
OSIntegration::DEH::ComSurrogateServerRegistration::SetCustomSurrogateExecutable
OSIntegration::DEH::ComSurrogateServerRegistration::SetCustomSurrogateSystemExecutableArchitecture
OSIntegration::DEH::ComTreatAsClassRegistration::CreateCompatibilityEntries
OSIntegration::DEH::ComTreatAsClassRegistration::PendingWriteRegistration
OSIntegration::DEH::ComTreatAsClassRegistration::SetAutoConvertTo
OSIntegration::DEH::ComTreatAsClassRegistration::SetDisplayName
OSIntegration::DEH::ComTreatAsClassRegistration::SetHasMachineScope
OSIntegration::DEH::ComTypeLibRegistration::CreateCompatibilityEntries
OSIntegration::DEH::ComTypeLibRegistration::PendingWriteRegistration
OSIntegration::DEH::ComTypeLibRegistration::SetDisplayName
OSIntegration::DEH::ComTypeLibRegistration::SetFlags
OSIntegration::DEH::ComTypeLibRegistration::SetHasMachineScope
OSIntegration::DEH::ComTypeLibRegistration::SetHelpDirectory
OSIntegration::DEH::ComTypeLibRegistration::SetLocaleId
OSIntegration::DEH::ComTypeLibRegistration::SetWin32Path
OSIntegration::DEH::ComTypeLibRegistration::SetWin64Path
OSIntegration::DEH::CreateActivationCatalogCollector
OSIntegration::DEH::CreateActivationCatalogCollectorForUser
OSIntegration::DEH::CreateExtensionCatalogCollector
OSIntegration::DEH::CreatePackagedComCatalogCollector
OSIntegration::DEH::CreatePackagedComCatalogCollectorForUserOrSystemRegister
OSIntegration::DEH::ExeServerRegistration::Create
OSIntegration::DEH::ExeServerRegistration::Retrieve
OSIntegration::DEH::ExtensionCatalogCollector::CreateExtensionRegistration
OSIntegration::DEH::ExtensionCatalogCollector::PendingRemove
OSIntegration::DEH::ExtensionCatalogCollector::PendingWrite
OSIntegration::DEH::ExtensionCatalogCollector::PendingWrite::<lambda_876117454afcc4e850e10f8e1c8f984f>::operator ()
OSIntegration::DEH::ExtensionCatalogCollector::RetrieveExtensionRegistration
OSIntegration::DEH::ExtensionCatalogCollector::RuntimeClassInitialize
OSIntegration::DEH::ExtensionRegistration::Create
OSIntegration::DEH::ExtensionRegistration::Retrieve
OSIntegration::DEH::ForEachExtensionRegistration
OSIntegration::DEH::Internal::ActivatableClassRegistration_Impl<struct OSIntegration::DEH::OutOfProcessActivatableClassRegistration>::get_ActivatableClassId
OSIntegration::DEH::Internal::ActivatableClassRegistration_Impl<struct OSIntegration::DEH::OutOfProcessActivatableClassRegistration>::get_Attributes
OSIntegration::DEH::Internal::ActivatableClassRegistration_Impl<struct OSIntegration::DEH::OutOfProcessActivatableClassRegistration>::Initialize
OSIntegration::DEH::Internal::AddDwordAttribute
OSIntegration::DEH::Internal::AddStringAttribute
OSIntegration::DEH::Internal::CExtensionRegistration::AddAttribute
OSIntegration::DEH::Internal::CExtensionRegistration::CheckAttributeNameDoesNotCollide
OSIntegration::DEH::Internal::CExtensionRegistration::get_ActivatableClassId
OSIntegration::DEH::Internal::CExtensionRegistration::get_Attributes
OSIntegration::DEH::Internal::CExtensionRegistration::get_ContractId
OSIntegration::DEH::Internal::CExtensionRegistration::get_Description
OSIntegration::DEH::Internal::CExtensionRegistration::get_DisplayName
OSIntegration::DEH::Internal::CExtensionRegistration::get_Icon
OSIntegration::DEH::Internal::CExtensionRegistration::get_Vendor
OSIntegration::DEH::Internal::CExtensionRegistration::PendingWriteToStore
OSIntegration::DEH::Internal::CExtensionRegistration::put_Description
OSIntegration::DEH::Internal::CExtensionRegistration::put_DisplayName
OSIntegration::DEH::Internal::CExtensionRegistration::put_Icon
OSIntegration::DEH::Internal::CExtensionRegistration::put_Vendor
OSIntegration::DEH::Internal::CheckAttributeNameDoesNotCollide
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddDataFormat
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddImplementedCategory
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddMiscStatusAspect
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddStringCustomAttribute
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddStringValueForInprocServer32CompatibilityKey
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddUint32CustomAttribute
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddVerb
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CalculateBinaryCompatibilityPropertiesIfNecessary
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CalculateSurrogateDllPath
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CreateClsidKeyTemplateFromSharedProperties
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CreateCompatibilityEntries
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CreateInprocHandler32Subkey
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CreateInprocServer32Subkey
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CreatePropertyValueFactoryIfNecessary
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::PendingWriteRegistration
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetAppId
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetApplicationDisplayName
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetAutoConvertTo
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetCalculatedRegistrationProperties
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetConversionReadable
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetConversionReadWritable
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetDefaultFormatName
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetDefaultIcon
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetDisplayName
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetDllPath
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetEnableVirtualizationForInprocHandler
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetEnableVirtualizationForInprocServer
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetExeServerArguments
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetExeServerPath
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetHasMachineScope
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocHandlerDllPath_arm
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocHandlerDllPath_arm64
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocHandlerDllPath_x64
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocHandlerDllPath_x86
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocHandlerHasMachineScope
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocServerDllPath_arm
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocServerDllPath_arm64
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocServerDllPath_x64
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocServerDllPath_x86
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocServerHasMachineScope
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInsertableObject
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetIsSystemInprocServerDll
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetMiscStatusDefault
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetOleDefaultHandler
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetOutofprocClassHasMachineScope
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetProgId
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetServerId
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetShortDisplayName
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetThreadingModel
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetToolboxBitmap32
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetTypeLib
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetTypeLibWithVersion
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetVersionIndependentProgId
OSIntegration::DEH::Internal::ConstructCommandLine
OSIntegration::DEH::Internal::ContractIdActivatableClassIdPairLifetimeTraits::Construct
OSIntegration::DEH::Internal::ContractIdActivatableClassIdPairLifetimeTraits::Destroy
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::AddActivatableClass
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::CalculateServerPermissions
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::Create
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::get_AppUserModelId
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::get_CommandLine
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::get_ExePath
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::get_Permissions
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::get_ServerName
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::PendingWriteToStore
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_AppUserModelId
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_CommandLine
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_ExePath
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_ExplicitPsmActivationType
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_HostRuntimeId
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_IsPackageRelativePath
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_RuntimeBehavior
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_TrustLevel
OSIntegration::DEH::Internal::GetPackagedFileAbsolutePath
OSIntegration::DEH::Internal::GetSystemFileAbsolutePath
OSIntegration::DEH::Internal::GetVirtualizationManagerDllFilename
OSIntegration::DEH::Internal::OutOfProcessActivatableClassRegistration_Impl::Create
OSIntegration::DEH::Internal::OutOfProcessActivatableClassRegistration_Impl::get_ServerRegistration
OSIntegration::DEH::Internal::OutOfProcessActivatableClassRegistration_Impl::PendingWriteToStore
OSIntegration::DEH::OutOfProcessActivatableClassRegistration::Create
OSIntegration::DEH::OutOfProcessActivatableClassRegistration::Retrieve
OSIntegration::DEH::PackagedComCatalogCollector::CreateExeServerRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateInprocHandlerClassRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateInprocServerClassRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateInterfaceRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateManagedInprocServerClassRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateProgIdRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateProxyStubRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateServiceServerRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateSurrogateServerRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateTreatAsClassRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateTypeLibRegistration
OSIntegration::DEH::PackagedComCatalogCollector::GetHasAnyClasses
OSIntegration::DEH::PackagedComCatalogCollector::PendingRemove
OSIntegration::DEH::PackagedComCatalogCollector::PendingWrite
OSIntegration::DEH::PackagedComCatalogCollector::PendingWriteForEachRegistration
OSIntegration::DEH::PackagedComCatalogCollector::RuntimeClassInitialize
OSIntegration::DEH::PackagedComCatalogCollector::SetIsAdditiveMode
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::GetMaxInstallOrder
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::PackageHasAnyRegistrationsOfTypeForScope
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::PackageHasAnyTypeLibRegistrationsForScope
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::PackageHasComRegistrationsForCurrentScope
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::PendingRemove
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::PendingWrite
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::SetIncomingPackageInstallOrder
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::SetMaxInstallOrder
OSIntegration::DEH::RegistryCompatibility::Details::CastValueDataSize
OSIntegration::DEH::RegistryCompatibility::Details::GetStringByteCountIncludingTerminator
OSIntegration::DEH::RegistryCompatibility::Details::GetStringLength
OSIntegration::DEH::RegistryCompatibility::Details::GetStringLengthIncludingTerminator
OSIntegration::DEH::RegistryCompatibility::Details::GetStringPointer
OSIntegration::DEH::RegistryCompatibility::GenericValueData::GenericValueData
OSIntegration::DEH::RegistryCompatibility::Key::AddSubkey
OSIntegration::DEH::RegistryCompatibility::Key::AddValue
OSIntegration::DEH::RegistryCompatibility::KeyPath::KeyPath
OSIntegration::DEH::RegistryCompatibility::Name<0,16383,1>::Name
OSIntegration::DEH::RegistryCompatibility::Name<1,256,0>::Name
OSIntegration::DEH::RegistryCompatibility::RegBinaryValueData::RegBinaryValueData
OSMaxVersionTested
OSMinVersion
OSName
OSRollbackPackages
OSs]z
OSVersionAppModel
OSVersionBuild
OSVersionMajor
OSVersionMinor
OSVersionRevision
oT$@f
other._current == nullptr
OtherPackageName
outgoingPackageFromUpdateList
OutgoingPackageName
OutOfProcessActivatableClassRegistration_Impl::Create(activatableClassId, serverRegistration.Get(), &classRegistration)
OutputDebugStringW
Overall time: %I64u ms
OverAllTime
oversubscribed distance tree
oversubscribed dynamic bit lengths tree
oversubscribed literal/length tree
Owner: %ls %u
Owner: N/A
oXL9oPt4A
p ATAVAWH
p AWH
p WATAUAVAWH
p WAVAWH
p WvA>
P z&:(J*
p![XT?
p!QV0&8
p"V^:'-
p"VZt.
p#RRP
p%.8a
P(M;B
p(Q6k7(
p(S0].U
p(Wx.
p(X|S
p*SZp
p*X3A
p*Xv\
p. 4*
P:\WindowsApps
p:_0#
p;_za>q
p@Q4K
p[V2F
P^917$
p`Rrr
p`W|1/
p1]Rz?L
P2|*1
P3>,R
p6X$8
p8[\p
p8Q3f
P9sWt
PA^_]
pA^_^
PA^_^
pA^_^
PA^_^
pA^_^
PA^_^[]
pA^_^[]
pA^_^][
PA^_^][
PA^A\_^]
pA^A]_^]
PA_A^_][
PA_A^_^]
pA_A^_^]
PA_A^_^]
pA_A^_^]
PA_A^_^]
pA_A^_^]
PA_A^_^]
pA_A^_^]
PA_A^_^]
pA_A^_^]
PA_A^_^]
pA_A^_^]
pA_A^A\_^
PA_A^A\_^[]
pA_A^A\_^[]
PA_A^A\_^[]
pA_A^A]A\_[]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package
package
Package %ls
Package %ls %ls %ls
Package %ws
Package %ws %ws
Package %ws %ws %ws %llu
Package %ws is in a bad state and must be reinstalled.
Package approved based on Enterprise origin and sideload settings
Package approved based on signed package origin and dev unlock or sideload settings
Package approved based on unsigned package origin and dev unlock
Package approved based on Windows Component or Windows Store origin
Package approved for unsigned package origin
Package does not exist for current user
Package family name to merge was not specified in ordering
Package full name = 
Package is already in termination table, skipping
Package is end of lifed and is thus not installable
Package is in a bad package status so it requires reinstall
Package is in a bad state and cannot be used as baseline for an update.
Package is in a modified or tampered state and must be re-staged.
Package is not installable because architecture preservation requirement is not satisfied
Package is not installed for the user, so it is not a reinstall
Package is not required by the specified user, but query is not only for specific user--check to see if it is required for machine.
Package is not yet indexed in package repository, so it is not a reinstall
Package is required because it is already installed for that user.
Package is required because it is Installable for other user that has this package family
Package Manager State = 
Package modified: a package file that is hard linked to an external file has been changed. File full path: %ws
Package name from manifest path: 
Package root folder %ws does not have correct ACLs. Please use the official tool to create package folders for app attach.
Package root folder parent %ws does not have correct ACLs. Please use the official tool to create package folders for app attach.
Package was added to termination table in previous servicing call, skipping
package.currentDirectoryPath
package.effectiveExternalPath
package.effectivePath
package.installedPath
package.machineExternalPath
package.mutablePath
package.userExternalPath
Package::Exists
Package::ExistsByEditionId
Package::ExistsByNameAndArchitectureAndVersionAndResourceIdAndPublisherId
Package::ExistsByPackageFamily
Package::ExistsByPackageFamilyAndPackageType
Package::ExistsByPackageFamilyAndPackageTypeAndResourceId
Package::ExistsByPackageFamilyAndPackageTypeAndResourceIdAndVersion
Package::ExistsByPackageFamilyAndResourceId
Package::ExistsByPackageFamilyAndResourceIdAndArchitecture
Package::ExistsByPackageFamilyAndResourceIdAndArchitectureAndVersion
Package::ExistsByPackageFamilyName
Package::ExistsByPackageFamilyNameAndPackageType
Package::ExistsByPackageFullName
Package::ExistsBySourceBundle
Package::ExistsBySourceBundleAndPackageType
Package::ExistsByUserAndApplicationUserModelId
Package::ExistsByUserAndNameAndArchitectureAndVersionAndResourceIdAndPublisherId
Package::ExistsByUserAndPackageFamily
Package::ExistsByUserAndPackageFamilyAndPackageType
Package::ExistsByUserAndPackageFamilyName
Package::ExistsByUserAndPackageFamilyNameAndPackageType
Package::ExistsByUserAndPackageFullName
Package::ExistsByUserAndPublisherId
Package::ExistsByUserOrDefaultAccountAndApplicationUserModelId
Package::ExistsByUserOrDefaultAccountAndPackageFamilyNameAndPackageType
Package::ExistsByUserOrDefaultAccountAndPackageFullName
Package::Find
Package::FindBundleAndMainOrOptionalNotPartOfBundleByUserAndNotOtherUser_SortedByPackageType
Package::FindByEditionId
Package::FindByPackageFamily
Package::FindByPackageFamilyAndPackageType
Package::FindByPackageFamilyAndPackageTypeAndResourceId
Package::FindByPackageFamilyAndPackageTypeAndResourceIdAndVersion
Package::FindByPackageFamilyAndResourceId
Package::FindByPackageFamilyAndResourceIdAndArchitecture
Package::FindByPackageFamilyName
Package::FindByPackageFamilyNameAndPackageType
Package::FindByPackageOrigin
Package::FindBySourceBundle
Package::FindBySourceBundleAndPackageType
Package::FindByUser
Package::FindByUserAndPackageFamily
Package::FindByUserAndPackageFamilyAndPackageType
Package::FindByUserAndPackageFamilyName
Package::FindByUserAndPackageFamilyNameAndPackageType
Package::FindByUserAndPackageTypeAndNotOtherUser
Package::FindByUserAndPublisherId
Package::FindByUserOrDefaultAccount
Package::FindByUserOrDefaultAccountAndApplicationUserModelId
Package::FindByUserOrDefaultAccountAndPackageFamilyNameAndPackageType
Package::FindByUserOrDefaultAccountAndPackageFullName
Package::FindByUserOrDefaultAccountAndPackageID
Package::FindMainOrOptionalByUserAndNotByFamilyAndOtherUser
Package::FindPackageFullNamesByUserSidAndPackageTypeAndTargetDeviceFamily
Package::Get
Package::GetByInstalledLocation
Package::GetByNameAndArchitectureAndVersionAndResourceIdAndPublisherId
Package::GetByPackageFamilyAndResourceIdAndArchitectureAndVersion
Package::GetByPackageFullName
Package::GetByUserAndApplicationUserModelId
Package::GetByUserAndNameAndArchitectureAndVersionAndResourceIdAndPublisherId
Package::GetByUserAndPackageFullName
Package::GetByUserAndPackageID
Package::GetByUserOrDefaultAccountAndPackageFullName
Package::GetEffectiveIsUninstallableByPackageFullName
Package::GetEffectiveLocationByUserAndApplicationUserModelId
Package::GetEffectiveLocationByUserAndPackage
Package::GetEffectiveLocationByUserAndPackageFullName
Package::GetEffectiveSupportedUsersByApplicationUserModelId
Package::GetEffectiveSupportedUsersByPackageFullName
Package::GetMainPackageDependencyByUserAndSupplierPackage
Package::GetPackageOriginByUserAndPackageFullName
Package::GetStagedPackageOriginByPackageFullName
Package\Data
Package\Index\PackageFullName
package1
package2
PackageAlsoSpecifiedByUri
PackageAppInstaller
PackageArchitecture
packageBaseKey
PackageCannotUpdateOtherPackageDueToFullName
PackageCannotUpdateOtherPackageDueToPackageType
PackageCannotUpdateOtherPackageDueToSameVersion
PackageCurrentlyInstalled, soMustBeAddedEvenIfNotSpecified
PACKAGED_COM_DEH_KEYWORD
packageDacl
packagedClassicApp
PackagedCom_GetMaxInstallOrder
PackagedCom_SetIncomingPackageInstallOrder
PackagedCom_SetMaxInstallOrder
packagedComContext->GetComClassEntriesForPackage(packageMoniker.Get(), &classesHandle)
packagedComContext->ReadComClassEntry(packageMoniker.Get(), clsid, properties)
packagedComContext->TryGetComClassIdForPackageByIndex(classesHandle, classIndex, &hasEntryAtIndex, &clsid)
PackageDependency
PackagedFullTrustEnabled
PackageDisplayName
PackageExtension
PackageExtension::Exists
PackageExtension::ExistsByCategory
PackageExtension::ExistsByPackage
PackageExtension::ExistsByPackageAndCategory
PackageExtension::ExistsByPackageAndIndex
PackageExtension::ExistsByUserAndCategory
PackageExtension::Find
PackageExtension::FindByCategory
PackageExtension::FindByPackage
PackageExtension::FindByPackageAndCategory
PackageExtension::FindByUserAndCategory
PackageExtension::Get
PackageExtension::GetByPackageAndIndex
PackageExternalLocation
PackageFamily is not in Staged key
PackageFamily::Exists
PackageFamily::ExistsByName
PackageFamily::ExistsByNameAndPublisherId
PackageFamily::ExistsByPackageFamilyName
PackageFamily::ExistsByPackageSID
PackageFamily::ExistsByPublisherId
PackageFamily::ExistsByUserAndNameAndPublisherId
PackageFamily::ExistsByUserAndPackageFamilyName
PackageFamily::Find
PackageFamily::FindByName
PackageFamily::FindByPackageSID
PackageFamily::FindByPublisherId
PackageFamily::FindByUser
PackageFamily::FindByUserAndPublisherId
PackageFamily::Get
PackageFamily::GetByNameAndPublisherId
PackageFamily::GetByPackageFamilyName
PackageFamily::GetByUserAndNameAndPublisherId
PackageFamily::GetByUserAndPackageFamilyName
PackageFamilyName
packageFamilyName
PackageFamilyName
packageFamilyName
PackageFamilyName
packageFamilyName
PackageFamilyName
PackageFamilyNameFromFullName
PackageFamilyNameFromId
PackageFamilyNameOne
PackageFamilyNameTwo
PackageFamilyPolicy
PackageFamilyStillInstalledForAnotherUser
PackageFlags
PackageFlags2
PackageFolder
PackageFolderOld
PackageFound
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
PackageFullname
PackageFullName
PackageFullname
PackageFullName
packageFullName
PackageFullName
PackageFullname
packageFullName
PackageFullname
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
PackageFullname
PackageFullName
packageFullName
PackageFullName
packageFullName
packagefullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
packagefullName
packageFullName
PackageFullName
packageFullName
PackageFullName
PackageFullName: %ls
PackageFullName: %ws
PackageFullNameFromId
PackageFullNames
PackageFullNameToUse
packageId
PackageId
packageId
PackageID
packageId
PackageIdFromFullName
PackageIndex
packageInplacePending
packageIsUsed
packageKey
PackageKey
packageKey
PackageKey
packageKey
PackageKey
packageKey
PackageKey
packageKey
PackageKey
packageKey
PackageKey
packageKey
PackageList
PackageLocation
PackageManagerAction
PackageManagerError
PackageManagerInternal::DeploymentRequest::CancelRequestAndSubmitReportIfHangDetected
PackageManagerMainPackageSuccess
PackageManagerPerfSummary
PackageManagerStartDeployment
PackageManagerStartDeploymentForAllApplications
PackageManagerStartDeploymentWithDependencies
packageManagerState
PackageManagerState
PackageManagerSuccess
PackageManagerSummaryError
PackageManagerUninstall
PackageMoniker
PackageMoniker count should be 1
PackageMoniker2
PackageMoniker3
PackageMonikerNew
PackageMonikerOld
PackageName
PackageNameAndPublisherIdFromFamilyName
PackageNameAndPublisherIdFromFamilyName %ls
PackageNameOne
PackageNameTwo
PackageNotDeferred
PackageOrigin
PackagePolicy
PackageProperty
PackageProperty::Exists
PackageProperty::ExistsByName
PackageProperty::ExistsByPackage
PackageProperty::ExistsByPackageAndIndex
PackageProperty::ExistsByPackageAndName
PackageProperty::ExistsByUserAndName
PackageProperty::Find
PackageProperty::FindByName
PackageProperty::FindByPackage
PackageProperty::FindByPackageAndName
PackageProperty::FindByUserAndName
PackageProperty::Get
PackageProperty::GetByPackageAndIndex
PackageRelativeApplicationId
packageRelativeFilePath
PackageRepair
PackageRepositoryAllocate
PackageRepositoryFree
PackageRepositoryRoot
PackageRollBackResult
packageRoot
PackageRootFolder
packageRootOld
PackageRow not initialized with lazy database acccess
Packages
Packages with different projection folders in the same stage request not supported.
PackagesCannotBeInstalledConcurrentlyDueToArchitecture
PackagesCannotBeInstalledConcurrentlyDueToFramework
PackagesCannotBeInstalledConcurrentlyDueToResourceID
PackageSID
PackageSid
PackageSID
PackageSidFromFamilyName
packageSidString.SetValueFromString(packageSid.GetRawBuffer(nullptr))
PackageSidToPackageCapabilitySid %ls %ls %p
PackageSidToPackageCapabilitySid %ls %p
PackagesInUseHandlerCreateFoundNoActionRequired
PackagesInUseHandlerExecute
PackageSize
PackageSkipped
PackageSource
packageSource
PackageSourceUri
PackageSourceUriProtocol
packageStatus
PackageStatus
PackageStatus_DependencyPackageIssue
PackageStatus_MarkPackageRemediationForRollbackFailure
PackageStatusOperationImplementation
PackageStatusUpdateBad_ModifiedPackage
PackagesToBeInstalled
PackagesToDestage
PackageTableRowKey
PackaGetRealStateRootPath
PackageType
PackageUpdateFailed
PackageUpdateFailedAttemptingRestage
PackageUri
PackageUser
PackageUser::Exists
PackageUser::ExistsByAppDataVolume
PackageUser::ExistsByPackage
PackageUser::ExistsByPackageFamilyNameAndPackageType
PackageUser::ExistsByPackageFullName
PackageUser::ExistsByPackageFullNameAndDeploymentState
PackageUser::ExistsByUser
PackageUser::ExistsByUserAndDeploymentState
PackageUser::ExistsByUserAndDeploymentStateAndIsExplicitlyInstalled
PackageUser::ExistsByUserAndPackage
PackageUser::ExistsByUserAndPackageFamilyNameAndPackageType
PackageUser::ExistsByUserAndPackageFullName
PackageUser::Find
PackageUser::FindByAppDataVolume
PackageUser::FindByPackage
PackageUser::FindByPackageFamilyNameAndPackageType
PackageUser::FindByPackageFullName
PackageUser::FindByUser
PackageUser::FindByUserAndDeploymentState
PackageUser::FindByUserAndDeploymentStateAndIsExplicitlyInstalled
PackageUser::FindByUserAndPackageFamilyNameAndPackageType
PackageUser::Get
PackageUser::GetByUserAndPackage
PackageUser::GetByUserAndPackageFullName
PackageUser::GetMainPackageFullNameByUserAndPackageFamilyName
PackageVersion
PackageVersion2
PackageVolumeStatusImplementation
PageCacheOverflow
PageCacheOverflowPeak
PageCachePeak
PageCacheUsed
PageCacheUsedPeak
PAI(A;;0x120089;;;AC)
PAI(A;;0x1200A9;;;AC)
pair->get_Value(&spRegistration)
paleGoldenrod
paleGreen
paleTurquoise
paleVioletRed
papayaWhip
ParseApplicationUserModelId
PartA_PrivTags
Partition
Path %ls
Path %ls level %u.
path %ws %u %u
Path: %ls
Path: %ls -> %ls
Path: %ls hasCentennial %u isFullTrust %u runAsSystem %u user %ls
Path: %ls subDir %ls
Path: %ls subDir %ls isFullTrust %u runAsSystem %u
Path: %ws
PathAllocCanonicalize
PathAllocCombine
PathAllocCombine(incomingPackage->GetPackageRoot(), relativePath, PATHCCH_ALLOW_LONG_PATHS, &absolutePath)
PathAllocCombine(systemDirectoryCharacters, relativePath, PATHCCH_ALLOW_LONG_PATHS, &absolutePath)
PathCchAppend
PathCchCombine
PathCchCombine %ls root %ls size %u
PathCchCombine %ls subDir %ls size %zu
PathCchRemoveBackslash
PathCchRemoveFileSpec
PathCchRemoveFileSpec %ls %u
PathCchSkipRoot
PathCreateFromUrlW
PathFileExistsW
PathFindFileNameW
PathFindNextComponentW
PathGetDriveNumberW
PathName
PathOne
PathStripPathW
PathTwo
Pause
Pause feature is off because the configuration reg key is not set.
PauseAppInstallerBackgroundUpdate
PausedandInstalledPackage
PauseEvent
PauseEventName
PauseOnFailure
pAXxi
payload->downloadFile.GetChars()
payload->hash.GetChars()
payload->id.GetChars()
pB[\x
pBR:&
pbTT$
pC^4_
pCi%p
pcT<L
pcU>>
pcU24.0
pCZVL74
peachPuff
PendingCopyFiles(packageMoniker, packageRoot.Get(), incomingPackage->GetSignatureOrigin(), fileManager.Get())
PendingWriteExeSevers(incomingPackage, registrationStoreContext.Get())
PendingWriteForEachRegistration( _classes.Get(), incomingPackage, resourcesManager)
PendingWriteForEachRegistration( _interfaces.Get(), incomingPackage, resourcesManager)
PendingWriteForEachRegistration( _progIds.Get(), incomingPackage, resourcesManager)
PendingWriteForEachRegistration( _proxyStubs.Get(), incomingPackage, resourcesManager)
PendingWriteForEachRegistration( _servers.Get(), incomingPackage, resourcesManager)
PendingWriteForEachRegistration( _treatAsClasses.Get(), incomingPackage, resourcesManager)
PendingWriteForEachRegistration( _typeLibs.Get(), incomingPackage, resourcesManager)
PendingWriteInProcActivatableClasses(packageMoniker, registrationStoreContext.Get())
PendingWriteInterfaces(packageMoniker, registrationStoreContext.Get())
PendingWriteOutOfProcActivatableClasses(packageMoniker, registrationStoreContext.Get())
PendingWriteProxyStubs(packageMoniker, registrationStoreContext.Get())
Percentage
PeriodicUpdateRecurrence
PerPackageEntries
PerPackageFamilyEntries
PERSIST
Persist %u
Persist %u folder %ls
PerSystemEntries
pFileManager->CopyFileToManagedDirectory( packageMoniker, packageRoot, signatureOrigin, ManagedDirectory::PackagedComProgramData, _properties.DllPath.Value.Get())
pFileManager->CopyFileToManagedDirectory( packageMoniker, packageRoot, signatureOrigin, ManagedDirectory::PackagedComProgramData, GetDllPathForArchitecture(architecture).Get())
PfRpcSendCommand
PfRpcServiceIsRunning
Phase
PhaseError
Phone package not installable on desktop
PHONECALLORIGIN_DEH_KEYWORD
pHT^I
pHW>8
pI]p%?
pIT2 
pIterable->First(&spIterator)
pITzf
piYVH
piYZX
piZR46
pjS8S
pjSt=
pKQ:r
pkV\C
pKY|[
Platform.All
PlatformPolicyBlockReasonMap
pM7k$
Policy.Aggressive.ConnectionMaxAge
Policy.Aggressive.ConnectionMaxCount
Policy.Aggressive.ConnectionMinCount
Policy.Aggressive.GCInterval
Policy.Aggressive.StatementMaxAge
Policy.Aggressive.StatementMaxCount
Policy.Aggressive.StatementMinCount
Policy.Normal.ConnectionMaxAge
Policy.Normal.ConnectionMaxCount
Policy.Normal.ConnectionMinCount
Policy.Normal.GCInterval
Policy.Normal.StatementMaxAge
Policy.Normal.StatementMaxCount
Policy.Normal.StatementMinCount
PolicyCache
PolicyCache %ws
PolicyManager_GetPolicyInt
PolicyReason
-poNK
Portrait
PortraitFlipped
Post DeStage repository commit transaction cost: %I64u ms
PostDowngradeVersion
powderBlue
pp^xd
PPTP00
PPTP00a
pPV2f
pQZ0}
PRAGMA %s;
PRAGMA %s=%I64d;
PRAGMA %s=%s;
PRAGMA optimize;
Preallocating file %ws failed. Ignoring the error as the file on disk already has full size %llu bytes
Pre-Approving package
PreDowngradeVersion
PreEvaluateClosePackagesInUse
Preference
PreferStub
PREINSTALLED_CONFIG_TASK_DEH_KEYWORD
PrepareDeploymentPath
PreRegisterOptionsBitMap
PreStageClosePackagesInUse
PreviousAppVersion
PreviousProjectionId
PrimaryBaseTile
PrimaryServiceConfigId
PrimaryTile
PrimaryTileAlreadyExists
PrimaryTileCreated
PrimaryTileId
PrimaryTileRemoved
PrimaryTileUser
PrimaryTileUserChangelog
PrimaryTileUserCreated
PrimaryTileUserNotFound
PrimaryTileUserRemoved
PrimaryTileUserUpdated
priority
PriPaths
Problem
process
ProcessCount
ProcessCreationTime
ProcessDeferredRequestStatesBegin
ProcessDeferredRequestStatesEnd
ProcessHostRuntimePackages
ProcessId
processId
ProcessId
ProcessIdToSessionId
ProcessIndex
ProcessInformation
Processing Downlevel Installed package failed
ProcessingPackageFullName
ProcessingSQL
ProcessLifetimeManager created
ProcessLifetimeManagerImpl::_FinishedServicingForDesktopBridgeApps
ProcessLifetimeManagerImpl::_HamAllowUninstall
ProcessLifetimeManagerImpl::_HamFinishedPackageServicing
ProcessLifetimeManagerImpl::_HamGetRunningAppsForPackage
ProcessLifetimeManagerImpl::_HamTerminatePackage
ProcessLifetimeManagerImpl::_HamTerminatePackagesForServicing
ProcessLifetimeManagerImpl::AllowServicing
ProcessLifetimeManagerImpl::FinishedServicing
ProcessName
ProcessorArchitecture
ProductId
ProductName
ProductVersion
profapi.dll
Profile
ProfileImagePath
ProgID
progIdString.Set(progId)
Program Files
Program Files\ModifiableWindowsApps
Programmable
progress
Progress
Projected
Projecting update--external location was previously projected
projectionID
projectionId
property.Present
property.Present && (property.Value != value)
PropertyId
propertyValueFactory->CreateString(value, &propValue)
propertyValueFactory->CreateUInt32(value, &propValue)
Protocol
PROTOCOL_DEH_KEYWORD
ProviderDisplayName
ProviderGuid
ProviderName
Provisioned
ProvisionForAppInstall
ProvisionSourceIsBundle
ProxyApp
ProxyStubClsid32
pRP8^
prPv`
pRU>'
prU8q
PRVAd
pSP^x
psQ~K6
pSRVK7-
p'SU/tm
psVV%
psWVk
PublicFolder
publisher
Publisher
PublisherDisplayName
PublisherFolders
PublisherName
purple
pxQTp
pxU>w&i
pxZ0!
pYWX6
pz\:(
pZS6\
q L;p
q RZ'
q!QV0&8
q!W4$?u
q"^T(
q"VZt.
q#Qz&
q#RRP
q(S0].U
q)P47
q)W\j
q*Xv\
q:_:C
q:_0#
q:PXi
q;]0f
q;_za>q
q;S>D.X
q[[<`6
q[]T?
q[V2F
q[Z~v
q`Rrr
q`S\'
q`W|1/
Q=up'
Q0A9W8u
q0R^G'
q1S:>
q1Tvx
q3VPK
q8[\p
Q8>dXA[[M
q8I9>
qA]<&
qATx:
qAVZn?
qB^Xh
qbTT$
qBZVZ
qC\r4
qC^4_
QcIHT
qCP>z
qcU>>
qcU24.0
qcXV/
qCZVL74
qHT:)
qhZ>"6
qIRtK
qIT2 
qITzf
qIU>E
qiYVH
qiZR46
qjS8S
qjSt=
qjT\0
qjW>e
qjWr:
qK7Cf
qKPV!
qKQ:r
qKQr8
qKU</
qkV\C
qp^xd
Qp{7h
qPV2f
qPX:D
qQ\Tg
qq]Z4
qQR8*
qqTt>
qqVRB
qqW8?7)
qQZ:8
qRP8^
qrPv`
qrRPf/
qrTzz
qrU8q
qrX2}
qS^pA
qsQ~K6
qSRVK7-
qsS|l/
qSU<1
qsWVk
qSY:w
qTt!H
qTt?D
QueryActiveSession
QueryFullProcessImageNameW
QueryPerformanceCounter
QueryServiceConfigW
QueryServiceStatus
QueryServiceStatusEx
QueryTraceW
QueryUnbiasedInterruptTime
QueryUserToken
QueryWin32SubsystemHost
Queued request is cancelled because it is overridden by higher priority request that has opposite effect. Cancelled queued request operation: %d, priority: %d. Overriding higher priority request operation: %d, priority: %d, target user SID: %ws, package full name: %ws
QueueLength
QueueRegistrationForRepairActivity
QueueStore: Cleaning up.
QueueStore: Found requests
QueueStore: Initialized.
QueueStore: Initializing.
QueueStore: ReadDeploymentRequests
QueueStore: ReadRequestsFromFilePath at %ws. Deleting.
QueueStore: Wrote entry for request
QueueStoreGuid
QuirkIsEnabledForPackage
qxZ0!
qy]|8
qyW:e
qyZza
qZ\tW
qZ]|@.
qZS06
qZS6\
R"E7Z
R#M1D$B
R$fA;Z*
R(']\
R\v/P
R]^F=
r`*T/
r}6Ic
R0"e:
R6n.5
RaiseException
RaiseFailFastException
RaSD%
Ratings
RatingsCategory
rb t&
RDSRecoverRequestsImplementation
Readable
ReadFile
readFileGLE
readFileResult
readiedInPlaceChanges
readOnly
ReadSetting: Name=%ls
ReadWritable
ReapplyAcls
reason
Reason
ReattemptCount
Recording Current Operation Context for Telemetry logging has failed. But it doesn't block deployment functionality
RecursivelyProtectSubFoldersToLevel %ls level %u
RecursivelyProtectSubFoldersToLevel %ls level %u %u
RedirectMrtResources
RegCloseKey
RegCreateKeyEx
RegCreateKeyExW
RegDeleteKeyExW
RegDeleteTreeW
RegDeleteValueW
RegEnumKeyExW
RegEnumValueW
RegFlushKey
RegGetKeySecurity
RegGetValueW
RegisterPackageByFullNameAndOptionalPackagesAsync %ws
RegisterPackageOnLogon packagetype %d is not supported
RegisterPrimaryTilesForUser
RegisterServiceCtrlHandlerExW
RegisterStateChangeNotification
RegisterStateChangeNotification %u
RegisterStateLock
registration
Registration cost: %I64u ms
registration->_properties.Server.Value.Set(exeServer->get_ServerName().Get())
registration->_serverName.Set(serverName.Get())
registration->Initialize(activatableClassId)
registrationScope->SetHasMachineScope(true)
registrationStore->CheckComPackageExists(packageFullName, &packageHasComRegistrations)
registrationStore->CreateComClassEntry(packageMoniker, _id, _properties)
registrationStore->CreateComInterfaceEntry(packageMoniker, _id, _properties)
registrationStore->CreateComPackageInstallOrderEntry( packageFullName, IsUserRegister(), m_incomingPackageProperties)
registrationStore->CreateComPackageInstallOrderEntry( Wrappers::HStringReference(Internal::MaxInstallOrder).Get(), IsUserRegister(), m_maxInstallOrderProperties)
registrationStore->CreateComProgIdEntry(packageMoniker, _id.Get(), _properties)
registrationStore->CreateComProxyStubEntry(packageMoniker, _id, _properties)
registrationStore->CreateComServerEntry(packageMoniker, _id, _properties)
registrationStore->CreateComTreatAsClassEntry(packageMoniker, _id, _properties)
registrationStore->CreateComTypeLibEntry( packageMoniker, _id, _versionNumber.Get(), _properties)
registrationStore->GetComTypeLib(packageFullName, typeLibId, &typeLibHandle)
registrationStore->GetComTypeLibsForPackage(packageFullName, &typeLibsHandle)
registrationStore->ReadComTypeLibEntry(packageFullName, typeLibId, versionId.get(), properties)
registrationStore->TryGetComPackageInstallOrder( Wrappers::HStringReference(Internal::MaxInstallOrder).Get(), IsUserRegister(), maxInstallOrder)
registrationStore->TryGetComTypeLibIdForPackageByIndex(typeLibsHandle, typeLibIndex, &hasTypeLibAtIndex, &typeLibId)
registrationStore->TryGetComTypeLibVersionIdByIndex(typeLibHandle, versionIndex, &hasVersionAtIndex, &versionId)
registrationStoreContext.query_to(&packagedComContext)
registrationStoreContext->CreateActivatableClassEntry( packageMoniker, _activatableClassId.Get(), _properties)
registrationStoreContext->CreateInterfaceEntry( packageMoniker.Get(), iid.Get(), *static_cast<InterfaceRegistration_Impl*>(itf.Get()))
registrationStoreContext->CreatePackage(packageMoniker.Get(), packageIsFramework)
registrationStoreContext->CreateProxyStubEntry( packageMoniker.Get(), clsid.Get(), *static_cast<ProxyStubRegistration_Impl*>(proxyStub.Get()))
registrationStoreContext->CreateServerEntry( packageMoniker.Get(), _serverName.Get(), _properties)
registrationStoreContext->RemoveActivationEntriesForPackage( packageMoniker.Get(), deploymentOperation, outgoingPackage->GetIsFramework())
registryCompatibilityCollector.query_to(&registryCompatibilityCollectorTestHooks)
registryCompatibilityCollector->AddKey( (_hasMachineScope ? Scope::Machine : Scope::User), Internal::GetAppIdKeyPath(_appId.Value), std::move(appIdKey))
registryCompatibilityCollector->AddKey( (_properties.HasMachineScope.GetValueOrDefault(false) ? Scope::Machine : Scope::User), Internal::GetClsidKeyPathForArchitecture(_id, architecture), Key(clsidKey))
registryCompatibilityCollector->AddKey( (_properties.HasMachineScope.GetValueOrDefault(false) ? Scope::Machine : Scope::User), Internal::GetClsidKeyPathForArchitecture(_id, architecture), std::move(clsidKey))
registryCompatibilityCollector->AddKey( (_properties.HasMachineScope.GetValueOrDefault(false) ? Scope::Machine : Scope::User), Internal::GetInterfaceKeyPathForArchitecture(_id, architecture), Key(interfaceKey))
registryCompatibilityCollector->AddKey( (_properties.HasMachineScope.GetValueOrDefault(false) ? Scope::Machine : Scope::User), Internal::GetProgIdKeyPath(_id.GetRawBuffer(nullptr)), std::move(progIdKey))
registryCompatibilityCollector->AddKey( (_properties.HasMachineScope.GetValueOrDefault(false) ? Scope::Machine : Scope::User), Internal::GetTypeLibVersionKeyPath(_id, _versionNumber.GetRawBuffer(nullptr)), std::move(typeLibVersionKey))
registryCompatibilityCollector->AddKey( (isMachineScope ? Scope::Machine : Scope::User), GetClsidKeyPathForArchitecture(_id, architecture), std::move(clsidKey))
registryCompatibilityCollectorTestHooks->SetIsAdditiveMode(incomingPackage)
RegistryKeyName
RegistryMapFactory< IExeServerActivatableClassRegistration * >::RegistryMap::Make(&_outOfProcessActivatableClasses)
RegistryMapFactory< IExeServerRegistration * >::RegistryMap::Make(&_exeServers)
RegistryMapFactory<ComProgIdRegistration*>::RegistryMap::Make(&_progIds)
RegistryMapFactory<ComTypeLibRegistration*>::RegistryMap::Make(&_typeLibs)
RegistryMapFactory<IInspectable*>::RegistryMap::Make(&_customAttributes)
RegistryMapFactory<IInspectable*>::RegistryMap::Make(&_implementedCategories)
RegistryMapFactory<IInspectable*>::RegistryMap::Make(&_miscStatusAspects)
RegistryMapFactory<IInspectable*>::RegistryMap::Make(&_verbs)
RegistrySubKeyName
RegLoadAppKeyW
RegOpenCurrentUser
RegOpenCurrentUserLocalSettings
RegOpenKeyEx
RegOpenKeyEx PSR
RegOpenKeyEx SCHEMAS
RegOpenKeyExW
RegOpenUserClassesRoot
RegQueryInfoKeyW
RegQueryValueExW
RegSetKeySecurity
RegSetKeyValueW
RegSetValueExW
ReIndexTilesForPackage
Rejected package: 
relatedSetPackage
RelatedSetSpecifiesDifferentVersionOptional
RelatedSetsPresentForPackagedService
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
ReleaseSRWLockShared
ReleaseStateLock
Remaining cost: %I64u ms
RemediationFromInplaceUpdate
RemediationReason
Removed package from related set because it is installed and in PACKAGE_STATUS_OK.
Removed package in related set because the user does not have the package family installed and did not request this optional package to be installed.
RemoveDeprovisionedPackageMarking
RemoveDesktopAppXMetadataForFolder
RemoveDirectory
RemoveDirectoryTree
RemoveDirectoryTree %ls
RemoveDirectoryTree %ws
RemoveDirectoryTree %ws staging %ws
RemoveDirectoryTreeExcept %ls
RemoveDirectoryTreeExcept %ws newRoot %ws
RemoveDirectoryW
RemoveDownlevelInstalledPackagesFromRegistryStore
RemovedPackage
RemoveEmptyCentennialStateFolders %ls
RemoveExtensionProgIds
RemoveFromContainer
RemoveInboxInstalledStatusOfPackageForUser
RemoveOrphanedDeletedFolder
RemoveOrphanedDeletedFolderIfNeeded %ws
RemovePackageFromList
RemovePackageFromRegistryStore
RemovePackageStatus
RemovePIIfromPath
RemovePrimaryTileForUser
RemovePrimaryTileForUserAndApplicationIdentity
RemovePrimaryTilesForPackage
RemovePrimaryTilesForUserAndPackage
RemovePublisherFolder Folder[%u]%ls of %u
RemoveSecondaryTilesForUser
RemoveSecondaryTilesForUserAndApplicationIdentity
RemoveSecondaryTilesForUserAndPackage
RemoveSecureAppDataFolder %ls
RemoveStageOnlyPackagesFromAddList
RemoveStateLocations
RemoveStatusOfMainPackageForAllUsers
RemoveTilesForRemovedApplicationsForUser
RemoveTilesForRemovedApplicationsForUserAndPackage
RemoveUpgradePackagesFromRegistryStore
Removing inbox app from PackageUser table as part of user profile deletion.
Removing orphaned directory
RemovingOptionalPackageFamily
RemovingPackageDependency
RemovingPackageInOptionalFamily
RemovingResourcePackage
RemovingUnusedFramework
RemovingWoWPackageDependency
Repair missing package state root
RepairAppDataACLForPackage
RepairGhostMinimumAgeForDeletion
Repairing registration of package 
RepairPackageRegistration
RepairResourcesPriAclsImplementation
replaced
ReplacedOutgoingPackage
ReplacePackageSidWithPackageCapabilitySid %ls %p %u
ReplacePackageSidWithPackageCapabilitySid %ls %p %u %u
ReportFileCopied %ws
ReportFileCopied %ws newRoot %ws
ReportFileCopied%ws
ReportProgress %llu
Repository commit transaction cost: %I64u ms
Repository initialize
Repository.SetOptions.SetCacheSize
repositoryOrigin
request
Request operation
RequestCount
Requested
RequestedPackageFullName
RequestedVersionAppModel
RequestedVersionBuild
RequestedVersionMajor
RequestedVersionMinor
RequestedVersionRevision
RequestPackageOperationImplementation
RequeueReason
Required
Required configuration data not found: %ws
RequiredFileNotYetComplete
requiresEAIntegrity
ReRegisterPackages
Reset of dev mode package %ws isn't supported
ResetEvent
ResetOverlayPriMergeChecksum
ResiliencyCurrentState
ResiliencyFile
ResiliencyFilePath
ResiliencyRecoverRequestExpiredOnExternalVolume
ResiliencyRecoverRequestFailed
Resolve dependency cost: %I64u ms
ResolveAppInstallerUri
ResolveDeferredRegistrations
ResolveDelayLoadedAPI
resource
Resource
ResourceGroup
ResourceId
ResourceManagerQueueGetString
ResourceName
ResourcePackage
Resources
Resources packages can only be serviced when the app package is already installed.  Expecting to find the app package for resource package %ws in the array, but it is not found.
resources.pri
resourcesManager->GetFileManager(&fileManager)
resourcesManager->GetRegistrationStoreContext(IID_PPV_ARGS(&extensionCatalogContext))
resourcesManager->GetRegistrationStoreContext(IID_PPV_ARGS(&registrationStore))
resourcesManager->GetRegistrationStoreContext(IID_PPV_ARGS(&registrationStoreContext))
resourcesManager->GetRegistrationStoreContext(IID_PPV_ARGS(&spRegistrationStore))
RestartEvent
RestartEventName
RestartHandlerEnableStatus
RestartHandlerFinishedServicing
RestartPackagesInUseSkipped
RestartStatus
RestrictAppDataToSystemVolume
RestrictAppToSystemVolume
RESTRICTED_LAUNCH_DEH_KEYWORD
RestrictedToSystemVolume
result
Result
result
Result
Result code = 0x
ResumeThread
RetryCount
returnCode
ReturnHr
ReturnNt
ReturnResults
ReturnVal
returnValue
ReturnValue
RevertToSelf
RGSH\U&JZ/o
RMCLIENT.dll
rMH9Z
RoActivateInstance
Roaming
RoamingDataStatus
RoGetActivationFactory
RoGetMatchingRestrictedErrorInfo
RoGetRegistrationStoreContext(Windows::Foundation::RegistrationScope_PerUser, nullptr, 0, IID_PPV_ARGS(&registrationStoreContext))
RoInitialize
ROLLBACK /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
RollbackDetailedMessageInfo
RollbackErrorFileInfo
RollbackRequest
Rolling back a loose file operation.
Rolling back a restored deployment request.
Rolling back external mutable directory projection
RoOriginateError
RoOriginateErrorW
RoOriginateLanguageException
RootFolder: %ws
rosyBrown
RoTransformError
RoUninitialize
royalBlue
RpcAsyncCompleteCall
RpcBindingBind
RpcBindingCreateW
RpcBindingFree
RpcBindingVectorFree
RpcEpRegisterW
RpcEpUnregister
RpcImpersonateClient
RpcRaiseException
RpcRevertToSelf
RPCRT4.dll
RpcServerInqBindings
RpcServerInqCallAttributesW
RpcServerRegisterIf3
RpcServerRegisterIfEx
RpcServerUnregisterIf
RpcServerUseProtseqEpW
RpcServerUseProtseqW
RpcStringFreeW
RR?7|
rrc;ie
rringDependentPackageUpdateRegistration
RSDS%
RSLCt
RSSTt
RtlAcquireSRWLockExclusive
RtlAcquireSRWLockShared
RtlAddAce
RtlAddFunctionTable
RtlAddGrowableFunctionTable
RtlAddProcessTrustLabelAce
RtlAllocateAndInitializeSid
RtlAllocateHeap
RtlAllocateHeap %u
RtlCaptureContext
RtlCaptureStackBackTrace
RtlCompareUnicodeString
RtlConvertSidToUnicodeString
RtlCopySid
RtlCreateAcl
RtlCreateAndSetSD
RtlCreateSecurityDescriptor
RtlDeleteCriticalSection
RtlDeleteElementGenericTableAvl
RtlDeleteFunctionTable
RtlDeleteGrowableFunctionTable
RtlDeleteSecurityObject
RtlDeriveCapabilitySidsFromName
RtlDetermineDosPathNameType_U
RtlDisownModuleHeapAllocation
RtlDllShutdownInProgress
RtlDosPathNameToNtPathName_U
RtlDosPathNameToNtPathName_U_WithStatus
RtlDosPathNameToRelativeNtPathName_U_WithStatus
RtlDowncaseUnicodeString
RtlEnterCriticalSection
RtlEnumerateGenericTableAvl
RtlEnumerateGenericTableWithoutSplayingAvl
RtlEqualSid
RtlEqualUnicodeString
RtlExpandEnvironmentStrings
RtlExpandEnvironmentStrings_U
RtlFindAceByType
RtlFreeHeap
RtlFreeSid
RtlFreeUnicodeString
RtlGetAppContainerNamedObjectPath
RtlGetDeviceFamilyInfoEnum
RtlGetPersistedStateLocation
RtlImpersonateSelf
RtlInitializeCriticalSection
RtlInitializeGenericTableAvl
RtlInitializeSRWLock
RtlInitUnicodeString
RtlInitUnicodeStringEx
RtlInsertElementGenericTableAvl
RtlIsGenericTableEmptyAvl
RtlIsMultiSessionSku
RtlIsMultiUsersInSessionSku
RtlIsStateSeparationEnabled
RtlLeaveCriticalSection
RtlLengthSid
RtlLookupElementGenericTableAvl
RtlLookupFunctionEntry
RtlNotifyFeatureUsage
RtlNtPathNameToDosPathName
RtlNtStatusToDosError
RtlNtStatusToDosErrorNoTeb
RtlNumberGenericTableElementsAvl
RtlpEnsureBufferSize
RtlPublishWnfStateData
RtlQueryFeatureConfiguration
RtlQueryPackageClaims
RtlQueryWnfStateData
RtlRbInsertNodeEx
RtlRbRemoveNode
RtlRegisterFeatureConfigurationChangeNotification
RtlReleaseRelativeName
RtlReleaseSRWLockExclusive
RtlReleaseSRWLockShared
RtlReportException
RtlReportExceptionEx
RtlSetSaclSecurityDescriptor
RtlStringCchCatW %ws size %u
RtlStringCchCatW Family
RtlStringCchCatW PREFIX %u
RtlStringCchCatW PROFILE
RtlStringCchCatW RAC %u
RtlStringCchCopyW
RtlStringCchCopyW %ws size %u
RtlUnregisterFeatureConfigurationChangeNotification
RtlUpcaseUnicodeChar
RtlValidSid
RtlVirtualUnwind
RtlWaitForWnfMetaNotification
RtlWow64IsWowGuestMachineSupported
RunAs
RunAsSystem
rundll32.exe AppXDeploymentExtensions.OneCore.dll,ShellRefresh
runFullTrust
runningAppsList
RUNTIME_DEH_KEYWORD
RuntimeType
RuntimeVersion
rZ[?4
s L;A
s WAVAWH
s!H;~
s#I;}
s$I;|$
S(H;S0u"
S:(ML;;NX;;;LW)
S:(ML;OICI;NW;;;LW)D:(A;OICI;GA;;;S-1-1-0)(A;OICI;FA;;;%ls)
s:J]y&
S:PAI
S:PAI(ML;OICI;NW;;;LW)
s[H;_
S}"Yb
S-1-1-0
S-1-2-1406295995-2538229729-1264070048-2919177457
S-1-5-18
S2e.T
s9L9q
SA6ww
saddleBrown
salmon
sandyBrown
Sanity limit is hit
Sanity limit reached %ls!
SbY'E
Schemas
SchemaUsed
ScratchOverflow
ScratchOverflowPeak
ScratchSizePeak
ScratchUsed
ScratchUsedPeak
SD9m'u.H
SDDL: %ls
SDDLString
sE!d";^4*
seaGreen
SEARCHINDEXER_EXTENSION_KEYWORD
SearchString
seaShell
SecondaryPaths
SecondaryTile
SecondaryTileId
SecondaryTileMigrated
SecondaryTileRemoved
SecondaryTileUser
SecondaryTileUserChangelog
Section
SecureSystemAppData
SecureSystemAppDataRetry
securityDescriptorString.Concat(packageDaclString, &securityDescriptorString)
securityDescriptorString.Concat(saclString, &securityDescriptorString)
securityDescriptorString.Initialize(defaultAAAPermissionsBase)
securityDescriptorString.Initialize(permissions)
SELECT _ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary FROM Activation WHERE ActivationKey IS ?;
SELECT _ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary FROM Activation;
SELECT _AppInstallerID, _Revision, PackageFamily, Uri, Version, LastChecked, CheckUpdateInterval, Flags, PauseUntil, _Dictionary FROM AppInstaller WHERE Uri=?;
SELECT _AppInstallerID, _Revision, PackageFamily, Uri, Version, LastChecked, CheckUpdateInterval, Flags, PauseUntil, _Dictionary FROM AppInstaller;
SELECT _AppInstallerUriID, _Revision, AppInstaller, UriType, "Index", Uri, _Dictionary FROM AppInstallerUri WHERE AppInstaller=? AND UriType & ? !=0 AND "Index"=?;
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND "Index"=? AND _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND Category=? AND _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Category=? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE ApplicationUserModelId=? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE EditionId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE EditionId IS ? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE Package=? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND _WorkId=0;
SELECT _ApplicationIdentityID FROM ApplicationIdentity WHERE ApplicationUserModelId=?
SELECT _ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary FROM ApplicationIdentity WHERE ApplicationUserModelId=?;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE _WorkId=0;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND "Index"=? AND _WorkId=0;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND _WorkId=0;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND Name=? AND _WorkId=0;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Name=? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Category=? AND KeyString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Category=? AND KeyString IS ? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND RegistrationInformation=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND RegistrationInformation=? AND _WorkId=0;
SELECT _AppxManifestID, _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppxManifestID, _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE Package=? AND _WorkId=0;
SELECT _AutoUpdatePackageID, _Revision, PackageFamily, Architecture, Version, PackageType, Flags, Uri, AppInstaller, _Dictionary FROM AutoUpdatePackage WHERE AppInstaller=? AND PackageType & ? != 0;
SELECT _BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE Package=? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE PackageType=? AND Bundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE PackageType=? AND Bundle=? AND _WorkId=0;
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE File=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE File=? AND _WorkId=0;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND _WorkId=0;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND Name=? AND _WorkId=0;
SELECT _DependencyGraphID FROM DependencyGraph WHERE _ShadowId=? AND _WorkId=? AND _WorkId<>0;
SELECT _DependencyGraphID, _Revision, _ShadowId FROM DependencyGraph WHERE _ShadowId=? AND _WorkId=? AND _WorkId<>0;
SELECT _DependencyGraphID, _Revision, _ShadowId, _IsMarkedForDeletion FROM DependencyGraph WHERE User=? AND DependentPackage=? AND SupplierPackage=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE _WorkId=?1) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?1))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependencyType=4 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependencyType=4 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependencyType=4 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 ORDER BY _WorkId DESC;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 ORDER BY "Index";
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=?5) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=?5))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 ORDER BY _WorkId DESC;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependencyType=4 AND SupplierPackage=?2 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 ORDER BY "Index";
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0;
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE DependentPackage=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC, "Index";
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE DependentPackage=? AND _WorkId=0 ORDER BY "Index";
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE DependentPackage=? AND DependencyType=? AND (_WorkId=0 OR _WorkId=?);
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE DependentPackage=? AND DependencyType=? AND _WorkId=0;
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE Name=? AND _WorkId=0;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE (_WorkId=0 OR _WorkId=?1) AND Digest IN (SELECT Digest FROM File WHERE (_WorkId=0 OR _WorkId=?1) GROUP BY Digest HAVING (COUNT(*) > 1)) ORDER BY Size;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE _WorkId=0 AND Digest IN (SELECT Digest FROM File WHERE _WorkId=0 GROUP BY Digest HAVING (COUNT(*) > 1)) ORDER BY Size;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE Package=? AND _WorkId=0;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE Package=? AND Flags & ? !=0 AND (_WorkId=0 OR _WorkId=?);
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE Package=? AND Flags & ? !=0 AND _WorkId=0;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE Package=? AND RelativeFilePath=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, Flags, _Dictionary FROM File WHERE Package=? AND RelativeFilePath=? AND _WorkId=0;
SELECT _MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE Application=? AND _WorkId=0;
SELECT _MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE Package=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND Name=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND Name=? AND Publisher=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND Name=? AND Publisher=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND Publisher=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND Publisher=? AND _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Category=? AND _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND "Index"=? AND _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND Category=? AND _WorkId=0;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE (User=0 OR User=?) AND Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY User DESC, _WorkId DESC;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE (User=0 OR User=?) AND Package=? AND _WorkId=0 ORDER BY User DESC;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE User=? AND Package=? AND _WorkId=0;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE Name=? AND PublisherId=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE Name=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE PackageFamilyName=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE PackageSID=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE PublisherId=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily;
SELECT _PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary FROM PackageFamilyUserResource WHERE PackageFamilyUser=?;
SELECT _PackageID FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID FROM Package WHERE PackageFullName=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _PackageID=?
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE EditionId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE EditionId IS ? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE Flags & ? !=0 AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE Flags & ? !=0 AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND Version=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND Version=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND Version=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND Version=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFullName=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageOrigin=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageOrigin=?1 AND (_WorkId=0 OR _WorkId=?2);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle<>0 AND SourceBundle NOT IN (SELECT _BundleID FROM Bundle WHERE (_WorkId=0 OR _WorkId=?1)) AND (_WorkId=0 OR _WorkId=?1)
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle<>0 AND SourceBundle NOT IN (SELECT _BundleID FROM Bundle WHERE _WorkId=0) AND _WorkId=0
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle=? AND PackageType & ? !=0 AND _WorkId=0;
SELECT _PackageIdentityID FROM PackageIdentity AS pi INNER JOIN Package AS p ON p.PackageFullName=pi.PackageFullName WHERE p._PackageID=? AND (p._WorkId=0 OR p._WorkId=?);
SELECT _PackageIdentityID FROM PackageIdentity AS pi INNER JOIN Package AS p ON p.PackageFullName=pi.PackageFullName WHERE p._PackageID=? AND p._WorkId=0;
SELECT _PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary FROM PackageIdentity WHERE PackageFullName=?;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE MutableLocation IS NOT NULL AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE MutableLocation IS NOT NULL AND _WorkId=0;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE Package=? AND _WorkId=0;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE ProjectionId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE ProjectionId=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND Name=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Name=? AND _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND "Index"=? AND _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND Name=? AND _WorkId=0;
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE Package=? AND _WorkId=0;
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE Package=? AND Kind=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE Package=? AND Kind=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE AppDataVolume=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE AppDataVolume=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE Package=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND DeploymentState=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND DeploymentState=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND DeploymentState=? AND IsExplicitlyInstalled=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND DeploymentState=? AND IsExplicitlyInstalled=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND Package=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Application=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Package=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE TileUniqueId=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND _WorkId=0;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE FolderName IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE FolderName IS ? AND _WorkId=0;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND _WorkId=0;
SELECT _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE _DependencyGraphID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE _DependencyGraphID=?1 AND (_WorkId=?2 OR (_WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE _ApplicationPropertyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE _ApplicationPropertyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE _SharedPackageContainerID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE _SharedPackageContainerID=? AND _WorkId=0;
SELECT _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE _OptionalBundlePackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE _OptionalBundlePackageID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE _ApplicationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE _ApplicationID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE _PackageExtensionID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE _PackageExtensionID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE _PackagePropertyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE _PackagePropertyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE _TargetDeviceFamilyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE _TargetDeviceFamilyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE _BundleID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE _BundleID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE _PackageUserID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE _PackageUserID=? AND _WorkId=0;
SELECT _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _PackageID=? AND _WorkId=0;
SELECT _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary FROM Activation WHERE _ActivationID=?;
SELECT _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE _PackageFamilyID=?;
SELECT _Revision, PackageFamily, PackageFullName, _Dictionary FROM PackageIdentity WHERE _PackageIdentityID=?;
SELECT _Revision, UserSid, _Dictionary FROM User WHERE _UserID=?;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND ApplicationIdentity=? AND _WorkId=0;
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE Id=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE Id=? AND _WorkId=0;
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE User=? AND _WorkId=0;
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE User=? AND Name=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SharedPackageContainerID, _Revision, _WorkId, Id, Name, User, Status, _Dictionary FROM SharedPackageContainer WHERE User=? AND Name=? AND _WorkId=0;
SELECT _SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary FROM SharedPackageContainerPackageFamily WHERE (_WorkId=0 OR _WorkId=?);
SELECT _SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary FROM SharedPackageContainerPackageFamily WHERE _WorkId=0;
SELECT _SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary FROM SharedPackageContainerPackageFamily WHERE SharedPackageContainer=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SharedPackageContainerPackageFamilyID, _Revision, _WorkId, SharedPackageContainer, PackageFamilyName, "Index", _Dictionary FROM SharedPackageContainerPackageFamily WHERE SharedPackageContainer=? AND _WorkId=0;
SELECT _UserID FROM User WHERE UserSid=?;
SELECT _UserID, _Revision, UserSid, _Dictionary FROM User WHERE UserSid=?;
SELECT _UserID, _Revision, UserSid, _Dictionary FROM User;
SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE _ShadowId=? AND _WorkId=? AND _WorkId<>0;
SELECT _WowDependencyGraphID, _Revision, _ShadowId FROM WowDependencyGraph WHERE _ShadowId=? AND _WorkId=? AND _WorkId<>0;
SELECT _WowDependencyGraphID, _Revision, _ShadowId, _IsMarkedForDeletion FROM WowDependencyGraph WHERE User=? AND DependentPackage=? AND SupplierPackage=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE _WorkId=?1) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE _WorkId=?1))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE EditionId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE EditionId=? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE Package=? AND _WorkId=0;
SELECT a._ApplicationID FROM Application AS a WHERE a.Package=? AND (a._WorkId=0 OR a._WorkId=?);
SELECT a._ApplicationID FROM Application AS a WHERE a.Package=? AND a._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND a.AppListEntry==?3 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND a.AppListEntry==?3 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0  AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0  AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0  AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=? AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) ;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=? AND a._WorkId=0 AND p._WorkId=0 ;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN ApplicationExtension AS ae ON ae.Application=a._ApplicationID WHERE ae.Category='windows.appExecutionAlias' AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN ApplicationExtension AS ae ON ae.Application=a._ApplicationID WHERE ae.Category='windows.appExecutionAlias' AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 AND ae._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a._ApplicationID=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a._ApplicationID=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.AppListEntry=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.AppListEntry=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE a.PackageRelativeApplicationId=?2 AND p.PackageFullName=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE a.PackageRelativeApplicationId=?2 AND p.PackageFullName=?1 AND a._WorkId=0 AND p._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=? AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=? AND a._WorkId=0 AND p._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.Package=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.Package=?2 AND pu.User=?1 AND a._WorkId=0 AND pu._WorkId=0;
SELECT a.ApplicationType FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) ORDER BY a._WorkId DESC;
SELECT a.ApplicationType FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND a._WorkId=0 AND pu._WorkId=0;
SELECT ae._AppExtensionID, ae._Revision, ae._WorkId, ae.Name, ae.Id, ae.PublicFolder, ae.DisplayName, ae.Description, ae.Extension, ae._Dictionary FROM AppExtension AS ae INNER JOIN ApplicationExtension AS ae2 ON ae2._ApplicationExtensionID=ae.Extension INNER JOIN Application AS a ON a._ApplicationID=ae2.Application INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p._PackageID=?1 AND (ae._WorkId=0 OR ae._WorkId=?2) AND (ae2._WorkId=0 OR ae._WorkId=?2) AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2)
SELECT ae._AppExtensionID, ae._Revision, ae._WorkId, ae.Name, ae.Id, ae.PublicFolder, ae.DisplayName, ae.Description, ae.Extension, ae._Dictionary FROM AppExtension AS ae INNER JOIN ApplicationExtension AS ae2 ON ae2._ApplicationExtensionID=ae.Extension INNER JOIN Application AS a ON a._ApplicationID=ae2.Application INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p._PackageID=?1 AND ae._WorkId=0 AND ae2._WorkId=0 AND a._WorkId=0 AND p._WorkId=0
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND a.ApplicationUserModelId=?3 AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND a.ApplicationUserModelId=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND p.PackageFullName=?3 AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND p.PackageFullName=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN FileTypeAssociation AS fta ON fta.Extension=ae._ApplicationExtensionID WHERE ae.Category='windows.fileTypeAssociation' AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND fta.FileType=?3 AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (pu._WorkId=0 OR pu._WorkId=?6) AND (fta._WorkId=0 OR fta._WorkId=?6);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN FileTypeAssociation AS fta ON fta.Extension=ae._ApplicationExtensionID WHERE ae.Category='windows.fileTypeAssociation' AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND fta.FileType=?3 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 AND fta._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN Protocol AS pr ON pr.Extension=ae._ApplicationExtensionID WHERE ae.Category='windows.protocol' AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pr.ProtocolName=?3 AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (pu._WorkId=0 OR pu._WorkId=?6) AND (pr._WorkId=0 OR pr._WorkId=?6);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN Protocol AS pr ON pr.Extension=ae._ApplicationExtensionID WHERE ae.Category='windows.protocol' AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pr.ProtocolName=?3 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 AND pr._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE ae.Category=?2 AND pu.User=?1 AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE ae.Category=?2 AND pu.User=?1 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application WHERE ae.Flags & ?2 != 0 AND a.ApplicationUserModelId=?1 AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application WHERE ae.Flags & ?2 != 0 AND a.ApplicationUserModelId=?1 AND ae._WorkId=0 AND a._WorkId=0;
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND aea.Alias=?3 AND (aea._WorkId=0 OR aea._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND aea.Alias=?3 AND aea._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT ai._AppInstallerID, ai._Revision, ai.PackageFamily, ai.Uri, ai.Version, ai.LastChecked, ai.CheckUpdateInterval, ai.Flags, ai.PauseUntil, ai._Dictionary FROM AppInstaller AS ai WHERE ai.PackageFamily=?;
SELECT ai._ApplicationIdentityID, ai._Revision, ai.ApplicationUserModelId, ai._Dictionary FROM ApplicationIdentity AS ai INNER JOIN PackageFamily AS pf ON ai.ApplicationUserModelId LIKE pf.PackageFamilyName || '!%' INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID AND p._PackageID=?2 WHERE (p._WorkId=0 OR p._WorkId=?3) AND ai._ApplicationIdentityID NOT IN ( SELECT ai._ApplicationIdentityID FROM ApplicationIdentity AS ai INNER JOIN Application AS a ON ai.ApplicationUserModelId=a.ApplicationUserModelId INNER JOIN PackageUser AS pu ON a.Package=pu.Package AND pu.User=?1 WHERE (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3));
SELECT ai._ApplicationIdentityID, ai._Revision, ai.ApplicationUserModelId, ai._Dictionary FROM ApplicationIdentity AS ai INNER JOIN PackageFamily AS pf ON ai.ApplicationUserModelId LIKE pf.PackageFamilyName || '!%' INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID AND p._PackageID=?2 WHERE p._WorkId=0 AND ai._ApplicationIdentityID NOT IN ( SELECT ai._ApplicationIdentityID FROM ApplicationIdentity AS ai INNER JOIN Application AS a ON ai.ApplicationUserModelId=a.ApplicationUserModelId INNER JOIN PackageUser AS pu ON a.Package=pu.Package AND pu.User=?1 WHERE a._WorkId=0 AND pu._WorkId=0);
SELECT ap._ApplicationPropertyID, ap._Revision, ap._WorkId, ap.Application, ap."Index", ap.Name, ap._Dictionary FROM ApplicationProperty AS ap INNER JOIN Application AS a ON a._ApplicationID=ap.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ap.Name=?2 AND pu.User=?1 AND (ap._WorkId=0 OR ap._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT ap._ApplicationPropertyID, ap._Revision, ap._WorkId, ap.Application, ap."Index", ap.Name, ap._Dictionary FROM ApplicationProperty AS ap INNER JOIN Application AS a ON a._ApplicationID=ap.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ap.Name=?2 AND pu.User=?1 AND ap._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT b._BundleID, b._Revision, b._WorkId, b.Package, b.UniqueLanguage, b.UniqueScale, b.UniqueDXFeatureLevel, b._Dictionary FROM Bundle AS b INNER JOIN Package AS p ON p.SourceBundle=b._BundleID WHERE p.PackageFullName=?1 AND (b._WorkId=0 OR b._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2);
SELECT b._BundleID, b._Revision, b._WorkId, b.Package, b.UniqueLanguage, b.UniqueScale, b.UniqueDXFeatureLevel, b._Dictionary FROM Bundle AS b INNER JOIN Package AS p ON p.SourceBundle=b._BundleID WHERE p.PackageFullName=?1 AND b._WorkId=0 AND p._WorkId=0;
SELECT COUNT(*) FROM ( SELECT DISTINCT pfu.User, pfu.PackageFamily FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON (pf._PackageFamilyID=pfu.PackageFamily) INNER JOIN Package AS p ON (p.PackageFamily=pfu.PackageFamily) INNER JOIN PackageUser AS pu ON (pu.Package=p._PackageID AND pu.User=pfu.User) LEFT OUTER JOIN PackageUserStatus AS pus ON (pus.User=pfu.User AND pus.PackageIdentity=p._PackageID) WHERE pf.PackageFamilyName=?1 AND p.PackageType=?2 AND pu.DeploymentState=3 AND IFNULL(pus.Status, 0) & ?4 = 0 AND (p._WorkId=0 OR p._WorkId=?5) AND (pu._WorkId=0 OR pu._WorkId=?5));
SELECT COUNT(*) FROM ( SELECT DISTINCT pfu.User, pfu.PackageFamily FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON (pf._PackageFamilyID=pfu.PackageFamily) INNER JOIN Package AS p ON (p.PackageFamily=pfu.PackageFamily) INNER JOIN PackageUser AS pu ON (pu.Package=p._PackageID AND pu.User=pfu.User) LEFT OUTER JOIN PackageUserStatus AS pus ON (pus.User=pfu.User AND pus.PackageIdentity=p._PackageID) WHERE pf.PackageFamilyName=?1 AND p.PackageType=?2 AND pu.DeploymentState=3 AND IFNULL(pus.Status, 0) & ?4 = 0 AND p._WorkId=0 AND pu._WorkId=0);
SELECT COUNT(*) FROM AppInstallerUri WHERE AppInstaller=? AND UriType & ? !=0;
SELECT COUNT(*) FROM AppxExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT COUNT(*) FROM AppxExtension WHERE _WorkId=0;
SELECT COUNT(*) FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE _WorkId=?1) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?1))) AND _IsMarkedForDeletion=0;
SELECT COUNT(*) FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT COUNT(*) FROM DependencyGraph WHERE _WorkId=0;
SELECT COUNT(*) FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0;
SELECT COUNT(*) FROM Package WHERE (_WorkId=0 OR _WorkId=?);
SELECT COUNT(*) FROM Package WHERE _WorkId=0;
SELECT COUNT(*) FROM Package WHERE PackageFamily=? AND (_WorkId=0 OR _WorkId=?);
SELECT COUNT(*) FROM Package WHERE PackageFamily=? AND _WorkId=0;
SELECT COUNT(*) FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?);
SELECT COUNT(*) FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND _WorkId=0;
SELECT COUNT(*) FROM PackageLocation WHERE Volume=? AND InstalledLocation LIKE '%WindowsApps%' AND (_WorkId=0 OR _WorkId=?);
SELECT COUNT(*) FROM PackageLocation WHERE Volume=? AND InstalledLocation LIKE '%WindowsApps%' AND _WorkId=0;
SELECT COUNT(*) FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT COUNT(*) FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND _WorkId=0;
SELECT COUNT(*) FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID = pu.Package LEFT OUTER JOIN PackageUserStatus AS pus ON (pus.User = pu.User AND pus.PackageIdentity = pu.Package) WHERE p.PackageFullName=?1 AND pu.DeploymentState=?2 AND IFNULL(pus.Status, 0) & ?3 = 0 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pus._WorkId=0 OR pus._WorkId=?4);
SELECT COUNT(*) FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID = pu.Package LEFT OUTER JOIN PackageUserStatus AS pus ON (pus.User = pu.User AND pus.PackageIdentity = pu.Package) WHERE p.PackageFullName=?1 AND pu.DeploymentState=?2 AND IFNULL(pus.Status, 0) & ?3 = 0 AND pu._WorkId=0 AND p._WorkId=0 AND pus._WorkId=0;
SELECT COUNT(*) FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.DeploymentState=?4 AND (pu._WorkId=0 OR pu._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) ;
SELECT COUNT(*) FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.DeploymentState=?4 AND pu._WorkId=0 AND p._WorkId=0 ;
SELECT COUNT(*) FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu.DeploymentState=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3);
SELECT COUNT(*) FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu.DeploymentState=?2 AND pu._WorkId=0 AND p._WorkId=0;
SELECT COUNT(*) FROM PackageUser WHERE (_WorkId=0 OR _WorkId=?);
SELECT COUNT(*) FROM PackageUser WHERE _WorkId=0;
SELECT COUNT(*) FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE _WorkId=?1) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE _WorkId=?1))) AND _IsMarkedForDeletion=0;
SELECT COUNT(*) FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT COUNT(*) FROM WowDependencyGraph WHERE _WorkId=0;
SELECT COUNT(*) FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0;
SELECT COUNT(DISTINCT(dh.WhenOccurred / ?4)) FROM DeploymentHistory AS dh INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=dh.PackageIdentity INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pi.PackageFamily WHERE dh.User=?1   AND pf.PackageFamilyName=?2   AND dh.HResult=?3   AND dh.WhenOccurred > (SELECT IFNULL(MAX(dh.WhenOccurred), 0) FROM DeploymentHistory AS dh INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=dh.PackageIdentity INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pi.PackageFamily WHERE dh.User=?1 AND pf.PackageFamilyName=?2 AND dh.HResult>=0 AND (dh._WorkId=0 OR dh._WorkId=?5))   AND (dh._WorkId=0 OR dh._WorkId=?5);
SELECT COUNT(DISTINCT(dh.WhenOccurred / ?4)) FROM DeploymentHistory AS dh INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=dh.PackageIdentity INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pi.PackageFamily WHERE dh.User=?1   AND pf.PackageFamilyName=?2   AND dh.HResult=?3   AND dh.WhenOccurred > (SELECT IFNULL(MAX(dh.WhenOccurred), 0) FROM DeploymentHistory AS dh INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=dh.PackageIdentity INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pi.PackageFamily WHERE dh.User=?1 AND pf.PackageFamilyName=?2 AND dh.HResult>=0 AND dh._WorkId=0)   AND dh._WorkId=0;
SELECT d._DependencyID, d._Revision, d._WorkId, d.DependentPackage, d."Index", d.DependencyType, d.Name, d.Publisher, d.MinVersion, d.MaxVersion, d.Flags, d._Dictionary FROM Dependency as d INNER JOIN PackageUser AS pu ON pu.Package=d.DependentPackage WHERE pu.DeploymentState=? AND d._WorkId=0 AND pu._WorkId=0;
SELECT d._DependencyID, d._Revision, d._WorkId, d.DependentPackage, d."Index", d.DependencyType, d.Name, d.Publisher, d.MinVersion, d.MaxVersion, d.Flags, d._Dictionary FROM Dependency as d INNER JOIN PackageUser AS pu ON pu.Package=d.DependentPackage WHERE pu.DeploymentState=?1 AND (d._WorkId=0 OR d._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2);
SELECT DISTINCT DependentPackage FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND DependencyType=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND DependencyType=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE SupplierPackage=?1 AND DependencyType=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT DISTINCT DependentPackage FROM DependencyGraph WHERE SupplierPackage=?1 AND DependencyType=?2 AND _WorkId=0;
SELECT DISTINCT Name FROM AppExtension WHERE (_WorkId=0 OR _WorkId=?3) AND Extension IN ( SELECT _ApplicationExtensionID FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN Package AS p ON p._PackageID=a.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND (a._WorkId=0 OR a._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3))
SELECT DISTINCT Name FROM AppExtension WHERE _WorkId=0 AND Extension IN ( SELECT _ApplicationExtensionID FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN Package AS p ON p._PackageID=a.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND a._WorkId=0 AND ae._WorkId=0 AND pu._WorkId=0 AND p._WorkId=0)
SELECT DISTINCT SupplierPackage FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE DependentPackage=?1 AND DependencyType=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE DependentPackage=?1 AND DependencyType=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE DependentPackage=?1 AND DependencyType=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT DISTINCT SupplierPackage FROM DependencyGraph WHERE DependentPackage=?1 AND DependencyType=?2 AND _WorkId=0;
SELECT EXISTS( SELECT 1 FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pfu.PackageFamily INNER JOIN Package AS p ON p.PackageFamily=pfu.PackageFamily INNER JOIN User AS u ON u._userID=pfu.User INNER JOIN PackageUser AS pu ON (pu.Package=p._PackageID AND pu.User=pfu.User) LEFT OUTER JOIN PackageUserStatus AS pus ON (pus.User=pu.User AND pus.PackageIdentity=p._PackageID) WHERE u._userID=?1 AND pf.PackageFamilyName=?2 AND p.PackageType=?3 AND pu.DeploymentState=?4 AND IFNULL(pus.Status, 0) & ?5 = 0 AND (p._WorkId=0 OR p._WorkId=?6) AND (pu._WorkId=0 OR pu._WorkId=?6));
SELECT EXISTS( SELECT 1 FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pfu.PackageFamily INNER JOIN Package AS p ON p.PackageFamily=pfu.PackageFamily INNER JOIN User AS u ON u._userID=pfu.User INNER JOIN PackageUser AS pu ON (pu.Package=p._PackageID AND pu.User=pfu.User) LEFT OUTER JOIN PackageUserStatus AS pus ON (pus.User=pu.User AND pus.PackageIdentity=p._PackageID) WHERE u._userID=?1 AND pf.PackageFamilyName=?2 AND p.PackageType=?3 AND pu.DeploymentState=?4 AND IFNULL(pus.Status, 0) & ?5 = 0 AND p._WorkId=0 AND pu._WorkId=0));
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN User AS u ON u._UserID=pu.User INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID WHERE pf.PackageFamilyName=?1 AND pu.DeploymentState=?2 AND u.UserSid!=?3 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4)  LIMIT 1);
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN User AS u ON u._UserID=pu.User INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID WHERE pf.PackageFamilyName=?1 AND pu.DeploymentState=?2 AND u.UserSid!=?3 AND pu._WorkId=0 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageFullName=?2 AND pu.DeploymentState=?3 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4)  LIMIT 1);
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageFullName=?2 AND pu.DeploymentState=?3 AND pu._WorkId=0 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu.DeploymentState=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu.DeploymentState=?2 AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN User AS u ON u._UserID = pu.User INNER JOIN Package AS p ON p._PackageID = pu.Package LEFT OUTER JOIN PackageUserStatus AS pus ON (pus.User = pu.User AND pus.PackageIdentity = pu.Package) WHERE u.UserSid=?1 AND p.PackageFullName=?2 AND pu.DeploymentState=?3 AND IFNULL(pus.Status, 0) & ?4 = 0 AND (pu._WorkId=0 OR pu._WorkId=?5) AND (u._WorkId=0 OR u._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) AND (pus._WorkId=0 OR pus._WorkId=?5));
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN User AS u ON u._UserID = pu.User INNER JOIN Package AS p ON p._PackageID = pu.Package LEFT OUTER JOIN PackageUserStatus AS pus ON (pus.User = pu.User AND pus.PackageIdentity = pu.Package) WHERE u.UserSid=?1 AND p.PackageFullName=?2 AND pu.DeploymentState=?3 AND IFNULL(pus.Status, 0) & ?4 = 0 AND pu._WorkId=0 AND AND u._WorkId=0 AND p._WorkId=0 AND pus._WorkId=0);
SELECT EXISTS(SELECT 1 FROM Activation WHERE _ActivationID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Activation WHERE ActivationKey IS ? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE _AppExtensionID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE _AppExtensionID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppInstaller WHERE _AppInstallerID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND a._WorkId=0 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=?1 AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=?1 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=?1 AND a.AppListEntry=?2 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=?1 AND a.AppListEntry=?2 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4)  AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0  AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3)  AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND a._WorkId=0  AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.Package=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.Package=?2 AND pu.User=?1 AND a._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE _ApplicationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE _ApplicationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE ApplicationUserModelId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE EditionId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE EditionId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND AppListEntry=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND AppListEntry=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p._PackageID=?1 AND ae.Category=?2 AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p._PackageID=?1 AND ae.Category=?2 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty AS ap INNER JOIN Application AS a ON a._ApplicationID=ap.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ap.Name=?2 AND pu.User=?1 AND (ap._WorkId=0 OR ap._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty AS ap INNER JOIN Application AS a ON a._ApplicationID=ap.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ap.Name=?2 AND pu.User=?1 AND ap._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE _ApplicationPropertyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE _ApplicationPropertyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE _AppxManifestID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE _AppxManifestID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup AS cg INNER JOIN ContentGroupFile AS cgf ON cgf.ContentGroup=cg._ContentGroupID WHERE cgf.File=?1 AND cg.ContentGroupType=2 AND (cg._WorkId=0 OR cg._WorkId=?2) AND (cgf._WorkId=0 OR cgf._WorkId=?2) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup AS cg INNER JOIN ContentGroupFile AS cgf ON cgf.ContentGroup=cg._ContentGroupID WHERE cgf.File=?1 AND cg.ContentGroupType=2 AND cg._WorkId=0 AND cgf._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup AS cg INNER JOIN ContentGroupFile AS cgf ON cgf.ContentGroup=cg._ContentGroupID WHERE cgf.File=?1 AND cg.Status=3 AND (cg._WorkId=0 OR cg._WorkId=?2) AND (cgf._WorkId=0 OR cgf._WorkId=?2) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup AS cg INNER JOIN ContentGroupFile AS cgf ON cgf.ContentGroup=cg._ContentGroupID WHERE cgf.File=?1 AND cg.Status=3 AND cg._WorkId=0 AND cgf._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup AS cg WHERE Package=? AND cg.ContentGroupType=2 AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup AS cg WHERE Package=? AND cg.ContentGroupType=2 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup AS cg WHERE Package=? AND cg.Status<>3 AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup AS cg WHERE Package=? AND cg.Status<>3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE _ContentGroupID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE _ContentGroupID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DefaultTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DefaultTile WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE DependentPackage=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE DependentPackage=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE DependentPackage=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE DependentPackage=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=?5) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=?5))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE _DependencyGraphID=?1 AND (_WorkId=?2 OR (_WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE _DependencyGraphID=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE DependencyType & ?1 !=0 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _DependencyGraphID=?4 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory AS dh INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=dh.PackageIdentity INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pi.PackageFamily WHERE dh.User=?1   AND pf.PackageFamilyName=?2   AND (dh._WorkId=0 OR dh._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory AS dh INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=dh.PackageIdentity INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pi.PackageFamily WHERE dh.User=?1   AND pf.PackageFamilyName=?2   AND dh._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE PackageExtension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE Name=? AND Publisher=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE Name=? AND Publisher=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND p._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND p.ResourceId=?4 AND p.Architecture=?5 AND p.Version=?6 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?7)  AND (pu._WorkId=0 OR pu._WorkId=?7) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND p.ResourceId=?4 AND p.Architecture=?5 AND p.Version=?6 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND pf.PublisherId=?2 AND p.ResourceId=?3 AND p.Architecture=?4 AND p.Version=?5 AND (p._WorkId=0 OR p._WorkId=?6)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND pf.PublisherId=?2 AND p.ResourceId=?3 AND p.Architecture=?4 AND p.Version=?5 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND (p._WorkId=0 OR p._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (p._WorkId=0 OR p._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE _PackageID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE EditionId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE EditionId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND Version=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND Version=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND Version=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND Version=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFullName=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFullName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE SourceBundle=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE SourceBundle=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE SourceBundle=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE SourceBundle=? AND PackageType & ? !=0 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension AS pe INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pe.Category=?2 AND pu.User=?1 AND (pe._WorkId=0 OR pe._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension AS pe INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pe.Category=?2 AND pu.User=?1 AND pe._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE _PackageExtensionID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE _PackageExtensionID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE _PackageFamilyID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE Name=? AND PublisherId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE Name=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE PackageFamilyName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE PackageSID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE PublisherId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE _PackageLocationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE _PackageLocationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE MutableLocation=? AND ProjectionId IS NOT NULL AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE Volume=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE Volume=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE _PackagePolicyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE _PackagePolicyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty AS pp INNER JOIN Package AS p ON p._PackageID=pp.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pp.Name=?2 AND pu.User=?1 AND (pp._WorkId=0 OR pp._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty AS pp INNER JOIN Package AS p ON p._PackageID=pp.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pp.Name=?2 AND pu.User=?1 AND pp._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE _PackagePropertyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE _PackagePropertyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE Package=? AND Kind=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE Package=? AND Kind=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSuperceded AS ps INNER JOIN PackageIdentity AS pi ON ps.PackageIdentity=pi._PackageIdentityID WHERE pi.PackageFullName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSuperceded AS ps INNER JOIN PackageIdentity AS pi ON ps.PackageIdentity=pi._PackageIdentityID WHERE ps.User=? AND pi.PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND pu._WorkId=0 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND (pu._WorkId=0 OR pu._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN User AS u ON pu.User=u._UserID WHERE pu.Package=? AND u.UserSid NOT IN (?,?) AND (pu._WorkId=0 OR pu._WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN User AS u ON pu.User=u._UserID WHERE pu.Package=? AND u.UserSid NOT IN (?,?) AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE _PackageUserID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE _PackageUserID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE AppDataVolume=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE AppDataVolume=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND DeploymentState=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND DeploymentState=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND DeploymentState=? AND IsExplicitlyInstalled=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND DeploymentState=? AND IsExplicitlyInstalled=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND Package=? AND _WorkId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND Package=? AND DeploymentState=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND Package=? AND DeploymentState=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUserStatus AS pus INNER JOIN User AS u ON u._UserID=pus.User INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pus.PackageIdentity WHERE u.UserSid=? AND pi.PackageFullName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Application=? AND TileId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainer WHERE _SharedPackageContainerID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SharedPackageContainer WHERE _SharedPackageContainerID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM User WHERE _UserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM User WHERE UserSid=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE _WowDependencyGraphID=?1 AND (_WorkId=?2 OR (_WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE _WowDependencyGraphID=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE _XboxPackageID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE _XboxPackageID=? AND _WorkId=0 LIMIT 1);
SELECT Flags, Subsystem, HostId, Executable, Entrypoint, StartPage, ResourceGroup FROM Application WHERE _ApplicationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT Flags, Subsystem, HostId, Executable, Entrypoint, StartPage, ResourceGroup FROM Application WHERE _ApplicationID=? AND _WorkId=0;
SELECT hr._HostRuntimeID, hr._Revision, hr._WorkId, hr.HostId, hr.PackageExtension, hr._Dictionary FROM HostRuntime AS hr INNER JOIN PackageExtension AS pe ON pe._PackageExtensionID=hr.PackageExtension INNER JOIN DependencyGraph AS dg ON dg.SupplierPackage=pe.Package WHERE dg.User=?1 AND hr.HostId=?2 AND dg.DependencyType=0x8 AND dg.DependentPackage IN (SELECT _PackageID FROM Package WHERE PackageFullName=?3 AND (_WorkId=0 OR _WorkId=?4)) AND (hr._WorkId=0 OR hr._WorkId=?4) AND (pe._WorkId=0 OR pe._WorkId=?4) AND (dg._WorkId=0 OR dg._WorkId=?4);
SELECT hr._HostRuntimeID, hr._Revision, hr._WorkId, hr.HostId, hr.PackageExtension, hr._Dictionary FROM HostRuntime AS hr INNER JOIN PackageExtension AS pe ON pe._PackageExtensionID=hr.PackageExtension INNER JOIN DependencyGraph AS dg ON dg.SupplierPackage=pe.Package WHERE dg.User=?1 AND hr.HostId=?2 AND dg.DependencyType=0x8 AND dg.DependentPackage IN (SELECT _PackageID FROM Package WHERE PackageFullName=?3 AND _WorkId=0) AND hr._WorkId=0 AND pe._WorkId=0 AND dg._WorkId=0;
SELECT LastValue FROM Sequence WHERE Id=?;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN (SELECT p.SourceBundle AS containedPackageSourceBundle FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND p.PackageType & ?1 != 0 AND p.SourceBundle != 0 AND p._PackageID NOT IN( SELECT p._PackageID from Package as p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?3 AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4)) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4)) ON p.SourceBundle=containedPackageSourceBundle WHERE p.PackageType & 8 != 0 AND (p._WorkId=0 OR p._WorkId=?4);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN (SELECT p.SourceBundle AS containedPackageSourceBundle FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND p.PackageType & ?1 != 0 AND p.SourceBundle != 0 AND p._PackageID NOT IN( SELECT p._PackageID from Package as p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?3 AND p._WorkId=0 AND pu._WorkId=0) AND p._WorkId=0 AND pu._WorkId=0) ON p.SourceBundle=containedPackageSourceBundle WHERE p.PackageType & 8 != 0 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND p._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package WHERE a.ApplicationUserModelId=? AND p._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package WHERE a.ApplicationUserModelId=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND (a._WorkId=0 OR a._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN DependencyGraph AS dg ON p._PackageID=dg.SupplierPackage INNER JOIN User AS u ON dg.User=u._UserID INNER JOIN Package AS p2 ON dg.DependentPackage=p2._PackageID INNER JOIN PackageFamily AS pf ON p2.PackageFamily=pf._PackageFamilyID WHERE dg.DependencyType=0x4 AND pf.PackageFamilyName=?1 AND u.UserSid=?2 AND (p._WorkId=0 OR p._WorkId=?3) AND (dg._WorkId=0 OR dg._WorkId=?3) AND (p2._WorkId=0 OR p2._WorkId=?3)
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN DependencyGraph AS dg ON p._PackageID=dg.SupplierPackage INNER JOIN User AS u ON dg.User=u._UserID INNER JOIN Package AS p2 ON dg.DependentPackage=p2._PackageID INNER JOIN PackageFamily AS pf ON p2.PackageFamily=pf._PackageFamilyID WHERE dg.DependencyType=0x4 AND pf.PackageFamilyName=?1 AND u.UserSid=?2 AND p._WorkId=0 AND dg._WorkId=0 AND p2._WorkId=0
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID WHERE p.PackageType & 0x29 !=0 AND p.Flags & 0x400 !=0 AND pf.PackageFamilyName=?1 AND (p._WorkId=0 OR p._WorkId=?2) 
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID WHERE p.PackageType & 0x29 !=0 AND p.Flags & 0x400 !=0 AND pf.PackageFamilyName=?1 AND p._WorkId=0 
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & 0x21 != 0 AND p.PackageFamily NOT IN ( SELECT p.PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND p._WorkId=0 AND pu._WorkId=0) AND p._WorkId=0 AND pu._WorkId=0
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & 0x21 != 0 AND p.PackageFamily NOT IN ( SELECT p.PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND(p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3)) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3)
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND p.ResourceId=?4 AND p.Architecture=?5 AND p.Version=?6 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?7)  AND (pu._WorkId=0 OR pu._WorkId=?7);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND p.ResourceId=?4 AND p.Architecture=?5 AND p.Version=?6 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE p.PackageFamily=?1 AND p.PackageType & ?2 !=0 AND (p._WorkId=0 OR p._WorkId=?3)  ORDER BY pf.Name, pf.PublisherId, p.ResourceId, p.Version;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE p.PackageFamily=?1 AND p.PackageType & ?2 !=0 AND p._WorkId=0  ORDER BY pf.Name, pf.PublisherId, p.ResourceId, p.Version;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND (p._WorkId=0 OR p._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND pf.PublisherId=?2 AND p.ResourceId=?3 AND p.Architecture=?4 AND p.Version=?5 AND (p._WorkId=0 OR p._WorkId=?6);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND pf.PublisherId=?2 AND p.ResourceId=?3 AND p.Architecture=?4 AND p.Version=?5 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND (p._WorkId=0 OR p._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (p._WorkId=0 OR p._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PublisherId=?1 AND (p._WorkId=0 OR p._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PublisherId=?1 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID WHERE pl.InstalledLocation=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND (pl._WorkId=0 OR pl._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID WHERE pl.InstalledLocation=?1 AND p._WorkId=0 AND pl._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID WHERE pl.Volume=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND (pl._WorkId=0 OR pl._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID WHERE pl.Volume=?1 AND p._WorkId=0 AND pl._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & ?2 != 0 AND p._PackageID NOT IN ( SELECT p._PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?3 AND p._WorkId=0 AND pu._WorkId=0) AND p._WorkId=0 AND pu._WorkId=0
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & ?2 != 0 AND p._PackageID NOT IN ( SELECT p._PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?3 AND(p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4)) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4)
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & ?3 != 0 AND p.SourceBundle=?4 AND p._PackageID NOT IN( SELECT p._PackageID from Package as p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (pu._WorkId=0 OR pu._WorkId=?5)) AND (p._WorkId=0 OR p._WorkId=?5) AND (pu._WorkId=0 OR pu._WorkId=?5);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & ?3 != 0 AND p.SourceBundle=?4 AND p._PackageID NOT IN( SELECT p._PackageID from Package as p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND p._WorkId=0 AND pu._WorkId=0) AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p._PackageID=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p._PackageID=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageType & ?2 != 0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageType & ?2 != 0 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND pu.DeploymentState=?2  AND p.PackageType & ?3 !=0 AND p.PackageOrigin!=?4  AND ?5 > pu.OSVersionWhenInstalled AND p.OSMaxVersionTested > CASE WHEN pu.OSVersionWhenInstalled > 0 THEN pu.OSVersionWhenInstalled ELSE ?6 END AND (p._WorkId=0 OR p._WorkId=?7) AND (pu._WorkId=0 OR pu._WorkId=?7);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND pu.DeploymentState=?2  AND p.PackageType & ?3 !=0 AND p.PackageOrigin!=?4  AND ?5 > pu.OSVersionWhenInstalled AND p.OSMaxVersionTested > CASE WHEN pu.OSVersionWhenInstalled > 0 THEN pu.OSVersionWhenInstalled ELSE ?6 END AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p WHERE p.PackageType & ?1 !=0 AND p.PackageOrigin!=?2 AND (     p.OSVersionWhenIndexed=0     OR     (         ?3 > p.OSVersionWhenIndexed         AND p.OSMaxVersionTested > CASE WHEN p.OSVersionWhenIndexed > 0 THEN p.OSVersionWhenIndexed ELSE ?4 END     ) ) AND (p._WorkId=0 OR p._WorkId=?5);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p WHERE p.PackageType & ?1 !=0 AND p.PackageOrigin!=?2 AND (     p.OSVersionWhenIndexed=0     OR     (         ?3 > p.OSVersionWhenIndexed         AND p.OSMaxVersionTested > CASE WHEN p.OSVersionWhenIndexed > 0 THEN p.OSVersionWhenIndexed ELSE ?4 END     ) ) AND p._WorkId=0;
SELECT p._PackageID, pf.PackageFamilyName FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE p.PackageOrigin=?1 AND (p._WorkId=0 OR p._WorkId=?2);
SELECT p._PackageID, pf.PackageFamilyName FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE p.PackageOrigin=?1 AND p._WorkId=0;
SELECT p.PackageFullName FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageType=1 AND pu.User=?1 AND pf.PackageFamilyName=?2 AND (p._WorkId=0 OR p._WorkId=?3)   AND (pu._WorkId=0 OR pu._WorkId=?3) ORDER BY p.Version DESC LIMIT 1;
SELECT p.PackageFullName FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageType=1 AND pu.User=?1 AND pf.PackageFamilyName=?2 AND p._WorkId=0  AND pu._WorkId=0 ORDER BY p.Version DESC LIMIT 1;
SELECT p.PackageFullName FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User INNER JOIN TargetDeviceFamily AS tdf ON tdf._TargetDeviceFamilyID=p.TargetDeviceFamily WHERE u.UserSid=?1 AND p.PackageType & ?2 !=0 AND tdf.Name=?3 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (tdf._WorkId=0 OR tdf._WorkId=?4);
SELECT p.PackageFullName FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User INNER JOIN TargetDeviceFamily AS tdf ON tdf._TargetDeviceFamilyID=p.TargetDeviceFamily WHERE u.UserSid=?1 AND p.PackageType & ?2 !=0 AND tdf.Name=?3 AND pu._WorkId=0 AND p._WorkId=0 AND tdf._WorkId=0;
SELECT p.PackageFullName, p.Version FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE p.PackageType & 0x21 !=0 AND u.UserSid=?1 AND pf.PackageFamilyName=?2 AND (p._WorkId=0 OR p._WorkId=?3)   AND (pu._WorkId=0 OR pu._WorkId=?3)   ORDER BY p.Version ASC LIMIT 1;
SELECT p.PackageFullName, p.Version FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE p.PackageType & 0x21 !=0 AND u.UserSid=?1 AND pf.PackageFamilyName=?2 AND p._WorkId=0  AND pu._WorkId=0  ORDER BY p.Version ASC LIMIT 1;
SELECT p.PackageFullName, p.Version FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE p.PackageType & 0x21 !=0 AND u.UserSid=?1 AND pf.PackageFamilyName=?2 AND pu.DeploymentState=?3 AND (p._WorkId=0 OR p._WorkId=?4)   AND (pu._WorkId=0 OR pu._WorkId=?4)   ORDER BY p.Version ASC LIMIT 1;
SELECT p.PackageFullName, p.Version FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE p.PackageType & 0x21 !=0 AND u.UserSid=?1 AND pf.PackageFamilyName=?2 AND pu.DeploymentState=?3 AND p._WorkId=0  AND pu._WorkId=0  ORDER BY p.Version ASC LIMIT 1;
SELECT p.SupportedUsers, p.PackageFullName FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p.SupportedUsers, p.PackageFullName FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND p._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0;
SELECT PackageOrigin FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT PackageOrigin FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT PackageOrigin FROM Package WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
SELECT PackageOrigin FROM Package WHERE _PackageID=? AND _WorkId=0;
SELECT PackageOrigin FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
SELECT PackageOrigin FROM Package WHERE PackageFullName=? AND _WorkId=0;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a._ApplicationID=?2 AND pel._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a._ApplicationID=?2 AND pel._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a._ApplicationID=?2 AND pel._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a._ApplicationID=?2 AND pel._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a._ApplicationID=?2 AND pl._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a._ApplicationID=?2 AND pl._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a._ApplicationID=?2 AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a._ApplicationID=?2 AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a._ApplicationID=?2 AND pl._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND pl._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND pl._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND pl._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=?1 AND p.PackageFullName=?2 AND pel._WorkId=?3 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=?1 AND p.PackageFullName=?2 AND pel._WorkId=0 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=0 AND p.PackageFullName=?2 AND pel._WorkId=?3 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=0 AND p.PackageFullName=?2 AND pel._WorkId=0 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?2 AND pl._WorkId=?3 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?2 AND pl._WorkId=0 AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=?1 AND p.PackageFullName=?2 AND pel._WorkId=0 AND p._WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=0 AND p.PackageFullName=?2 AND pel._WorkId=0 AND p._WorkId=0 UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?2 AND pl._WorkId=0 AND p._WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation WHERE User=?1 AND Package=?2 AND _WorkId=?3 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=?1 AND Package=?2 AND _WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=0 AND Package=?2 AND _WorkId=?3 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=0 AND Package=?2 AND _WorkId=0 UNION ALL SELECT IFNULL(MutableLink, InstalledLocation) FROM PackageLocation WHERE Package=?2 AND _WorkId=?3 UNION ALL SELECT IFNULL(MutableLink, InstalledLocation) FROM PackageLocation WHERE Package=?2 AND _WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation WHERE User=?1 AND Package=?2 AND _WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=0 AND Package=?2 AND _WorkId=0 UNION ALL SELECT IFNULL(MutableLink, InstalledLocation) FROM PackageLocation WHERE Package=?2 AND _WorkId=0 LIMIT 1;
SELECT pe._PackageExtensionID, pe._Revision, pe._WorkId, pe.Package, pe."Index", pe.Category, pe.Activation, pe.HostId, pe.Executable, pe.Entrypoint, pe.RuntimeType, pe.StartPage, pe.Flags, pe.Parameters, pe.CurrentDirectoryPath, pe.Id, pe.ResourceGroup, pe._Dictionary FROM PackageExtension  AS pe INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pe.Category=?2 AND pu.User=?1 AND (pe._WorkId=0 OR pe._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT pe._PackageExtensionID, pe._Revision, pe._WorkId, pe.Package, pe."Index", pe.Category, pe.Activation, pe.HostId, pe.Executable, pe.Entrypoint, pe.RuntimeType, pe.StartPage, pe.Flags, pe.Parameters, pe.CurrentDirectoryPath, pe.Id, pe.ResourceGroup, pe._Dictionary FROM PackageExtension AS pe INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pe.Category=?2 AND pu.User=?1 AND pe._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT pel._PackageExternalLocationID, pel._Revision, pel._WorkId, pel.User, pel.Package, pel.Path, pel._Dictionary FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE (pel.User=0 OR pel.User=?) AND pel.Package=? AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 ORDER BY pel.User DESC;
SELECT pel._PackageExternalLocationID, pel._Revision, pel._WorkId, pel.User, pel.Package, pel.Path, pel._Dictionary FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=? AND pel.Package=? AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 ORDER BY pel.User DESC;
SELECT pel._PackageExternalLocationID, pel._Revision, pel._WorkId, pel.User, pel.Package, pel.Path, pel._Dictionary FROM PackageExternalLocation AS pel INNER JOIN User AS u ON u._UserID=pel.User WHERE u.UserSid=?1 AND pel.Package=?2 AND (pel._WorkId=0 OR pel._WorkId=?3) ORDER BY pel._WorkId DESC;
SELECT pel._PackageExternalLocationID, pel._Revision, pel._WorkId, pel.User, pel.Package, pel.Path, pel._Dictionary FROM PackageExternalLocation AS pel INNER JOIN User AS u ON u._UserID=pel.User WHERE u.UserSid=?1 AND pel.Package=?2 AND pel._WorkId=0;
SELECT pel._PackageExternalLocationID, pel._Revision, pel._WorkId, pel.User, pel.Package, pel.Path, pel._Dictionary FROM PackageExternalLocation AS pel WHERE (pel.User=0 OR pel.User=?) AND pel.Package=? AND (pel._WorkId=0 OR pel._WorkId=?) AND (a._WorkId=0 OR a._WorkId=?) AND (pu._WorkId=0 OR pu._WorkId=?) ORDER BY pel.User DESC, pel._WorkId DESC;
SELECT pel._PackageExternalLocationID, pel._Revision, pel._WorkId, pel.User, pel.Package, pel.Path, pel._Dictionary FROM PackageExternalLocation AS pel WHERE pel.User=? AND pel.Package=? AND (pel._WorkId=0 OR pel._WorkId=?) AND (a._WorkId=0 OR a._WorkId=?) AND (pu._WorkId=0 OR pu._WorkId=?) ORDER BY pel.User DESC, pel._WorkId DESC;
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0;
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0;
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0;
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2);
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0;
SELECT pfu._PackageFamilyUserID, pfu._Revision, pfu.PackageFamily, pfu.User, pfu.WhenInstalled, pfu._Dictionary FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pfu.PackageFamily WHERE pfu.User=?1 AND pf.PackageFamilyName=?2;
SELECT pl._PackageLocationID, pl._Revision, pl._WorkId, pl.Package, pl.Volume, pl.InstalledLocation, pl.MutableLink, pl.MutableLocation, pl.ProjectionId, pl._Dictionary FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a._ApplicationID=?2 AND (pl._WorkId=0 OR pl._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) ORDER BY pl._WorkId DESC;
SELECT pl._PackageLocationID, pl._Revision, pl._WorkId, pl.Package, pl.Volume, pl.InstalledLocation, pl.MutableLink, pl.MutableLocation, pl.ProjectionId, pl._Dictionary FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a._ApplicationID=?2 AND pl._WorkId=0 AND pu._WorkId=0 AND a._WorkId=0 ORDER BY pl._WorkId DESC;
SELECT pp._PackagePropertyID, pp._Revision, pp._WorkId, pp.Package, pp."Index", pp.Name, pp._Dictionary FROM PackageProperty  AS pp INNER JOIN Package AS p ON p._PackageID=pp.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pp.Name=?2 AND pu.User=?1 AND (pp._WorkId=0 OR pp._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT pp._PackagePropertyID, pp._Revision, pp._WorkId, pp.Package, pp."Index", pp.Name, pp._Dictionary FROM PackageProperty AS pp INNER JOIN Package AS p ON p._PackageID=pp.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pp.Name=?2 AND pu.User=?1 AND pp._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT ps._PackageSupercededID, ps._Revision, ps.PackageIdentity, ps.User, ps._Dictionary FROM PackageSuperceded AS ps INNER JOIN PackageIdentity AS pi ON ps.PackageIdentity=pi._PackageIdentityID INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pi.PackageFamily INNER JOIN User AS u ON u._UserID=ps.User WHERE u.UserSid=? AND pf.PackageFamilyName=?;
SELECT ptu._PrimaryTileUserID, ptu._Revision, ptu._WorkId, ptu._Created, ptu._Modified, ptu.User, ptu.ApplicationIdentity, ptu.State, ptu.TileUniqueId, ptu._Dictionary FROM PrimaryTileUser AS ptu INNER JOIN ApplicationIdentity AS ai ON ptu.ApplicationIdentity=ai._ApplicationIdentityID WHERE ptu.User=?1 AND ai.ApplicationUserModelId=?2 AND (ptu._WorkId=0 OR ptu._WorkId=?3) ORDER BY ptu._WorkId DESC;
SELECT ptu._PrimaryTileUserID, ptu._Revision, ptu._WorkId, ptu._Created, ptu._Modified, ptu.User, ptu.ApplicationIdentity, ptu.State, ptu.TileUniqueId, ptu._Dictionary FROM PrimaryTileUser AS ptu INNER JOIN ApplicationIdentity AS ai ON ptu.ApplicationIdentity=ai._ApplicationIdentityID WHERE ptu.User=?1 AND ai.ApplicationUserModelId=?2 AND ptu._WorkId=0;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND pu._WorkId=0 AND p._WorkId=0 ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu._WorkId=0 AND p._WorkId=0 ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.DeploymentState=?4 AND (pu._WorkId=0 OR pu._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.DeploymentState=?4 AND pu._WorkId=0 AND p._WorkId=0 ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND pu._WorkId=0 AND p._WorkId=0 ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND (pu._WorkId=0 OR pu._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2);
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu._WorkId=0 AND p._WorkId=0;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) ORDER BY pu._WorkId DESC;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND p._WorkId=0 AND pu._WorkId=0;
SELECT pus.Status FROM PackageUserStatus AS pus INNER JOIN User AS u ON u._UserID=pus.User INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pus.PackageIdentity WHERE u.UserSid=? AND pi.PackageFullName=?;
SELECT SupportedUsers FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
SELECT SupportedUsers FROM Package WHERE PackageFullName=? AND _WorkId=0;
SELECT UserSid FROM User AS u WHERE u._UserID IN (SELECT ptu.User FROM PrimaryTileUser AS ptu WHERE _WorkId=?1 UNION ALL SELECT stu.User FROM SecondaryTileUser AS stu WHERE _WorkId=?1 LIMIT 1) LIMIT 1;
SELECT UserSid FROM User AS u WHERE u._UserID IN (SELECT ptuc.User FROM PrimaryTileUserChangelog AS ptuc WHERE _WorkId=?1 UNION ALL SELECT stuc.User FROM SecondaryTileUserChangelog AS stuc WHERE _WorkId=?1 LIMIT 1) LIMIT 1;
SELECT ValueNumber FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT ValueNumber FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND _WorkId=0;
SelectedUpdateBaseline
SelectionNamespaces
selectSingleNode
SendNotificationBeforeDeploymentOperation
SendNotificationPostDeploymentOperation
server
SERVER_EXTENSION_KEYWORD
ServerCore
ServerExecutable
Server-Gui-Shell
ServerName
serverName.Initialize(server->get_ServerName())
serverRegistration
ServerSideRepairPackageFileAclsImplementation
ServerSideRequestContentGroupsImplementation
Service
Service Control Flags
ServiceIdleTimeout
ServiceLifetimeManager::AllowUninstall
ServiceLifetimeManager::AllowUninstall - Don't call TerminateServicesInPackage
ServiceLifetimeManager::GetBlockingAumids
ServiceLifetimeManager::GetBlockingAumids - Don't call GetActiveAumidsInPackage
ServiceLifetimeManager::ShouldPackageBeServiced - NotPresentForUser
ServiceLifetimeManager::TerminateApplications
ServiceLifetimeManager::TerminateApplications - Don't call TerminateServicesInPackage
ServiceMain
ServiceParameters
ServiceStatus
ServiceWaitHintInterval
Session %d failed to CoCreateInstanceInSession
Session:%d!clsid:%s
session\
sessionId
SessionId
SessionKey
Set CPU priority failed for idle task
Set IO priority failed for idle task
SetCalculatedRegistrationProperties(incomingPackage)
SetContentGroupState
SetDeploymentError
SetDesktopAppXMetadataForFolder
SetDesktopAppXMetadataForPackage
SetEndOfFile
SetEntriesInAclW
SetErrorInfo
SetEvent
SetExtensionProperty
SetFileAttributesW
SetFileInformationByHandle
SetFileIntegrity failed for FilePath %ws with Origin %d
SetFileIntegrityInfoFailed
SetFilePointer
SetFilePointerEx
setFilePointerGLE
setFilePointerResult
SetFolderDataProtectionLevelIfNeeded %ls.
SetFolderDataProtectionLevelIfNeeded %u %ls.
SetFolderDataProtectionToLevel %ls level %u %u.
SetLastError
SetNamedSecurityInfo %ls %u
SetNamedSecurityInfoW
SetNamedSecurityInfoW %ws %ws
SetPackageFullName
SetPackageFullName %ls
SetPackageOverrideSetupPhase
SetPackageStatusBlockingForUserImplementation
SetPackageStatusBlockingImplementation
SetPackageStatusModifiedReason
SetProcessWindowStation
SetProtocolProperty
SetPublisherFolders
SetPublisherFolders %ls
SetRegistrationProperty
SetRegistrationProperty( _properties.ExecutionPackageFamily, executionPackageFamily)
SetRegistrationProperty( _properties.LaunchAndActivationPermission, launchAndActivationPermission)
SetRegistrationProperty(_appId, appId)
SetRegistrationProperty(_appId, classId)
SetRegistrationProperty(_applicationDisplayName, applicationName)
SetRegistrationProperty(_displayName, displayName)
SetRegistrationProperty(_exeServerArguments, arguments)
SetRegistrationProperty(_exeServerPath, path)
SetRegistrationProperty(_properties.ApplicationDisplayName, applicationDisplayName)
SetRegistrationProperty(_properties.ApplicationId, applicationId)
SetRegistrationProperty(_properties.Arguments, arguments)
SetRegistrationProperty(_properties.AsynchronousInterface, asynchronousInterface)
SetRegistrationProperty(_properties.AutoConvertTo, autoConvertTo)
SetRegistrationProperty(_properties.CLSID, clsid)
SetRegistrationProperty(_properties.CurrentVersion, currentVersion)
SetRegistrationProperty(_properties.DataFormats, dataFormatsIterable.Get())
SetRegistrationProperty(_properties.DisplayName, displayName)
SetRegistrationProperty(_properties.DllPath, path)
SetRegistrationProperty(_properties.DllPath_arm, path)
SetRegistrationProperty(_properties.DllPath_arm64, path)
SetRegistrationProperty(_properties.DllPath_x64, path)
SetRegistrationProperty(_properties.DllPath_x86, path)
SetRegistrationProperty(_properties.EnableOleDefaultHandler, true)
SetRegistrationProperty(_properties.EnableVirtualizationForInprocHandler, true)
SetRegistrationProperty(_properties.EnableVirtualizationForInprocServer, true)
SetRegistrationProperty(_properties.Executable, executable)
SetRegistrationProperty(_properties.ExplicitPsmActivationType, explicitPsmActivationType)
SetRegistrationProperty(_properties.Flags, flags)
SetRegistrationProperty(_properties.HasMachineScope, (hasMachineScope != FALSE))
SetRegistrationProperty(_properties.HelpDirectory, helpDirectory)
SetRegistrationProperty(_properties.HostRuntimeId, hostRuntimeId.Get())
SetRegistrationProperty(_properties.InprocHandlerDllPath_arm, path)
SetRegistrationProperty(_properties.InprocHandlerDllPath_arm64, path)
SetRegistrationProperty(_properties.InprocHandlerDllPath_x64, path)
SetRegistrationProperty(_properties.InprocHandlerDllPath_x86, path)
SetRegistrationProperty(_properties.InprocHandlerHasMachineScope, true)
SetRegistrationProperty(_properties.InprocServerDllPath_arm, path)
SetRegistrationProperty(_properties.InprocServerDllPath_arm64, path)
SetRegistrationProperty(_properties.InprocServerDllPath_x64, path)
SetRegistrationProperty(_properties.InprocServerDllPath_x86, path)
SetRegistrationProperty(_properties.InprocServerHasMachineScope, true)
SetRegistrationProperty(_properties.IsPackageRelativePath, isPackageRelativePath)
SetRegistrationProperty(_properties.IsSystemExecutable, isSystemExecutable != FALSE)
SetRegistrationProperty(_properties.IsSystemInprocServerDll, true)
SetRegistrationProperty(_properties.LocaleId, localeId)
SetRegistrationProperty(_properties.OutofprocClassHasMachineScope, true)
SetRegistrationProperty(_properties.Permissions, securityDescriptorString.Get())
SetRegistrationProperty(_properties.ProxyStubCLSID, proxyStubClsid)
SetRegistrationProperty(_properties.RuntimeBehavior, runtimeBehavior)
SetRegistrationProperty(_properties.ServerId, serverId)
SetRegistrationProperty(_properties.ServiceName, serviceName)
SetRegistrationProperty(_properties.SurrogateAppId, appId)
SetRegistrationProperty(_properties.SynchronousInterface, synchronousInterface)
SetRegistrationProperty(_properties.SystemExecutableArchitecture, architecture)
SetRegistrationProperty(_properties.TrustLevel, static_cast<AppModel::TrustLevel>(trustLevel))
SetRegistrationProperty(_properties.TrustLevel, trustLevel)
SetRegistrationProperty(_properties.TypeLibId, typeLibId)
SetRegistrationProperty(_properties.TypeLibVersionNumber, typeLibVersionNumber)
SetRegistrationProperty(_properties.UseUniversalMarshaler, true)
SetRegistrationProperty(_properties.Win32Path, win32Path)
SetRegistrationProperty(_properties.Win64Path, win64Path)
SetRegistrationProperty(property.Value, value)
SetRegistrationPropertyAllowMultipleIfConsistent
SetRegistrationPropertyAllowMultipleIfConsistent( _properties.ConversionReadWritable, readWritable)
SetRegistrationPropertyAllowMultipleIfConsistent( _properties.InprocHandlerHasMachineScope, true)
SetRegistrationPropertyAllowMultipleIfConsistent( _properties.InprocServerHasMachineScope, true)
SetRegistrationPropertyAllowMultipleIfConsistent( _properties.OutofprocClassHasMachineScope, true)
SetRegistrationPropertyAllowMultipleIfConsistent( _properties.VersionIndependentProgId, versionIndependentProgId)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.AutoConvertTo, autoConvertTo)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.ConversionReadable, readable)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.DefaultFormatName, defaultFormatName)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.DefaultIcon, defaultIcon)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.DisplayName, displayName)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.InsertableObject, true)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.MiscStatusDefault, miscStatusDefault)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.ProgId, progId)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.ShortDisplayName, shortDisplayName)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.Threading, static_cast<ThreadingModel>(threadingModel))
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.ToolboxBitmap32, toolboxBitmap32)
SetRestrictedErrorInfo
SetSecurityAccessMask
SetSecurityDescriptorControl
SetSecurityDescriptorDacl
SetSecurityDescriptorGroup
SetSecurityDescriptorOwner
SetSecurityInfo
SetSecurityInfo %ls
SetServiceStatus
SetStateSchema
SetThreadInformation
SetThreadpoolThreadMaximum
SetThreadpoolThreadMinimum
SetThreadpoolTimer
SetThreadPriority
SetThreadToken
Setting %ls %ls %u
Setting mutable package offline for package %ws failed. Continuing to next package.
Setting up mutable directory for package %ws failed. Continuing to next package.
Setting up user mutable directory for package %ws failed. Continuing to next package.
Setting up user mutable directory for package %ws user %ws failed. Continuing to next package.
Setting user mutable directory offline for package %ws user %ws failed. Continuing to next package.
SettingName
settingName is empty
Settings
SettingsApp_cw5n1h2txyewy
SettingsFolder
SettingSyncEnabled
SettingValue
SetTokenInformation
SetTrustLabelAtLowPriority
SetUnhandledExceptionFilter
SetValue %ls
SetValueFromString %ls
SetValueFromString %ls %ls
SetValueFromString %u %ws
SetVolumeStateRequest::UpdateAppDataMountPoints
SetVolumeStateRequest::UpdateAppDataMountPoints - Failed to create state mounted folders
SetWaitableTimer
SHA256
shareAccess
Shared
SharedAppsBlockedByPolicy
SharedAppsEnabled
SharedLocalIsEnabled
SharedPackageContainer
SharedPackageContainerClosePackagesInUse
SharedPackageContainerDeIndex
SharedPackageContainerEvaluate
SharedPackageContainerFinalize
SharedPackageContainerIndex
SharedPackageContainerPackageFamily
SharedPackageContainerPackagerootAcl
SharedPackageContainerStateCreation
SHCORE.dll
SHCreateMemStream
SHCreateStreamOnFileEx
SHGetKnownFolderPath
SHLoadIndirectString
ShortName
ShouldCreatePackageRootMetadata
ShowPrompt
SHStrDupW
SHTaskPoolQueueTask
shutdown
sidType %u
sienna
SignatureOrigin
signatureOrigin
SignatureOrigin
signatureOrigin
SignatureOrigin on disk does not match origin from repository
Signing certificate does not chain up to Microsoft Flighting Root 2014
Signing certificate does not chain up to the Microsoft Application Root Certificate Authority
Signing certificate does not chain up to the Microsoft Root Certificate Authority
Signing Certificate has no EKU fields (valid for all EKU)
Signing Certificate specifies invalid combination of both Windows Store and Component EKUs
silver
SimilarPackageFullName
single
SingletonRegisterAdd
SingletonRegisterRemove
SIS directory: 
SisPath
Size %u publisherRoot %ls
SizeInPages
SizeKB
sizeof(entry)
SizeTAdd(commandLineLength, 1, &commandLineLength)
SizeTAdd(commandLineLength, 2, &commandLineLength)
SizeTAdd(commandLineLength, wcslen(arguments), &commandLineLength)
SizeTToDWord(rawSize, &size)
SizeTToUInt32(actualLength, &reportedLength)
sjI;^
Skip PackagesInUseHandler because deployment operation is SYSTEM
SkipDestageForInbox
SkipDestageForResourcePack
Skipping CheckForUpdatesAndConflicts for preregister
Skipping machine scope registration mode for pre-register operation because package: %ws is Paused.
Skipping package pause due to explicit opt-in, rolling back failed transaction
Skipping per-machine registration mode for pre-register operation because package: %ws is Paused.
SkippingDeferredStaging
SkipRollbackOfUserProfileRemoval
skyBlue
slateBlue
slateGray
Sleep
SLMAllowUninstallActivity
SLMGetActiveAumidsInPackageActivity
SLMGetBlockingAumidsActivity
SLMTerminateApplicationsActivity
SLMTerminateServicesInPackageActivity
SLMTerminateSingleServiceActivity
SmallLogo
SMARTLOCKER://ORIGINCLAIM
SN+mu$^
snH;_
SOFTWARE
Software
Software\
Software\Classes
SOFTWARE\Classes
Software\Classes\Local Settings
SOFTWARE\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\Appmodel
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Deployment
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\PackageRepository
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository\Packages
SOFTWARE\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\Appmodel\ShellRefresh
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\SystemAppData\
Software\Microsoft\EnterpriseModernAppManagement\AppUpdateSettings
Software\Microsoft\SQMClient
Software\Microsoft\Windows NT\CurrentVersion\ProfileList
SOFTWARE\Microsoft\Windows NT\CurrentVersion\Server\ServerLevels
Software\Microsoft\Windows NT\CurrentVersion\SoftwareProtectionPlatform
SOFTWARE\Microsoft\Windows NT\CurrentVersion\TileDataModel\Migration
Software\Microsoft\Windows\CurrentVersion\AppModel
Software\Microsoft\Windows\CurrentVersion\Appmodel
SOFTWARE\Microsoft\Windows\CurrentVersion\AppModel\SharedPackageContainer
Software\Microsoft\Windows\CurrentVersion\AppModel\StagingInfo
Software\Microsoft\Windows\CurrentVersion\AppModel\StateChange
SOFTWARE\Microsoft\Windows\CurrentVersion\AppModel\StateRepository
SOFTWARE\Microsoft\Windows\CurrentVersion\AppModel\StateRepositoryStatus
Software\Microsoft\Windows\CurrentVersion\AppModel\SystemAppData\
Software\Microsoft\Windows\CurrentVersion\AppReadiness
SOFTWARE\Microsoft\Windows\CurrentVersion\Appx
Software\Microsoft\Windows\CurrentVersion\Appx
Software\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore
Software\Microsoft\Windows\CurrentVersion\Appx\ByteCodeQueue
SOFTWARE\Microsoft\Windows\CurrentVersion\Appx\DeploymentExtensionModules
Software\Microsoft\Windows\CurrentVersion\Appx\NewDeploymentOperation
Software\Microsoft\Windows\CurrentVersion\Appx\PackageSidRef
Software\Microsoft\Windows\CurrentVersion\Appx\PackageVolumes
Software\Microsoft\Windows\CurrentVersion\Appx\PendingContainerInstallList
Software\Microsoft\Windows\CurrentVersion\Appx\PurgeList
SOFTWARE\Microsoft\Windows\CurrentVersion\Appx\UndockedDeploymentExtensionModules
Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders
Software\Microsoft\Windows\CurrentVersion\Mrt
Software\Microsoft\Windows\CurrentVersion\Policies\AppX\Deployment\OSIntegration
Software\Microsoft\Windows\CurrentVersion\Policies\AppX\Deployment\PackageManager
Software\Microsoft\Windows\CurrentVersion\Policies\AppX\Deployment\StagingManager\FaultInjection
Software\Microsoft\Windows\CurrentVersion\Search
Software\Microsoft\Windows\CurrentVersion\Store\ContentId
Software\Policies\Microsoft\Windows\Appx
SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\AppModel\FamiliesAllowedForSYSTEM
sonecore\admin\appmodel\loosefilestreaming\appxloosefilerequesthandler.cpp
SonicWALL.MobileConnect_cw5n1h2txyewy
Source Path
SourceBundleId
SourceFilePath
sourceFilePath
SourceFileSize
SourceFolderPath
SourceMediaID
SourcePath
Specific version applicability called for all users is not supported
Specified ordering package family name not found to merge
spIterator->get_Current(spKeyValuePair.GetAddressOf())
spIterator->get_HasCurrent(&bHasCurrent)
spIterator->MoveNext(&bHasCurrent)
spKeyValuePair->get_Value(&spExtensionRegistration)
SplitIntoNewActionList
spPackagedComRegistration->PendingWriteRegistration( packageMoniker.Get(), incomingPackage, resourcesManager, spRegistrationStore.Get())
spRegistration
spRegistration.As(&spPackagedComRegistration)
spRegistrationStore->RemoveComPackageInstallOrderEntry( packageMoniker.Get(), IsUserRegister(), deploymentOperation)
spRegistrationStore->TryGetComPackageInstallOrder( packageMoniker.Get(), IsUserRegister(), outgoingPackageInstallOrder)
spRegistrationStore->TryGetComPackageInstallOrder(packageMoniker.Get(), false , installOrder)
springGreen
SQLite.AutoIndexWarning
sqlite3_bind_blob
sqlite3_bind_int
sqlite3_bind_int64
sqlite3_bind_null
sqlite3_bind_text16
sqlite3_busy_timeout
sqlite3_changes
sqlite3_clear_bindings
sqlite3_close
sqlite3_column_blob
sqlite3_column_bytes
sqlite3_column_int
sqlite3_column_int64
sqlite3_column_text
sqlite3_column_text16
sqlite3_column_type
sqlite3_config
sqlite3_create_function_v2
sqlite3_db_config
sqlite3_db_filename
sqlite3_db_handle
sqlite3_db_status
sqlite3_enable_shared_cache
sqlite3_errcode
sqlite3_errmsg
sqlite3_exec
sqlite3_expanded_sql
sqlite3_extended_errcode
sqlite3_extended_result_codes
sqlite3_file_control
sqlite3_finalize
sqlite3_free
sqlite3_get_autocommit
sqlite3_initialize
sqlite3_last_insert_rowid
sqlite3_log
sqlite3_malloc
sqlite3_next_stmt
sqlite3_open_v2
sqlite3_prepare_v2
sqlite3_profile
sqlite3_reset
sqlite3_result_blob
sqlite3_result_error_code
sqlite3_result_error_nomem
sqlite3_result_error16
sqlite3_result_int
sqlite3_result_int64
sqlite3_result_text16
sqlite3_shutdown
sqlite3_snprintf
sqlite3_sql
sqlite3_status
sqlite3_step
sqlite3_stmt_busy
sqlite3_total_changes
sqlite3_trace
sqlite3_user_data
sqlite3_value_blob
sqlite3_value_bytes
sqlite3_value_int
sqlite3_value_int64
sqlite3_value_text
sqlite3_value_text16
sqlite3_value_type
sqlite3_vfs_find
sqlite3_vfs_register
sqlite3_vfs_unregister
sqlite3_wal_autocheckpoint
sqlite3_wal_checkpoint_v2
sqlite3_wal_checkpoint_v2(): Mode:%d EffectiveMode:%d Size:%d Pages:%d
SqmSetOperationForPackageUpdate
Square150x150Logo
square150x150Logo
Square310x310Logo
Square44x44Logo
Square71x71Logo
srB(X|
SRCache_AllocStringBuffer
SRCache_DuplicateString
SRCache_ExpandMacros
SRCache_Free
SRCacheContext_AddToCache
SRCacheContext_CacheInitialize
SRCacheContext_CacheShutdown
SRCacheContext_Close
SRCacheContext_EnumerateData
SRCacheContext_GetField_UInt32
SRCacheContext_Open
SRCacheContext_OpenSubContext
SRCacheManager_Close
SRCacheManager_Open
SRD1t
SRDictionaryToPropertySet
SRJournal
sroptions
SRPackageDependencyExistsByUserAndPackageFullName
srpapi.dll
SrpIsAllowed
Stage required cost: %I64u ms
Stage user data cost: %I64u ms
stageCost
Staged
StageForInPlace
StageInplaceUpdate
StageRequired
StageUpdatePayloadFiles
StageUserData
StageUserData processing StateRepository package
StageUserDataStateHandler
StageUserDataStateHandler::Create
StageUserDataStateHandler::Execute
Staging
Staging action for package
Staging Manager failed to auto re-stage package
Staging Manager unexpected staging action: %d
Staging Manager: PrefetchFile(%ws) failed. Ignore failure.
Staging Manager: WalkTreeCallback(%ws) failed
Staging Manager: WalkTreeCallbackForManagedInstallerEA(%ws) failed in UpdateManagedInstallerMarker
Staging Manager: WalkTreeCallbackForManagedInstallerEA(%ws) failed while opening file
Staging PackageSourceUri not found for package %ws in order to stage %ws .
Staging PackageSourceUri not found for package %ws.
stagingAction
StagingAction
stagingAction
StagingHelpers::AreStreamsEqual() failed.
StagingSession could not be retrieved. The package may no longer be accessible or the backup manifest was lost.
StagingSession::CreatePackageFileHandle
StagingSessionsReadyForContentGroupReorderingEventSet
StagingStateHandlerStagePackage
Start ProcessLifetimeManagerImpl::_FinishedServicingForDesktopBridgeApps
Start ProcessLifetimeManagerImpl::_HamAllowUninstall
Start ProcessLifetimeManagerImpl::_HamFinishedPackageServicing
Start ProcessLifetimeManagerImpl::_HamGetRunningAppsForPackage
Start ProcessLifetimeManagerImpl::_HamTerminatePackage
Start ProcessLifetimeManagerImpl::_HamTerminatePackagesForServicing
Start ProcessLifetimeManagerImpl::AllowServicing
Start ProcessLifetimeManagerImpl::FinishedServicing
StartAppInstallerBackgroundUpdate
StartDeploymentImplementation
StartDeploymentOperation
StartDeploymentOperationForRemove
StartDeploymentOperationForResume
StartPage
StartServiceW
startswith
StartsWith(*string*,prefix) error: Invalid type (%d)
StartsWith(string,*prefix*) error: Invalid type (%d)
StartTraceW
state
State
state
State repository disabled, assuming non-intent package is not required
State repository disabled, assuming package is installable
State repository disabled, so it is not a reinstall
STATE_DEH_KEYWORD
STATE_LEFT_FROM_LAST_UNINSTALL
StateCreation
StateHandler
StateLock
StateMachine
StatementCache.Count
StatementCache.Hits
StatementCache.Lifespan
StatementCache.Misses
StatementCount
StatementPtr
StatementUsed
StatePaths
StateRepository*
StateRepository.Core.dll
StateRepository.Database.Statistics
StateRepository.DatabaseCache.Statistics
StateRepository.FailFastBusySnapshot
StateRepository.FailFastBusySnapshot.BusyCount
StateRepository.FailFastBusySnapshot.DatabasePtr
StateRepository.FailFastBusySnapshot.FirstBusySQL
StateRepository.FailFastBusySnapshot.Statement#%u.ExpandedSQL
StateRepository.FailFastBusySnapshot.Statement#%u.Ptr
StateRepository.FailFastBusySnapshot.Statement#%u.SQL
StateRepository.FailFastBusySnapshot.StatementCount
StateRepository.FailFastBusySnapshot.StatementInProgress
StateRepository.log
StateRepository.ResourcePriority.Inadequate
StateRepositoryDisabled
StateRepositoryDownlevelReadFailed
StateRepositoryStatus
StateRoot
StateSchema
static_cast< InProcessActivatableClassRegistration_Impl* >(classInterface.Get())-> PendingWriteToStore(packageMoniker, registrationStoreContext)
static_cast<DWORD>(integrityState)
static_cast<DWORD>(origin)
static_cast<ExeServerRegistration_Impl*>(exeServer)->AddActivatableClass(activatableClassId)
static_cast<ExeServerRegistration_Impl*>(serverInterface.Get())-> PendingWriteToStore(incomingPackage, registrationStoreContext)
static_cast<int>(requests->Count())
status
StatusToClear
statusToClear
StatusToClear
statusToSet
StatusToSet
steelBlue
stopping service
StorageId
StoreName
StoreSvc
strchr
strcmp
stream end
stream error
StreamingDataSourcePrefetchCanceled
StreamingDeploymentRequestFound
StreamingDeploymentRequestNotFoundExitingGracefully
StreamingRequestPackageMoniker
StreamingStatusGetFileSizeError
StreamingStatusUnavailableForLinkTarget
String
string too long
String1
String2
String3
StringCchCat
StringCchCat %ws
StringCchCat APPDATA
StringCchCat APPDATA_LOCAL
StringCchCat LOCAL
StringCchCopy(collectedCharacters + collectedCharaterOffset, collectedCharacterCount - collectedCharaterOffset, sourceCharacters)
StringCchCopyN %zu root %ls
StringCchCopyN %zu systemStateRoot %ls
StringCchLength %ls
StringCchPrintf
StringCchPrintf %ls %llu
StringCchPrintf %ls %u
StringCchPrintf %ls %zu
StringCchPrintf %ls size %u
StringCchPrintf %u
StringCchPrintf %ws %ws
StringCchPrintf LOCAL %u
StringCchPrintf LOCALCACHE %u
StringCchPrintf ROAMING %u
StringCchPrintf TEMP %u
StringCchPrintf(commandLine.get(), commandLineLength + 1, L"\"%ls\" %ls", executableAbsolutePath, arguments)
StringCchPrintf(commandLine.get(), commandLineLength + 1, L"\"%ls\"", executableAbsolutePath)
StringCchPrintf(m_string, ARRAYSIZE(m_string), L"%u", value)
StringCchPrintf(m_string, ARRAYSIZE(m_string), L"%x", value)
StringCchPrintfW(packageDacl, length, comDACLFormat, packageSidString.GetChars())
StringFileInfo
StringFromCLSID
StringFromGUID2
StringFromGUID2(guid, m_string, ARRAYSIZE(m_string)) != ARRAYSIZE(m_string)
StringHasEmbeddedNull(value)
StripExtendedPathPrefixIfNecessary %ls
Stub preference doesn't match currently installed package.  Allowing force update from any version.
StubPreference
SubDir %ls
SubDir %ls user %ls
SubDir %ls user %ls package %ls publisher %ls
Subkey %ls
Subkey %ls path %ls
SubmitThreadpoolWork
Submitting WER report
Subsystem
SuccessfullyConvertedCentennialTokenToUserToken
SUDCreateRoot
SUDCreateRootRetry
SUDSetRootSecurity
Summary
SummaryError
SupercedeAllUsers
supplier
SupplierPackageName
SupportedExternalFSTypes
SupportedInternalFSTypes
SupportedUsers
SupportsMultipleInstances
SUVWATAUAVAWH
SUVWAVH
SUVWH
svchost.exe
SvchostPushServiceGlobals
SVWATAUAVAWH
SVWAVAWH
SVWAVH
Symbol
synchronous
SynchronousInterface
System
SYSTEM\Setup
System\Setup\Status
SYSTEM\Setup\Upgrade\Appx\Applications
SystemAppData
systemDirectoryLength == 0
SystemRegisterAdd
SystemRegisterRemove
SystemTimeToFileTime
SystemVolume
T -!qb
t D8I
T"u\DsF
t$ @8up
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ fA
t$ H;\$0s=I
t$ I;
t$ UAVAWH
t$ UH
t$ UWATAUAVH
t$ UWATAUAWH
t$ UWATAVAWH
t$ UWAUAVAWH
t$ UWAVH
t$ UWAWH
t$ WATAUAVAWH
t$ WATAVH
t$ WAVAWH
t$ WH
t$$fD
t$(E3
T$(E3
T$@A*
T$@D3
T$@E3
t$@H;
t$@I;
T$@L;
T$@M;
t$`@8u
T$`E3
t$`fD
T$`H;
T$0@8
T$0A;
T$0E3
t$0E3
T$0E3
T$0H9
t$0H97s
T$0L+
t$4E3
t$8E3
t$8fD
T$8H;
t$8H;
T$8H+T$(H
t$8L;
T$8M;
T$HA;
T$hE3
t$hE3
T$hH;
t$HH;
T$hH+
t$HH9x
T$HI;
t$HI;
T$HL;
T$hM9
t$P;t$0t
t$P9T$0A
T$PA;
t$pD8|$Atp
t$PD8d$1
T$pE3
t$PE3
t$PE8
t$PH;
T$PH9E
T$PM;
t$pM;p
t$s'I
t$TE3
t$XD;u
t$xD9t$p
T$XE3
t$XE3
T$XE3
T$XH;
t$XH;t$`H
T$xHc
T$xI;
T$xL;
T)XY1
t,D8=R{K
t,fA98t&
t.8D$@t.H
T.D%d
t/D9t$`t(
t/H;]
t/H;_0r
t:H;~
t;H;]
t;H;_
t;I;v
t?8\$2t9L
t?D8|$0t
t@H;;r
t@L;P
t[H;^
T\|>E
t\D8upuVH
t\H;{
t\I;}
T^Z>Qt
t`fE9
t`H!\$8H
t|L9u
t+=D{
t<H!x
t<Lc@
t=(ba
t=D8met7H
t=D9~8A
t=f92t8H
t09q u
t0H;_
t0H;s
t2H;H
t2H;n
t2H;s
t3H;_
t453r
t5fA9(t/I
t6H;w
t7@8t$ t+3
t7H;]
t7H;^
t8@8}x
t99K u
t9D8u
t9D98A
ta@8}@u[H
tA9xDt<H
tAfA9+t;L
Tampering detected for package with PackageIntegrity Content Enforcement.
Target
Target MaxVersion lower than 10.0.14000.0 Not Applicable on Xbox
Target path %ls not found.
TargetDeviceFamily
TargetFilePath
TargetFileSize
targetInBaseline
TargetPackageFullName
targetPackageFullNameForRepair
TargetPlatform
TargetPlatformEnumMap
TargetSize
targetSize
TASKH$
tCD9mPu=H
tCL9k
tDH!\$0D
tdh.dll
TdhEnumerateProviderFieldInformation
TdhFormatProperty
TdhGetEventInformation
TdhGetEventMapInformation
TEMP 
TEMP$
TEMP(
TEMP,
TEMP.xml
TEMP@
TEMP\
temp_store
TEMP`
TEMP|
TEMP<
TEMP0
TEMP4
TEMP8
TEMPD
TEMPd
TEMPD
TEMPH
TEMPh
TEMPH
TEMPh
TEMPH
TEMPh
TEMPH
TEMPL
TEMPl
TEMPL
TEMPP
TEMPp
TEMPP
TEMPp
TEMPT
TEMPt
TEMPT
TEMPt
TEMPT
TEMPX
TEMPx
TerminateProcess
terminateReason
terminateRunningApps
terminateService
text()
tFf9.tAL
tffD9 t`
tFI;v
tGD9d$@
tGfA98tAI
tgH!]PH
tgH;u
t'H!D$(H
t-H;_
The blockmap could not be found.
The container policy manager APIs are not available.
The destination file exists but has an unexpected length. It will be removed.
The destination file exists but requires remediation. Delete it instead.
The number of installed resource packages is less than the known user applicable resource packages, so it is installable
The PFN from the AppxManifest did not match the registered PFN.
The signature origin from the file does not match the registered package.
The uri [%ws] is not found in data source cache
thH;_
tHH;{
ThirdPartyRatingLevel
ThirdPartyRatingSystem
This function should only be called for main packages, but the specified package %ws has type %d.
This should never occur
This user has insufficient rights to enqueue this request
thistle
thM9q@v!M;A@s
Thread Id
threadId
ThreadingModel
tIH;3r
tII;^
tIL9k
TileAlreadyExists
tileCount
TileId
tileId
TileId
tileId
TilesHandlerExecute
TilesStore
TileStore
tileUniqueId
TileUniqueId
TitleId
tJ;E@tEH
tJH;^
tJH;^pr
TL9y@vf;Y@}a
TlsAlloc
TlsFree
TlsGetValue
TlsSetValue
tMH;{
tmL;s8r
tn@8|$`ugI
tNH!|$ L
tnH;w
To Be Installed Related Set
tO9_HtJH
toBeInstalledRelatedSetPackageFullName
toH!|$0H!|$8
tOH;{
tomato
too many length or distance symbols
ToolBoxBitmap32
topic
Total estimated footprint size must not be 0
totalChangedSize
totalFileSize
tpfD9:t
tQf9/tLH
tQfD93tKH;
tQH;C
Trace
trackServiceHR
TrackServicingTerminatedAppFailed
TransactionCallerID
Translation
transparent
TreatAs
TreeResetNamedSecurityInfoW
trfD92tlH
TRUNCATE
TRUST_DEH_KEYWORD
TrustedAppRoot
TrustHelper
TryGetByPackageFullName %ws
Trying to DPL-protect encrypted %ls?
Trying to repair ACLs for %s
Trying to repair ACLs for package root (junction) in system volume: %s
Trying to set already encrypted file %ws to DPL-level %u?
TrySubmitThreadpoolCallback
tSfA9+tML
tTM;A
TUIt:
tUpV2
turquoise
tvI;^
tvI;v
tXD!E0H
tXf91tS
tyH;^
TypeLib
tZfD9!tTL
u L9w`u
u%H!\$8H
u(H;^
u(I;^
u.@8}
u/9t$@u)H
u:8_,u5
u:H9O
u:L9s`uFL9
u;H9A
u?H;^
U?iua
u[D8u
U^='Y
u}T]Q
u+H98u&H
u<H!M
u0H;~
u0L9p
u29C0t
u7H;_
U8H!}
u8S--
uaH9A
uAn6z
uap11:UserConfigurable
uap4:SupportsMultipleInstances
uap7:Name
uap8:AllowOverride
UATAUAVAWH
UATAVH
UATAWH
UAUAVH
UAVAWH
uDD8c
uEH!L$x
ug@89t`H
uGH98uBH
UHD;U
uHL9y
UInt32Add(collectedCharacterCount, lengthIncludingNullTerminator, &collectedCharacterCount)
UInt32Add(collectedCharaterOffset, sourceLength + 1, &collectedCharaterOffset)
UInt32Add(lengthIncludingNullTerminator, 1, &lengthIncludingNullTerminator)
UInt32Add(lengthWithoutTerminator, 1, &lengthIncludingTerminator)
Uint32HexString::Uint32HexString
UInt32Mult(lengthIncludingTerminator, sizeof(WCHAR), &byteCountIncludingTerminator)
Uint32String::Uint32String
UInt32Value
UInt64Mult %llu
uKH;w0r
ulD8t$@teL
uLfD9g
UMgrEnumerateSessionUsers
UMgrFreeSessionUsers
UMgrOpenProcessHandleForAccess
UMgrQueryDefaultAccountToken
UMgrQuerySessionUserToken
UMgrQueryUserContext
UMgrQueryUserToken
uMH;_
Unable to remove all user store downlevel installed package.
Unable to stage pending writes to activation catalog.
uncompress
UncompressedSizeKB
unD8|$At1A
Unexpected invalid namespace for MutablePackageDirectory %S
Unexpected multiple existing projection ids exist. Ignoring.
Unexpected mutable package directory should be a full file path
Unexpected: optional package %ws has %llu main packages and is in a related set
unH9}
UnhandledExceptionFilter
UninstallSuccess
UniqueConstraintCollisionRepairUnsuccessful
UniqueKey
Universal TargetDeviceFamily Not Applicable on Xbox
unknown
unknown compression method
Unknown DeploymentOperation %d
Unknown error
Unknown exception
Unknown fault injection type
Unknown operation %d
Unknown RuntimeBehavior
Unknown SQLite datatype %d
Unknown TrustLevel
UnknownUser
UnmapViewOfFile
unordered_map/set too long
UnregisterStateChangeNotification
UnregisterStateLock
Unsigned package must be in unsigned publisher namespace
Unsupported
Unsupported package type: %i
Untrusted packages are not allowed to deploy unless the device is dev unlocked
Untrusted redirected resource found, skipping deletion
Untrusted reparsepoint deletion failed
uP;uH
uPA8|$(u$H
UPDATE %s SET _Created=changeid_next_value() WHERE _Created=-2 AND _WorkId=?;
UPDATE %s SET _Deleted=changeid_next_value() WHERE _WorkId=?;
UPDATE %s SET _Modified=changeid_next_value() WHERE _Modified=-2 AND _WorkId=?;
UPDATE %s SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE %s SET _WorkId=0, _ShadowId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE AppExtension SET _Revision=?, _WorkId=?, Name=?, Id=?, PublicFolder=?, DisplayName=?, Description=?, Extension=?, _Dictionary=? WHERE _AppExtensionID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE AppExtension SET _Revision=?, _WorkId=?, Name=?, Id=?, PublicFolder=?, DisplayName=?, Description=?, Extension=?, _Dictionary=? WHERE _AppExtensionID=? AND _Revision=? AND _WorkId=0;
UPDATE AppInstaller SET _Revision=?, PackageFamily=?, Uri=?, Version=?, LastChecked=?, CheckUpdateInterval=?, Flags=?, PauseUntil=?, _Dictionary=? WHERE _AppInstallerID=? AND _Revision=?;
UPDATE Application SET _Revision=?, _WorkId=?, Package=?, "Index"=?, ApplicationType=?, Flags=?, Subsystem=?, PackageRelativeApplicationId=?, ApplicationUserModelId=?, DisplayName=?, Description=?, Square150x150Logo=?, Square44x44Logo=?, Wide310x150Logo=?, Square310x310Logo=?, Square71x71Logo=?, ForegroundText=?, BackgroundColor=?, Activation=?, HostId=?, Executable=?, Entrypoint=?, StartPage=?, ResourceGroup=?, LockScreenNotification=?, LockScreenBadgeLogo=?, SplashScreenImage=?, SplashScreenBackgroundColor=?, InitialRotationPreference=?, ApplicationViewMinWidth=?, AppListEntry=?, EditionId=?, VisualGroup=?, Parameters=?, CurrentDirectoryPath=?, _Dictionary=? WHERE _ApplicationID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Application SET _Revision=?, _WorkId=?, Package=?, "Index"=?, ApplicationType=?, Flags=?, Subsystem=?, PackageRelativeApplicationId=?, ApplicationUserModelId=?, DisplayName=?, Description=?, Square150x150Logo=?, Square44x44Logo=?, Wide310x150Logo=?, Square310x310Logo=?, Square71x71Logo=?, ForegroundText=?, BackgroundColor=?, Activation=?, HostId=?, Executable=?, Entrypoint=?, StartPage=?, ResourceGroup=?, LockScreenNotification=?, LockScreenBadgeLogo=?, SplashScreenImage=?, SplashScreenBackgroundColor=?, InitialRotationPreference=?, ApplicationViewMinWidth=?, AppListEntry=?, EditionId=?, VisualGroup=?, Parameters=?, CurrentDirectoryPath=?, _Dictionary=? WHERE _ApplicationID=? AND _Revision=? AND _WorkId=0;
UPDATE ApplicationExtension SET _Revision=?, _WorkId=?, Application=?, "Index"=?, Category=?, Activation=?, HostId=?, Executable=?, Entrypoint=?, RuntimeType=?, StartPage=?, ResourceGroup=?, Flags=?, Subsystem=?, Parameters=?, CurrentDirectoryPath=?, Id=?, _LocalizedDictionary=?, _Dictionary=? WHERE _ApplicationExtensionID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE ApplicationExtension SET _Revision=?, _WorkId=?, Application=?, "Index"=?, Category=?, Activation=?, HostId=?, Executable=?, Entrypoint=?, RuntimeType=?, StartPage=?, ResourceGroup=?, Flags=?, Subsystem=?, Parameters=?, CurrentDirectoryPath=?, Id=?, _LocalizedDictionary=?, _Dictionary=? WHERE _ApplicationExtensionID=? AND _Revision=? AND _WorkId=0;
UPDATE ApplicationExtension SET Activation=? WHERE _ApplicationExtensionID=? AND _WorkId=?;
UPDATE ApplicationProperty SET _Revision=?, _WorkId=?, Application=?, "Index"=?, Name=?, _Dictionary=? WHERE _ApplicationPropertyID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE ApplicationProperty SET _Revision=?, _WorkId=?, Application=?, "Index"=?, Name=?, _Dictionary=? WHERE _ApplicationPropertyID=? AND _Revision=? AND _WorkId=0;
UPDATE AppxManifest SET _Revision=?, _WorkId=?, Package=?, Xml=compress(?), _Dictionary=? WHERE _AppxManifestID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE AppxManifest SET _Revision=?, _WorkId=?, Package=?, Xml=compress(?), _Dictionary=? WHERE _AppxManifestID=? AND _Revision=? AND _WorkId=0;
UPDATE Bundle SET Package=? WHERE _BundleID=? AND _WorkId=?;
UPDATE ContentGroup SET _Revision=?, _WorkId=?, Package=?, "Index"=?, Name=?, ContentGroupType=?, Status=?, _Dictionary=? WHERE _ContentGroupID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE ContentGroup SET _Revision=?, _WorkId=?, Package=?, "Index"=?, Name=?, ContentGroupType=?, Status=?, _Dictionary=? WHERE _ContentGroupID=? AND _Revision=? AND _WorkId=0;
UPDATE DependencyGraph SET _IsMarkedForDeletion=0 WHERE _DependencyGraphID=? AND _WorkId=? AND _WorkId<>0 AND _IsMarkedForDeletion<>0 AND _ShadowId<>0;
UPDATE DependencyGraph SET _IsMarkedForDeletion=1 WHERE _DependencyGraphID=? AND _IsMarkedForDeletion=0 AND _WorkId=?;
UPDATE DependencyGraph SET _Revision=?1, _WorkId=?2, _ShadowId=?3, _IsMarkedForDeletion=?4, User=?5, DependentPackage=?6, "Index"=?7, SupplierPackage=?8, DependencyType=?9, _Dictionary=?10 WHERE (_DependencyGraphID=?11 AND _Revision=?12) AND _IsMarkedForDeletion=0 AND _WorkId=?13;
UPDATE File SET Flags=((Flags & ~?) | ?) WHERE _FileID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE File SET Flags=((Flags & ~?) | ?) WHERE _FileID=? AND _WorkId=0;
UPDATE Package SET _Revision=?, _WorkId=?, PackageFamily=?, ResourceId=?, Architecture=?, Version=?, PackageFullName=?, IsInbox=?, PackageType=?, Flags=?, Flags2=?, DisplayName=?, PublisherDisplayName=?, Description=?, Logo=?, OSMinVersion=?, OSMaxVersionTested=?, TargetDeviceFamily=?, Capabilities=?, SupportedUsers=?, SignatureOrigin=?, PackageOrigin=?, Enterprise=?, SourceBundle=?, EditionId=?, OSVersionWhenIndexed=?, InPlaceUpdateBaseline=?, _Dictionary=? WHERE _PackageID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET _Revision=?, _WorkId=?, PackageFamily=?, ResourceId=?, Architecture=?, Version=?, PackageFullName=?, IsInbox=?, PackageType=?, Flags=?, Flags2=?, DisplayName=?, PublisherDisplayName=?, Description=?, Logo=?, OSMinVersion=?, OSMaxVersionTested=?, TargetDeviceFamily=?, Capabilities=?, SupportedUsers=?, SignatureOrigin=?, PackageOrigin=?, Enterprise=?, SourceBundle=?, EditionId=?, OSVersionWhenIndexed=?, InPlaceUpdateBaseline=?, _Dictionary=? WHERE _PackageID=? AND _Revision=? AND _WorkId=0;
UPDATE Package SET Flags=((Flags & ~?) | ?) WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET Flags=((Flags & ~?) | ?) WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET Flags=~0x20000&Flags WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET Flags=~0x20000&Flags WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET Flags=~0x80&Flags WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET Flags=~0x80&Flags WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET FLAGS=~4096&FLAGS WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET FLAGS=~4096&FLAGS WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET FLAGS=~8&FLAGS WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET FLAGS=~8&FLAGS WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET Flags=~8&Flags WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET Flags=~8&Flags WHERE PackageFullName=? AND _WorkId=0;
UPDATE Package SET Flags=0x20000|Flags WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET Flags=0x20000|Flags WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET Flags=0x80|Flags WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET Flags=0x80|Flags WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET FLAGS=4096|FLAGS WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET FLAGS=4096|FLAGS WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET FLAGS=8|FLAGS WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET FLAGS=8|FLAGS WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET Flags=Flags&~0x400 WHERE (PackageType & 0x29!=0) AND _PackageID IN (SELECT _PackageID FROM PACKAGE WHERE PackageFamily IN (SELECT PackageFamily FROM Package WHERE (PackageType & 0x29!=0) AND _PackageID IN (SELECT Package FROM PackageUser WHERE _WorkId=?1 AND DeploymentState!=6 AND DeploymentState!=5)) AND _WorkId=0);
UPDATE Package SET Flags=Flags&~0x400 WHERE (PackageType&0x29!= 0) AND PackageFamily=? AND _WorkId=0;
UPDATE Package SET Flags2=((Flags2 & ~?) | ?) WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET Flags2=((Flags2 & ~?) | ?) WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET FLAGS2=~0x100&FLAGS2 WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET FLAGS2=~0x100&FLAGS2 WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET FLAGS2=0x100|FLAGS2 WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET FLAGS2=0x100|FLAGS2 WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET InPlaceUpdateBaseline=? WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET InPlaceUpdateBaseline=? WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET IsInbox=? WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET IsInbox=? WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET OSMinVersion=?, OSMaxVersionTested=? WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET OSMinVersion=?, OSMaxVersionTested=? WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET OSVersionWhenIndexed=? WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET OSVersionWhenIndexed=? WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET SignatureOrigin=?, PackageOrigin=? WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET SignatureOrigin=?, PackageOrigin=? WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET SourceBundle=? WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET SupportedUsers=? WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET SupportedUsers=? WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET TargetDeviceFamily=? WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageExtension SET _Revision=?, _WorkId=?, Package=?, "Index"=?, Category=?, Activation=?, HostId=?, Executable=?, Entrypoint=?, RuntimeType=?, StartPage=?, Flags=?, Parameters=?, CurrentDirectoryPath=?, Id=?, ResourceGroup=?, _Dictionary=? WHERE _PackageExtensionID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageExtension SET _Revision=?, _WorkId=?, Package=?, "Index"=?, Category=?, Activation=?, HostId=?, Executable=?, Entrypoint=?, RuntimeType=?, StartPage=?, Flags=?, Parameters=?, CurrentDirectoryPath=?, Id=?, ResourceGroup=?, _Dictionary=? WHERE _PackageExtensionID=? AND _Revision=? AND _WorkId=0;
UPDATE PackageLocation SET _Revision=?, _WorkId=?, Package=?, Volume=?, InstalledLocation=?, MutableLink=?, MutableLocation=?, ProjectionId=?, _Dictionary=? WHERE _PackageLocationID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageLocation SET _Revision=?, _WorkId=?, Package=?, Volume=?, InstalledLocation=?, MutableLink=?, MutableLocation=?, ProjectionId=?, _Dictionary=? WHERE _PackageLocationID=? AND _Revision=? AND _WorkId=0;
UPDATE PackagePolicy SET _Revision=?, _WorkId=?, User=?, Package=?, Name=?, "Index"=?, ValueString=?, ValueNumber=?, _Dictionary=? WHERE _PackagePolicyID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackagePolicy SET _Revision=?, _WorkId=?, User=?, Package=?, Name=?, "Index"=?, ValueString=?, ValueNumber=?, _Dictionary=? WHERE _PackagePolicyID=? AND _Revision=? AND _WorkId=0;
UPDATE PackageProperty SET _Revision=?, _WorkId=?, Package=?, "Index"=?, Name=?, _Dictionary=? WHERE _PackagePropertyID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageProperty SET _Revision=?, _WorkId=?, Package=?, "Index"=?, Name=?, _Dictionary=? WHERE _PackagePropertyID=? AND _Revision=? AND _WorkId=0;
UPDATE PackageUser SET _Revision=?, _WorkId=?, Package=?, User=?, InstallTime=?, OSVersionWhenInstalled=?, WhenRestored=?, IsExplicitlyInstalled=?, DeploymentState=?, AppDataVolume=?, _Dictionary=? WHERE _PackageUserID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageUser SET _Revision=?, _WorkId=?, Package=?, User=?, InstallTime=?, OSVersionWhenInstalled=?, WhenRestored=?, IsExplicitlyInstalled=?, DeploymentState=?, AppDataVolume=?, _Dictionary=? WHERE _PackageUserID=? AND _Revision=? AND _WorkId=0;
UPDATE PackageUser SET AppDataVolume=? WHERE _PackageUserID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageUser SET AppDataVolume=? WHERE _PackageUserID=? AND _WorkId=0;
UPDATE PackageUser SET DeploymentState=? WHERE User=? AND _PackageUserID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageUser SET DeploymentState=? WHERE User=? AND _PackageUserID=? AND _WorkId=0;
UPDATE PackageUser SET DeploymentState=?1 WHERE DeploymentState IN ( SELECT pu.DeploymentState FROM PackageUser as pu INNER JOIN Package as p ON p._PackageID=pu.Package WHERE p.PackageFullName=?2  AND p.PackageType=1 AND pu.DeploymentState=?3 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) UNION ALL SELECT pu.DeploymentState FROM PackageUser as pu INNER JOIN Package as p ON p._PackageID=pu.Package WHERE p.SourceBundle IN (SELECT SourceBundle FROM Package WHERE PackageFullName=?2 AND PackageType=8) AND pu.DeploymentState=?3 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4));
UPDATE PackageUser SET DeploymentState=?1 WHERE DeploymentState IN (SELECT pu.DeploymentState FROM PackageUser as pu INNER JOIN Package as p ON p._PackageID=pu.Package WHERE p.PackageFullName=?2 AND p.PackageType=1 AND pu.DeploymentState=?3 AND pu._WorkId=0 AND p._WorkId=0 UNION ALL SELECT pu.DeploymentState FROM PackageUser as pu INNER JOIN Package as p ON p._PackageID=pu.Package WHERE p.SourceBundle IN (SELECT SourceBundle FROM Package WHERE PackageFullName=?2 AND PackageType=8) AND pu.DeploymentState=?3 AND pu._WorkId=0 AND p._WorkId=0);
UPDATE PackageUser SET OSVersionWhenInstalled=? WHERE _PackageUserID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageUser SET OSVersionWhenInstalled=? WHERE _PackageUserID=? AND _WorkId=0;
UPDATE PackageUserStatus SET Status=?3 WHERE PackageIdentity IN (SELECT _PackageIdentityID FROM PackageIdentity WHERE PackageFullName=?2) AND User IN (SELECT _UserID FROM User WHERE UserSid=?1);
UPDATE PrimaryTileUser SET _Revision=?, _WorkId=?, _Created=?, _Modified=?, User=?, ApplicationIdentity=?, State=?, TileUniqueId=?, _Dictionary=? WHERE _PrimaryTileUserID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PrimaryTileUser SET _Revision=?, _WorkId=?, _Created=?, _Modified=?, User=?, ApplicationIdentity=?, State=?, TileUniqueId=?, _Dictionary=? WHERE _PrimaryTileUserID=? AND _Revision=? AND _WorkId=0;
UPDATE Sequence SET LastValue=? WHERE Id=?;
UPDATE SharedPackageContainer SET _Revision=?, _WorkId=?, Id=?, Name=?, User=?, Status=?, _Dictionary=? WHERE _SharedPackageContainerID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE SharedPackageContainer SET _Revision=?, _WorkId=?, Id=?, Name=?, User=?, Status=?, _Dictionary=? WHERE _SharedPackageContainerID=? AND _Revision=? AND _WorkId=0;
UPDATE WowDependencyGraph SET _IsMarkedForDeletion=0 WHERE _WowDependencyGraphID=? AND _WorkId=? AND _WorkId<>0 AND _IsMarkedForDeletion<>0 AND _ShadowId<>0;
UPDATE WowDependencyGraph SET _IsMarkedForDeletion=1 WHERE _WowDependencyGraphID=? AND _IsMarkedForDeletion=0 AND _WorkId=?;
UPDATE WowDependencyGraph SET _Revision=?1, _WorkId=?2, _ShadowId=?3, _IsMarkedForDeletion=?4, User=?5, DependentPackage=?6, "Index"=?7, SupplierPackage=?8, DependencyType=?9, _Dictionary=?10 WHERE (_WowDependencyGraphID=?11 AND _Revision=?12) AND _IsMarkedForDeletion=0 AND _WorkId=?13;
UPDATE XboxPackage SET _Revision=?, _WorkId=?, Package=?, EditionId=?, BuildId=?, DeviceId=?, BuildVersion=?, ContentId=?, ProductId=?, MediaId=?, PackageSize=?, TitleId=?, PrimaryServiceConfigId=?, EraVersion=?, EscrowedKeyBlobId=?, _Dictionary=? WHERE _XboxPackageID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE XboxPackage SET _Revision=?, _WorkId=?, Package=?, EditionId=?, BuildId=?, DeviceId=?, BuildVersion=?, ContentId=?, ProductId=?, MediaId=?, PackageSize=?, TitleId=?, PrimaryServiceConfigId=?, EraVersion=?, EscrowedKeyBlobId=?, _Dictionary=? WHERE _XboxPackageID=? AND _Revision=? AND _WorkId=0;
UPDATE_MIGRATION_TASK_DEH_KEYWORD
UpdateBlocksActivation
updateCost
UpdateCost
UpdatePackageInRegistryStore
UpdatePackageStatus
UpdatePrimaryTileUser
UpdateProcThreadAttribute
UpdateSize
UpdateStatistics
UpdateUpgradePackageInRegistryStore
Updating app data mountpoint for package failed because data is on internal. Attempting to move to external
Updating app data mountpoint for package failed. Continuing to next package.
Updating filter driver for package
Updating mountpoint for package %ws failed. Continuing to next package.
UpdatingDependencyGraph
Upgrade
uPH9i
UpstreamDependentPackageFullName
UpstreamDependentPackageKey
UrlCreateFromPathW
urlmon.dll
uS!D$0A
user %ls
User %ls 0x%0x
User %ws
User %ws 0x%0x
User doesn't yet exist in database, just install all packages in the related set.
User has no package installed and no stub can be installed, falling back to full app
User::Exists
User::ExistsByUserSid
User::Find
User::Get
User::GetByUserSid
User::GetDefaultAccount
User::GetEveryone
user_version
user32.dll
USERDATAACCESS_EXTENSION_KEYWORD
UserDataAvailability
UserDatabaseStatisticsLastUpdated
UserDomain
USERENV.dll
UserId
userId
UserId
userId
UserId
userId
UserId
userId
UserId
userId
UserId
userId
UserId
userId
UserId
userId
UserId
User-initiated cancels are not paused--instead, they are rolled back
User-initiated uninstall of non-uninstallable app is not supported.
UserMutablePackagesOnline
UserName
USERS\
UserSid
userSid
UserSid
userSid
UserSid
userSid
UserSid
userSid
UserSid
UserSID
UserSid
userSid
UserSid
userSid
UserSID
userSid
UserSid
userSid
UserSid
userSid
UserSid
userSidString
UserSidString
userSidString
UsersPackageAlreadyInstalledCount
UsersPackageFamilyAlreadyInstalledCount
UseSystemMetadataPath
Using cached signature origin
Using origin derived from signature
USVWATAUAVAWH
USVWATAUAVH
USVWATAUAWH
USVWATAVAWH
USVWAUAVAWH
USVWAVAWH
USVWAVH
USVWH
uU!UoH
uu@8uht@E
UuidCreate
UuidFromStringW
UuidToStringW
UUUUUUU
UVAUAVAWH
UVAVH
uVHc^$H
UVWATAUAVAWH
UVWATAVH
UVWATAWH
UVWAUAVH
UVWAVAWH
UWATAUAVH
UWATAUAWH
UWATAVAWH
UWAUAVAWH
UWAVH
UWAWH
uWH9_
uXD9t$xvQ
uYL9w`uS
v&H;{
v&H;Y
V,A;V,r
v.L;A
v:H;X
v@8t$0uUH
v\H;X
v1L;s
v2H;_
v2I;H
v5H;{
v7H;X
v8H;_
VAILCentennialEnabled
VailProxy
ValidateFile
Value
value != existingValue
Value %ls
ValueName
ValueValue
VarFileInfo
variant
variantKind
vb'vb'v
vector too long
Vector<HSTRING>::Make(&_dataFormats)
verb != existingVerb
verbKeyValuePair->get_Key(&verbId)
verbKeyValuePair->get_Value(&verbInspectable)
Verbose
verbPropertyValue->GetString(&verb)
VerifyIfAppDataFolderAlreadyExists %u
VerifyIfSecureSystemAppDataFolderAlreadyExists
VerifyIfStateChangeNotificationExists
VerifyIfStateLockExists %u
VerifyIfStateRootsAlreadyExist %u
VerifyIfSystemAppDataFolderAlreadyExists %u
VerifyIfSystemAppDataKeyAlreadyExists
VerifyPackageFamilyName
VerifyPackageFullName
VerifyPackagePublisher
VerifyVersionInfoW
VerQueryValueW
VerSetConditionMask
version
Version
version="1.0" encoding="utf-8"
VersionIndependentProgID
versionNumberString.Set(versionNumber)
versionOnMachine
VetoReason
vHD+p
vHH;^
vhL9>
violet
VirtualAlloc
VirtualFree
VirtualProtect
VISUALELEMENTS_EXTENSION_KEYWORD
VisualGroup
VMAP$
VMAP,
VMAP|
VMAP<
VMAP4
VMAPd
VMAPD
VMAPL
VMAPt
VolumeID
VolumeKey
VolumeMediaID
VolumeMediaId
VolumeMediaID
VolumeMountPoint
VolumeName
VRThZ
VS_VERSION_INFO
VuiAlm
VuiPron
VWATAVAWH
VWAUAVAWH
VWAVH
VWAWH
vyD8d$0t>H;x
W H+W
w!t=+
W_W^!-
W2a')
W3^+`x
WaitForMultipleObjects
WaitForRequestsInUseTimeout
WaitForSingleObject
WaitForSingleObjectEx
WaitForThreadpoolTimerCallbacks
WaitHandlesEmpty
WaitOnAddress
waitResult
WaitResult
waitResult
WakeByAddressAll
WalkDirectoryTree %ls %u
WalkDirectoryTree %ls %u %u
WalkDirectoryTree %ls path %ls %u
WalkDirectoryTree %ws count %llu
WalkTreeCallbackForRepairHardlinkFileAcls failed to process file: %ws, isHardLinked: %u
Warning
WATAUAVAWH
WATAVH
WAVAWH
wcifs
wcifs Instance
wcifs Outer Instance
wcschr
wcscmp
wcsncmp
wcsrchr
wcsstr
WEB_ACCOUNT_PROVIDER_DEH_KEYWORD
WER submit result
WerRegisterCustomMetadata
WerReportAddFile
WerReportCloseHandle
WerReportCreate
WerReportSetParameter
WerReportSubmit
WEVT_TEMPLATE
wG[+pux%
WGe]_
wheat
whileUnlocked
white
whiteSmoke
wide310x150Logo
Wide310x150Logo
WideCharToMultiByte
WideLogo
wideLogoOnly
width320
width500
wil::err_failfast_policy::HResult
wil::make_hstring_from_buffer_nothrow(wistd::move(multiStringBuffer), GetAddressOf())
wilActivity
WilError_03
WilFailureNotifyWatchers
wilResult
win:Error
win:Info
win:Informational
win:ResponseTime
win:Start
win:Stop
win:Verbose
win:Warning
win32
Win32alacarteEnabled
win32App
win32-longpath
win32-noimpersonation
win64
win8xappx
windows
Windows.7067329
Windows.8828080
windows.activatableClass
windows.appExecutionAlias
windows.appExtension
windows.appExtensionHost
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager
windows.applyDataExtension
Windows.AppointmentDataProvider
windows.appService
Windows.AppService
windows.appUriHandler
windows.autoPlayHandler
Windows.BackgroundTasks
windows.backgroundTasks
windows.barcodeScannerProvider
Windows.BarcodeScannerProvider
windows.comInterface
windows.comServer
Windows.ContactDataProvider
Windows.Core
windows.deploymentExtensionHandler
Windows.Desktop
Windows.DesktopServer
windows.devicesflow_cw5n1h2txyewy
Windows.DockingController_cw5n1h2txyewy
Windows.EmailDataProvider
windows.fileTypeAssociation
Windows.Foundation.Collections.Detail.Vector
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComInterfaceRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComProxyStubRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComTreatAsClassRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.Internal.ComClassRegistrationCombinedProperties>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<OSIntegration.DEH.Internal.ContractIdActivatableClassIdPair, Object>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, OSIntegration.DEH.ComProgIdRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, OSIntegration.DEH.ComTypeLibRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IExeServerActivatableClassRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IExeServerRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<UInt32, OSIntegration.DEH.IComServerRegistration>>
Windows.Foundation.Collections.IIterator`1<String>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComInterfaceRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComProxyStubRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComTreatAsClassRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.Internal.ComClassRegistrationCombinedProperties>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<OSIntegration.DEH.Internal.ContractIdActivatableClassIdPair, Object>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, OSIntegration.DEH.ComProgIdRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, OSIntegration.DEH.ComTypeLibRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IExeServerActivatableClassRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IExeServerRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<UInt32, OSIntegration.DEH.IComServerRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Uri>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.Activation>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.Application>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.ApplicationExtension>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.ApplicationProperty>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.DependencyGraph>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.Package>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.PackageExtension>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.PackageFamily>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.PackageProperty>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.PackageUser>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.User>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.Management.Deployment.OSIntegration.ComHelper>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.Management.Deployment.OSIntegration.DehPackagePair>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.Management.Deployment.OSIntegration.IDehRegistration>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.Management.Deployment.OSIntegration.XMLDOMElement>
Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComInterfaceRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComProxyStubRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComTreatAsClassRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.Internal.ComClassRegistrationCombinedProperties>
Windows.Foundation.Collections.IKeyValuePair`2<OSIntegration.DEH.Internal.ContractIdActivatableClassIdPair, Object>
Windows.Foundation.Collections.IKeyValuePair`2<String, Object>
Windows.Foundation.Collections.IKeyValuePair`2<String, OSIntegration.DEH.ComProgIdRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<String, OSIntegration.DEH.ComTypeLibRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<String, String>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IExeServerActivatableClassRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IExeServerRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<UInt32, OSIntegration.DEH.IComServerRegistration>
Windows.Foundation.Collections.IMap`2<Guid, OSIntegration.DEH.ComInterfaceRegistration>
Windows.Foundation.Collections.IMap`2<Guid, OSIntegration.DEH.ComProxyStubRegistration>
Windows.Foundation.Collections.IMap`2<Guid, OSIntegration.DEH.ComTreatAsClassRegistration>
Windows.Foundation.Collections.IMap`2<Guid, OSIntegration.DEH.Internal.ComClassRegistrationCombinedProperties>
Windows.Foundation.Collections.IMap`2<OSIntegration.DEH.Internal.ContractIdActivatableClassIdPair, Object>
Windows.Foundation.Collections.IMap`2<String, Object>
Windows.Foundation.Collections.IMap`2<String, OSIntegration.DEH.ComProgIdRegistration>
Windows.Foundation.Collections.IMap`2<String, OSIntegration.DEH.ComTypeLibRegistration>
Windows.Foundation.Collections.IMap`2<String, String>
Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.IExeServerActivatableClassRegistration>
Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.IExeServerRegistration>
Windows.Foundation.Collections.IMap`2<UInt32, OSIntegration.DEH.IComServerRegistration>
Windows.Foundation.Collections.IMapView`2<Guid, OSIntegration.DEH.ComInterfaceRegistration>
Windows.Foundation.Collections.IMapView`2<Guid, OSIntegration.DEH.ComProxyStubRegistration>
Windows.Foundation.Collections.IMapView`2<Guid, OSIntegration.DEH.ComTreatAsClassRegistration>
Windows.Foundation.Collections.IMapView`2<Guid, OSIntegration.DEH.Internal.ComClassRegistrationCombinedProperties>
Windows.Foundation.Collections.IMapView`2<OSIntegration.DEH.Internal.ContractIdActivatableClassIdPair, Object>
Windows.Foundation.Collections.IMapView`2<String, Object>
Windows.Foundation.Collections.IMapView`2<String, OSIntegration.DEH.ComProgIdRegistration>
Windows.Foundation.Collections.IMapView`2<String, OSIntegration.DEH.ComTypeLibRegistration>
Windows.Foundation.Collections.IMapView`2<String, String>
Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.IExeServerActivatableClassRegistration>
Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.IExeServerRegistration>
Windows.Foundation.Collections.IMapView`2<UInt32, OSIntegration.DEH.IComServerRegistration>
Windows.Foundation.Collections.IVector`1<String>
Windows.Foundation.Collections.IVector`1<Windows.Foundation.Uri>
Windows.Foundation.Collections.IVector`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.Activation>
Windows.Foundation.Collections.IVector`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.Application>
Windows.Foundation.Collections.IVector`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.ApplicationExtension>
Windows.Foundation.Collections.IVector`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.ApplicationProperty>
Windows.Foundation.Collections.IVector`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.DependencyGraph>
Windows.Foundation.Collections.IVector`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.Package>
Windows.Foundation.Collections.IVector`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.PackageExtension>
Windows.Foundation.Collections.IVector`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.PackageFamily>
Windows.Foundation.Collections.IVector`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.PackageProperty>
Windows.Foundation.Collections.IVector`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.PackageUser>
Windows.Foundation.Collections.IVector`1<Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.User>
Windows.Foundation.Collections.IVector`1<Windows.Internal.Management.Deployment.OSIntegration.ComHelper>
Windows.Foundation.Collections.IVector`1<Windows.Internal.Management.Deployment.OSIntegration.DehPackagePair>
Windows.Foundation.Collections.IVector`1<Windows.Internal.Management.Deployment.OSIntegration.IDehRegistration>
Windows.Foundation.Collections.IVector`1<Windows.Internal.Management.Deployment.OSIntegration.XMLDOMElement>
Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Uri>
Windows.Foundation.Collections.PropertySet
Windows.Foundation.ExeServerActivatableClassRegistration
Windows.Foundation.ExeServerRegistration
Windows.Foundation.PropertyValue
Windows.Foundation.Uri
Windows.FullTrustApplication
windows.fullTrustProcess
Windows.Holographic
windows.hostRuntime
windows.immersivecontrolpanel_cw5n1h2txyewy
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.Activation
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.Application
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.ApplicationExtension
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.ApplicationProperty
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.Database
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.DependencyGraph
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.Dictionary
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.Package
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.PackageExtension
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.PackageFamily
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.PackageProperty
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.PackageUser
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.Transaction
Windows.Internal.ApplicationModel.StateRepository.DataAccessLayer.User
Windows.Internal.ComposableShell.ProxyApp.ProxyAppService
Windows.Internal.Management.Deployment.OSIntegration.AppxManifestReader
Windows.Internal.Management.Deployment.OSIntegration.ComHelper
Windows.Internal.Management.Deployment.OSIntegration.DehPackage
Windows.Internal.Management.Deployment.OSIntegration.DehPackagePair
Windows.Internal.Management.Deployment.OSIntegration.DehRegistrationTable
Windows.Internal.Management.Deployment.OSIntegration.DehRequest
Windows.Internal.Management.Deployment.OSIntegration.IDehRequest
Windows.Internal.Management.Deployment.OSIntegration.ManifestInformation
Windows.Internal.Management.Deployment.OSIntegration.Origin
Windows.Internal.Management.Deployment.OSIntegration.Package
Windows.Internal.Management.Deployment.OSIntegration.PackageIdentity
Windows.Internal.Management.Deployment.OSIntegration.PackageInstallInformation
Windows.Internal.Management.Deployment.OSIntegration.PackageLocalization
Windows.Internal.Management.Deployment.OSIntegration.PackageLocation
Windows.Internal.Management.Deployment.OSIntegration.PackageOptions
Windows.Internal.Management.Deployment.OSIntegration.PackageType
Windows.Internal.Management.Deployment.OSIntegration.UserDataInformation
Windows.Internal.Management.Deployment.OSIntegration.XMLDOMElement
Windows.Internal.SecurityMitigationsBroker
Windows.Internal.StateRepository.AppInstaller
Windows.Internal.StateRepository.AppInstallerUri
Windows.Internal.StateRepository.Management.RepositoryManager
Windows.Internal.StateRepository.Package
Windows.Internal.StateRepository.PrimaryTileUserNotificationChannel
Windows.IoT
Windows.IoTHeadless
Windows.Launch
windows.localExperiencePack
Windows.Management.Deployment.Internal.PackageManagerInternal
Windows.Management.Deployment.PackageManager
Windows.MiracastView_cw5n1h2txyewy
Windows.Mobile
Windows.MtcUvc_cw5n1h2txyewy
windows.mutablePackageDirectories
Windows.Networking.Connectivity.NetworkInformation
Windows.PartialTrustApplication
Windows.PosPaymentConnector
windows.preInstalledConfigTask
Windows.PreInstalledConfigTask
Windows.PrintDialog_cw5n1h2txyewy
Windows.PrintDialog3D_cw5n1h2txyewy
Windows.PrintSupportExtension
Windows.PrintSupportWorkflow
Windows.PrintWorkflowBackgroundTask
windows.protocol
windows.publisherCacheFolders
windows.repositoryExtension
windows.searchFilterHandler
windows.searchProtocolHandler
Windows.Server
windows.service
windows.stateExtension
Windows.Storage.Streams.RandomAccessStreamReference
Windows.Team
Windows.Universal
windows.updateTask
Windows.UpdateTask
Windows.UserDataTaskDataProvider
windows.userMutablePackageDirectories
windows.webAccountProvider
Windows.Windows8x
Windows.Xbox
Windows.XboxERA
Windows.XboxSRA
Windows::Foundation::Collections::Internal::Vector<HSTRING>::Make(&classNames)
windowsApp
WindowsApps
WindowsCompareStringOrdinal
WindowsConcatString
WindowsConcatString( Wrappers::HStringReference(typeLibIdString).Get(), versionNumber, typeLibKey.GetAddressOf())
WindowsCreateString
WindowsCreateString(firstNullTerminator, 1, GetAddressOf())
WindowsCreateStringReference
WindowsDeleteString
WindowsDeleteString(initializedElement->activatableClassId)
WindowsDeleteString(initializedElement->contractId)
WindowsDeleteString(uninitializedElement->contractId)
WindowsDeleteStringBuffer
WindowsDuplicateString
WindowsDuplicateString(source.contractId, &uninitializedElement->contractId)
WindowsGetStringLen
WindowsGetStringRawBuffer
WindowsIsStringEmpty
WindowsPreallocateStringBuffer
WindowsPreallocateStringBuffer(collectedCharacterCount, &collectedCharacters, &multiStringBuffer)
WindowsPromoteStringBuffer
WindowsRuntimeAccess
WindowsStringHasEmbeddedNull
WindowsUpdate*
WINERROR
winrt::hresult_error: %ls
WINTRUST.dll
wintrust.dll
WintrustGetRegPolicyFlags
WinVerifyTrust
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)) AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)) AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (p._WorkId=0 OR p._WorkId=?4);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.AppListEntry=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.HostId=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category=?2 AND (ae._WorkId=0 OR ae._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND (p._WorkId=0 OR p._WorkId=?5)  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND (p._WorkId=0 OR p._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON a.Package=p._PackageID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.ApplicationUserModelId=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN FileTypeAssociation AS fta ON fta.Extension=ae._ApplicationExtensionID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category='windows.fileTypeAssociation' AND p.PackageFullName=?2 AND fta.FileType=?3 AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) AND (fta._WorkId=0 OR fta._WorkId=?6);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN Protocol AS pr ON pr.Extension=ae._ApplicationExtensionID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category='windows.protocol' AND p.PackageFullName=?2 AND pr.ProtocolName=?3 AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) AND (pr._WorkId=0 OR pr._WorkId=?6);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (a._WorkId=0 OR a._WorkId=?6)  AND (p._WorkId=0 OR p._WorkId=?6) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (p._WorkId=0 OR p._WorkId=?6)  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (p._WorkId=0 OR p._WorkId=?6);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.AppListEntry=?2 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.HostId=?2 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category=?2 AND ae._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND p._WorkId=0 AND a._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p._WorkId=0  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON a.Package=p._PackageID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND p._WorkId=0 AND pu._WorkId=0 AND a._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN FileTypeAssociation AS fta ON fta.Extension=ae._ApplicationExtensionID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category='windows.fileTypeAssociation' AND p.PackageFullName=?2 AND fta.FileType=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND fta._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN Protocol AS pr ON pr.Extension=ae._ApplicationExtensionID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category='windows.protocol' AND p.PackageFullName=?2 AND pr.ProtocolName=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pr._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND a._WorkId=0  AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND p._WorkId=0  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND p._WorkId=0;
Wldp.dll
WldpIsAppApprovedByPolicy
wLI?S
WMIPROVIDER_EXTENSION_KEYWORD
wO^oB
WofShouldCompressBinaries
wofutil.dll
wOQ#%d
WorkId
workId
WorkId
workid
workId
WorkId
WowDependencyGraph
wp8xappx
WPDeveloperAppAllowed
WritablePackageRoot
WriteFile
WritePrimaryTiles
WriteSetting: Name=%ls
Writesize
WriteStateContainerValue
WriteStateContainerValue %ls %ls %u
WriteStateContainerValue %ls (empty) %u
wSkBu
WTSEnumerateSessionsW
WTSFreeMemory
WTSQuerySessionInformationW
WTSQueryUserToken
wVA97s
wwahost.exe
WXX(yXv
wZKVi
x ATAUAVAWD
x ATAVAWH
x ATH
x AUAVAWH
x AVAWI
x AVH
x AVL
x AWH
x UATAUAVAWH
x UATAVH
x UAUAWH
x UAVAWH
x!D8uHu
x(D8m@t+E
x/H;_
x:?72^@w
x;H;{
x]H;Y@sWH
X_^[]
x`D8}8I
x}L;wPr
X~zjg
x+D8e
x+D8m@t.M
x>H;{
x28\$Bt
x68\$0u
x86a64
x88\$@t2A
xA@8upt!L
XA]_^[
XA_A^_^[]
xA_A^_^[]
XA_A^A]A\_^[]
xA_A^A]A\_^[]
XA_A^A]A\_^[]
xA_A^A]A\_^[]
XA_A^A]A\_^[]
XA_A^A]A\_^][
XapState
xb9|$p
Xbox.DisplayTroubleshooter_cw5n1h2txyewy
Xbox.KinectTuner_cw5n1h2txyewy
xbox.live
xbox.live.
Xbox.NetworkTroubleshooter_cw5n1h2txyewy
Xbox.Oobe_cw5n1h2txyewy
Xbox.SystemUpdate_cw5n1h2txyewy
XboxPackage
XbVS>
xd@8}
xD8t$xtn
xf;|$0sJD
xGD8l$@tLH
XIcF$H
xID8l$@tNH
xID8l$@tOH
xID9m0u
xJH;Y sDH
XJZb\N^L`0b
xM8\$AtG
xmlns:m="http://schemas.microsoft.com/appx/2013/appxprovisionpackage"
x-msix-datasource://
xn0?8
xpD8m_t
xPL9m
xq@8u
xq9|$`uIL
xQD9m@t!H
Xr%%Jk
xr@8}@t+E3
xRD8t$0t3H
XtH s
xuL9d3Ht/D
x-updateagent://%s:%s:%I64u
xw@8t$0u
x-windowsupdate
xXD8e_t
xzH9u
y$RSTS
y&D9O
Y;\$8tQ
y@H9A8u
y<FQ1
YA$r0
YD8}gu
yellow
yellowGreen
yjP9j
YR\/\
YRo>M
yvGA3
yXL9w0v
yxxxxxxxI
z(nU=
z/6jG
Z2b/8
zAeA?
zD8t$Pt
ZE`;b
zf"@(
ZjLp/e
zPL9y(w
ZwFlushBuffersFileEx
ZwQueryEaFile
ZwQuerySecurityAttributesToken
Zyb=N 
ZZ^&Q
